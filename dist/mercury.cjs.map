{"version":3,"sources":["../node_modules/.pnpm/tsup@8.2.3_typescript@5.5.4/node_modules/tsup/assets/cjs_shims.js","../node_modules/.pnpm/heap@0.2.7/node_modules/heap/lib/heap.js","../node_modules/.pnpm/heap@0.2.7/node_modules/heap/index.js","../node_modules/.pnpm/difflib@git+https+++git@github.com+postlight+difflib.js.git#32e8e38c7fcd935241b9baab71bb432fd9b166ed/node_modules/difflib/lib/difflib.js","../node_modules/.pnpm/difflib@git+https+++git@github.com+postlight+difflib.js.git#32e8e38c7fcd935241b9baab71bb432fd9b166ed/node_modules/difflib/index.js","../src/mercury.js","../src/extractors/add-extractor.js","../src/utils/merge-supported-domains.js","../src/extractors/get-extractor.js","../src/extractors/all.js","../src/extractors/custom/index.js","../src/extractors/custom/blogspot.com/index.js","../src/extractors/custom/nymag.com/index.js","../src/extractors/custom/wikipedia.org/index.js","../src/extractors/custom/twitter.com/index.js","../src/extractors/custom/www.nytimes.com/index.js","../src/extractors/custom/www.theatlantic.com/index.js","../src/extractors/custom/www.newyorker.com/index.js","../src/extractors/custom/www.wired.com/index.js","../src/extractors/custom/www.msn.com/index.js","../src/extractors/custom/www.yahoo.com/index.js","../src/extractors/custom/www.buzzfeed.com/index.js","../src/extractors/custom/fandom.wikia.com/index.js","../src/extractors/custom/www.littlethings.com/index.js","../src/extractors/custom/www.politico.com/index.js","../src/extractors/custom/deadspin.com/index.js","../src/extractors/custom/www.broadwayworld.com/index.js","../src/extractors/custom/www.apartmenttherapy.com/index.js","../src/extractors/custom/medium.com/index.js","../src/extractors/custom/www.tmz.com/index.js","../src/extractors/custom/www.washingtonpost.com/index.js","../src/extractors/custom/www.huffingtonpost.com/index.js","../src/extractors/custom/newrepublic.com/index.js","../src/extractors/custom/money.cnn.com/index.js","../src/extractors/custom/www.theverge.com/index.js","../src/extractors/custom/www.cnn.com/index.js","../src/extractors/custom/www.aol.com/index.js","../src/extractors/custom/www.youtube.com/index.js","../src/extractors/custom/www.theguardian.com/index.js","../src/extractors/custom/www.sbnation.com/index.js","../src/extractors/custom/www.bloomberg.com/index.js","../src/extractors/custom/www.bustle.com/index.js","../src/extractors/custom/www.npr.org/index.js","../src/extractors/custom/www.recode.net/index.js","../src/extractors/custom/qz.com/index.js","../src/extractors/custom/www.dmagazine.com/index.js","../src/extractors/custom/www.reuters.com/index.js","../src/extractors/custom/mashable.com/index.js","../src/extractors/custom/www.chicagotribune.com/index.js","../src/extractors/custom/www.vox.com/index.js","../src/extractors/custom/news.nationalgeographic.com/index.js","../src/extractors/custom/www.nationalgeographic.com/index.js","../src/extractors/custom/www.latimes.com/index.js","../src/extractors/custom/pagesix.com/index.js","../src/extractors/custom/thefederalistpapers.org/index.js","../src/extractors/custom/www.cbssports.com/index.js","../src/extractors/custom/www.msnbc.com/index.js","../src/extractors/custom/www.thepoliticalinsider.com/index.js","../src/extractors/custom/www.mentalfloss.com/index.js","../src/extractors/custom/abcnews.go.com/index.js","../src/extractors/custom/www.nydailynews.com/index.js","../src/extractors/custom/www.cnbc.com/index.js","../src/extractors/custom/www.popsugar.com/index.js","../src/extractors/custom/observer.com/index.js","../src/extractors/custom/people.com/index.js","../src/extractors/custom/www.usmagazine.com/index.js","../src/extractors/custom/www.rollingstone.com/index.js","../src/extractors/custom/247sports.com/index.js","../src/extractors/custom/uproxx.com/index.js","../src/extractors/custom/www.eonline.com/index.js","../src/extractors/custom/www.miamiherald.com/index.js","../src/extractors/custom/www.refinery29.com/index.js","../src/extractors/custom/www.macrumors.com/index.js","../src/extractors/custom/www.androidcentral.com/index.js","../src/extractors/custom/www.si.com/index.js","../src/extractors/custom/www.rawstory.com/index.js","../src/extractors/custom/www.cnet.com/index.js","../src/extractors/custom/www.today.com/index.js","../src/extractors/custom/www.al.com/index.js","../src/extractors/custom/www.thepennyhoarder.com/index.js","../src/extractors/custom/www.westernjournalism.com/index.js","../src/extractors/custom/www.americanow.com/index.js","../src/extractors/custom/sciencefly.com/index.js","../src/extractors/custom/hellogiggles.com/index.js","../src/extractors/custom/thoughtcatalog.com/index.js","../src/extractors/custom/www.inquisitr.com/index.js","../src/extractors/custom/www.nbcnews.com/index.js","../src/extractors/custom/fortune.com/index.js","../src/extractors/custom/www.linkedin.com/index.js","../src/extractors/custom/obamawhitehouse.archives.gov/index.js","../src/extractors/custom/www.opposingviews.com/index.js","../src/extractors/custom/www.prospectmagazine.co.uk/index.js","../src/extractors/custom/forward.com/index.js","../src/extractors/custom/www.qdaily.com/index.js","../src/extractors/custom/gothamist.com/index.js","../src/extractors/custom/www.fool.com/index.js","../src/extractors/custom/www.slate.com/index.js","../src/extractors/custom/ici.radio-canada.ca/index.js","../src/extractors/custom/www.fortinet.com/index.js","../src/extractors/custom/www.fastcompany.com/index.js","../src/extractors/custom/blisterreview.com/index.js","../src/extractors/custom/news.mynavi.jp/index.js","../src/extractors/custom/clinicaltrials.gov/index.js","../src/extractors/custom/github.com/index.js","../src/extractors/custom/www.reddit.com/index.js","../src/extractors/custom/otrs.com/index.js","../src/extractors/custom/www.ossnews.jp/index.js","../src/extractors/custom/buzzap.jp/index.js","../src/extractors/custom/www.asahi.com/index.js","../src/extractors/custom/www.sanwa.co.jp/index.js","../src/extractors/custom/www.elecom.co.jp/index.js","../src/extractors/custom/scan.netsecurity.ne.jp/index.js","../src/extractors/custom/jvndb.jvn.jp/index.js","../src/extractors/custom/genius.com/index.js","../src/extractors/custom/www.jnsa.org/index.js","../src/extractors/custom/phpspot.org/index.js","../src/extractors/custom/www.infoq.com/index.js","../src/extractors/custom/www.moongift.jp/index.js","../src/extractors/custom/www.itmedia.co.jp/index.js","../src/extractors/custom/www.publickey1.jp/index.js","../src/extractors/custom/takagi-hiromitsu.jp/index.js","../src/extractors/custom/bookwalker.jp/index.js","../src/extractors/custom/www.yomiuri.co.jp/index.js","../src/extractors/custom/japan.cnet.com/index.js","../src/extractors/custom/deadline.com/index.js","../src/extractors/custom/www.gizmodo.jp/index.js","../src/extractors/custom/getnews.jp/index.js","../src/extractors/custom/www.lifehacker.jp/index.js","../src/extractors/custom/sect.iij.ad.jp/index.js","../src/extractors/custom/www.oreilly.co.jp/index.js","../src/extractors/custom/www.ipa.go.jp/index.js","../src/extractors/custom/weekly.ascii.jp/index.js","../src/extractors/custom/techlog.iij.ad.jp/index.js","../src/extractors/custom/wired.jp/index.js","../src/extractors/custom/japan.zdnet.com/index.js","../src/extractors/custom/www.rbbtoday.com/index.js","../src/extractors/custom/www.lemonde.fr/index.js","../src/extractors/custom/www.phoronix.com/index.js","../src/extractors/custom/pitchfork.com/index.js","../src/extractors/custom/biorxiv.org/index.js","../src/extractors/custom/epaper.zeit.de/index.js","../src/extractors/custom/www.ladbible.com/index.js","../src/extractors/custom/timesofindia.indiatimes.com/index.js","../src/extractors/custom/ma.ttias.be/index.js","../src/extractors/custom/pastebin.com/index.js","../src/extractors/custom/www.abendblatt.de/index.js","../src/extractors/custom/www.gruene.de/index.js","../src/extractors/custom/www.engadget.com/index.js","../src/extractors/custom/arstechnica.com/index.js","../src/extractors/custom/www.ndtv.com/index.js","../src/extractors/custom/www.spektrum.de/index.js","../src/extractors/custom/postlight.com/index.js","../src/extractors/custom/www.investmentexecutive.com/index.js","../src/extractors/custom/www.cbc.ca/index.js","../src/extractors/generic/index.js","../src/extractors/generic/content/extractor.js","../src/utils/dom/index.js","../src/utils/dom/strip-unlikely-candidates.js","../src/utils/dom/constants.js","../src/utils/dom/brs-to-ps.js","../src/utils/dom/paragraphize.js","../src/utils/dom/convert-to-paragraphs.js","../src/utils/dom/convert-node-to.js","../src/utils/dom/clean-images.js","../src/utils/dom/mark-to-keep.js","../src/utils/dom/strip-junk-tags.js","../src/utils/dom/clean-h-ones.js","../src/utils/dom/clean-attributes.js","../src/utils/dom/remove-empty.js","../src/utils/dom/clean-tags.js","../src/extractors/generic/content/scoring/index.js","../src/extractors/generic/content/scoring/get-weight.js","../src/extractors/generic/content/scoring/constants.js","../src/extractors/generic/content/scoring/get-score.js","../src/extractors/generic/content/scoring/score-commas.js","../src/extractors/generic/content/scoring/score-length.js","../src/extractors/generic/content/scoring/score-paragraph.js","../src/extractors/generic/content/scoring/set-score.js","../src/extractors/generic/content/scoring/add-score.js","../src/extractors/generic/content/scoring/add-to-parent.js","../src/extractors/generic/content/scoring/get-or-init-score.js","../src/extractors/generic/content/scoring/score-node.js","../src/extractors/generic/content/scoring/score-content.js","../src/extractors/generic/content/scoring/find-top-candidate.js","../src/extractors/generic/content/scoring/merge-siblings.js","../src/utils/text/index.js","../src/utils/text/normalize-spaces.js","../src/utils/text/extract-from-url.js","../src/utils/text/page-num-from-url.js","../src/utils/text/constants.js","../src/utils/text/remove-anchor.js","../src/utils/text/article-base-url.js","../src/utils/text/has-sentence-end.js","../src/utils/text/excerpt-content.js","../src/utils/text/get-encoding.js","../src/utils/dom/clean-headers.js","../src/utils/dom/rewrite-top-level.js","../src/utils/dom/make-links-absolute.js","../src/utils/dom/link-density.js","../src/utils/dom/extract-from-meta.js","../src/utils/dom/extract-from-selectors.js","../src/utils/dom/strip-tags.js","../src/utils/dom/within-comment.js","../src/utils/dom/node-is-sufficient.js","../src/utils/dom/is-wordpress.js","../src/utils/dom/get-attrs.js","../src/utils/dom/set-attr.js","../src/utils/dom/set-attrs.js","../src/cleaners/index.js","../src/cleaners/author.js","../src/cleaners/constants.js","../src/cleaners/lead-image-url.js","../src/cleaners/dek.js","../src/cleaners/date-published.js","../src/cleaners/content.js","../src/cleaners/title.js","../src/cleaners/resolve-split-title.js","../src/extractors/generic/content/extract-best-node.js","../src/extractors/generic/title/extractor.js","../src/extractors/generic/title/constants.js","../src/extractors/generic/author/extractor.js","../src/extractors/generic/author/constants.js","../src/extractors/generic/date-published/extractor.js","../src/extractors/generic/date-published/constants.js","../src/extractors/generic/dek/extractor.js","../src/extractors/generic/lead-image-url/extractor.js","../src/extractors/generic/lead-image-url/constants.js","../src/extractors/generic/lead-image-url/score-image.js","../src/extractors/generic/next-page-url/extractor.js","../src/extractors/generic/next-page-url/scoring/score-links.js","../src/extractors/generic/next-page-url/scoring/utils/index.js","../src/extractors/generic/next-page-url/scoring/utils/score-similarity.js","../src/extractors/generic/next-page-url/scoring/utils/score-link-text.js","../src/extractors/generic/next-page-url/scoring/utils/score-page-in-link.js","../src/extractors/generic/next-page-url/scoring/utils/score-extraneous-links.js","../src/extractors/generic/next-page-url/scoring/constants.js","../src/extractors/generic/next-page-url/scoring/utils/score-by-parents.js","../src/utils/index.js","../src/utils/range.js","../src/utils/validate-url.js","../src/extractors/generic/next-page-url/scoring/utils/score-prev-link.js","../src/extractors/generic/next-page-url/scoring/utils/should-score.js","../src/extractors/generic/next-page-url/scoring/utils/score-base-url.js","../src/extractors/generic/next-page-url/scoring/utils/score-next-link-text.js","../src/extractors/generic/next-page-url/scoring/utils/score-cap-links.js","../src/extractors/generic/url/extractor.js","../src/extractors/generic/url/constants.js","../src/extractors/generic/excerpt/extractor.js","../src/extractors/generic/excerpt/constants.js","../src/extractors/generic/word-count/extractor.js","../src/extractors/detect-by-html.js","../src/extractors/root-extractor.js","../src/extractors/collect-all-pages.js","../src/resource/index.js","../src/resource/utils/index.js","../src/resource/utils/fetch-resource.js","../src/resource/utils/constants.js","../src/resource/utils/dom/index.js","../src/resource/utils/dom/normalize-meta-tags.js","../src/resource/utils/dom/convert-lazy-loaded-images.js","../src/resource/utils/dom/constants.js","../src/resource/utils/dom/clean.js"],"sourcesContent":["// Shim globals in cjs bundle\n// There's a weird bug that esbuild will always inject importMetaUrl\n// if we export it as `const importMetaUrl = ... __filename ...`\n// But using a function will not cause this issue\n\nconst getImportMetaUrl = () =>\n  typeof document === 'undefined'\n    ? new URL(`file:${__filename}`).href\n    : (document.currentScript && document.currentScript.src) ||\n      new URL('main.js', document.baseURI).href\n\nexport const importMetaUrl = /* @__PURE__ */ getImportMetaUrl()\n","// Generated by CoffeeScript 1.8.0\n(function() {\n  var Heap, defaultCmp, floor, heapify, heappop, heappush, heappushpop, heapreplace, insort, min, nlargest, nsmallest, updateItem, _siftdown, _siftup;\n\n  floor = Math.floor, min = Math.min;\n\n\n  /*\n  Default comparison function to be used\n   */\n\n  defaultCmp = function(x, y) {\n    if (x < y) {\n      return -1;\n    }\n    if (x > y) {\n      return 1;\n    }\n    return 0;\n  };\n\n\n  /*\n  Insert item x in list a, and keep it sorted assuming a is sorted.\n  \n  If x is already in a, insert it to the right of the rightmost x.\n  \n  Optional args lo (default 0) and hi (default a.length) bound the slice\n  of a to be searched.\n   */\n\n  insort = function(a, x, lo, hi, cmp) {\n    var mid;\n    if (lo == null) {\n      lo = 0;\n    }\n    if (cmp == null) {\n      cmp = defaultCmp;\n    }\n    if (lo < 0) {\n      throw new Error('lo must be non-negative');\n    }\n    if (hi == null) {\n      hi = a.length;\n    }\n    while (lo < hi) {\n      mid = floor((lo + hi) / 2);\n      if (cmp(x, a[mid]) < 0) {\n        hi = mid;\n      } else {\n        lo = mid + 1;\n      }\n    }\n    return ([].splice.apply(a, [lo, lo - lo].concat(x)), x);\n  };\n\n\n  /*\n  Push item onto heap, maintaining the heap invariant.\n   */\n\n  heappush = function(array, item, cmp) {\n    if (cmp == null) {\n      cmp = defaultCmp;\n    }\n    array.push(item);\n    return _siftdown(array, 0, array.length - 1, cmp);\n  };\n\n\n  /*\n  Pop the smallest item off the heap, maintaining the heap invariant.\n   */\n\n  heappop = function(array, cmp) {\n    var lastelt, returnitem;\n    if (cmp == null) {\n      cmp = defaultCmp;\n    }\n    lastelt = array.pop();\n    if (array.length) {\n      returnitem = array[0];\n      array[0] = lastelt;\n      _siftup(array, 0, cmp);\n    } else {\n      returnitem = lastelt;\n    }\n    return returnitem;\n  };\n\n\n  /*\n  Pop and return the current smallest value, and add the new item.\n  \n  This is more efficient than heappop() followed by heappush(), and can be\n  more appropriate when using a fixed size heap. Note that the value\n  returned may be larger than item! That constrains reasonable use of\n  this routine unless written as part of a conditional replacement:\n      if item > array[0]\n        item = heapreplace(array, item)\n   */\n\n  heapreplace = function(array, item, cmp) {\n    var returnitem;\n    if (cmp == null) {\n      cmp = defaultCmp;\n    }\n    returnitem = array[0];\n    array[0] = item;\n    _siftup(array, 0, cmp);\n    return returnitem;\n  };\n\n\n  /*\n  Fast version of a heappush followed by a heappop.\n   */\n\n  heappushpop = function(array, item, cmp) {\n    var _ref;\n    if (cmp == null) {\n      cmp = defaultCmp;\n    }\n    if (array.length && cmp(array[0], item) < 0) {\n      _ref = [array[0], item], item = _ref[0], array[0] = _ref[1];\n      _siftup(array, 0, cmp);\n    }\n    return item;\n  };\n\n\n  /*\n  Transform list into a heap, in-place, in O(array.length) time.\n   */\n\n  heapify = function(array, cmp) {\n    var i, _i, _j, _len, _ref, _ref1, _results, _results1;\n    if (cmp == null) {\n      cmp = defaultCmp;\n    }\n    _ref1 = (function() {\n      _results1 = [];\n      for (var _j = 0, _ref = floor(array.length / 2); 0 <= _ref ? _j < _ref : _j > _ref; 0 <= _ref ? _j++ : _j--){ _results1.push(_j); }\n      return _results1;\n    }).apply(this).reverse();\n    _results = [];\n    for (_i = 0, _len = _ref1.length; _i < _len; _i++) {\n      i = _ref1[_i];\n      _results.push(_siftup(array, i, cmp));\n    }\n    return _results;\n  };\n\n\n  /*\n  Update the position of the given item in the heap.\n  This function should be called every time the item is being modified.\n   */\n\n  updateItem = function(array, item, cmp) {\n    var pos;\n    if (cmp == null) {\n      cmp = defaultCmp;\n    }\n    pos = array.indexOf(item);\n    if (pos === -1) {\n      return;\n    }\n    _siftdown(array, 0, pos, cmp);\n    return _siftup(array, pos, cmp);\n  };\n\n\n  /*\n  Find the n largest elements in a dataset.\n   */\n\n  nlargest = function(array, n, cmp) {\n    var elem, result, _i, _len, _ref;\n    if (cmp == null) {\n      cmp = defaultCmp;\n    }\n    result = array.slice(0, n);\n    if (!result.length) {\n      return result;\n    }\n    heapify(result, cmp);\n    _ref = array.slice(n);\n    for (_i = 0, _len = _ref.length; _i < _len; _i++) {\n      elem = _ref[_i];\n      heappushpop(result, elem, cmp);\n    }\n    return result.sort(cmp).reverse();\n  };\n\n\n  /*\n  Find the n smallest elements in a dataset.\n   */\n\n  nsmallest = function(array, n, cmp) {\n    var elem, i, los, result, _i, _j, _len, _ref, _ref1, _results;\n    if (cmp == null) {\n      cmp = defaultCmp;\n    }\n    if (n * 10 <= array.length) {\n      result = array.slice(0, n).sort(cmp);\n      if (!result.length) {\n        return result;\n      }\n      los = result[result.length - 1];\n      _ref = array.slice(n);\n      for (_i = 0, _len = _ref.length; _i < _len; _i++) {\n        elem = _ref[_i];\n        if (cmp(elem, los) < 0) {\n          insort(result, elem, 0, null, cmp);\n          result.pop();\n          los = result[result.length - 1];\n        }\n      }\n      return result;\n    }\n    heapify(array, cmp);\n    _results = [];\n    for (i = _j = 0, _ref1 = min(n, array.length); 0 <= _ref1 ? _j < _ref1 : _j > _ref1; i = 0 <= _ref1 ? ++_j : --_j) {\n      _results.push(heappop(array, cmp));\n    }\n    return _results;\n  };\n\n  _siftdown = function(array, startpos, pos, cmp) {\n    var newitem, parent, parentpos;\n    if (cmp == null) {\n      cmp = defaultCmp;\n    }\n    newitem = array[pos];\n    while (pos > startpos) {\n      parentpos = (pos - 1) >> 1;\n      parent = array[parentpos];\n      if (cmp(newitem, parent) < 0) {\n        array[pos] = parent;\n        pos = parentpos;\n        continue;\n      }\n      break;\n    }\n    return array[pos] = newitem;\n  };\n\n  _siftup = function(array, pos, cmp) {\n    var childpos, endpos, newitem, rightpos, startpos;\n    if (cmp == null) {\n      cmp = defaultCmp;\n    }\n    endpos = array.length;\n    startpos = pos;\n    newitem = array[pos];\n    childpos = 2 * pos + 1;\n    while (childpos < endpos) {\n      rightpos = childpos + 1;\n      if (rightpos < endpos && !(cmp(array[childpos], array[rightpos]) < 0)) {\n        childpos = rightpos;\n      }\n      array[pos] = array[childpos];\n      pos = childpos;\n      childpos = 2 * pos + 1;\n    }\n    array[pos] = newitem;\n    return _siftdown(array, startpos, pos, cmp);\n  };\n\n  Heap = (function() {\n    Heap.push = heappush;\n\n    Heap.pop = heappop;\n\n    Heap.replace = heapreplace;\n\n    Heap.pushpop = heappushpop;\n\n    Heap.heapify = heapify;\n\n    Heap.updateItem = updateItem;\n\n    Heap.nlargest = nlargest;\n\n    Heap.nsmallest = nsmallest;\n\n    function Heap(cmp) {\n      this.cmp = cmp != null ? cmp : defaultCmp;\n      this.nodes = [];\n    }\n\n    Heap.prototype.push = function(x) {\n      return heappush(this.nodes, x, this.cmp);\n    };\n\n    Heap.prototype.pop = function() {\n      return heappop(this.nodes, this.cmp);\n    };\n\n    Heap.prototype.peek = function() {\n      return this.nodes[0];\n    };\n\n    Heap.prototype.contains = function(x) {\n      return this.nodes.indexOf(x) !== -1;\n    };\n\n    Heap.prototype.replace = function(x) {\n      return heapreplace(this.nodes, x, this.cmp);\n    };\n\n    Heap.prototype.pushpop = function(x) {\n      return heappushpop(this.nodes, x, this.cmp);\n    };\n\n    Heap.prototype.heapify = function() {\n      return heapify(this.nodes, this.cmp);\n    };\n\n    Heap.prototype.updateItem = function(x) {\n      return updateItem(this.nodes, x, this.cmp);\n    };\n\n    Heap.prototype.clear = function() {\n      return this.nodes = [];\n    };\n\n    Heap.prototype.empty = function() {\n      return this.nodes.length === 0;\n    };\n\n    Heap.prototype.size = function() {\n      return this.nodes.length;\n    };\n\n    Heap.prototype.clone = function() {\n      var heap;\n      heap = new Heap();\n      heap.nodes = this.nodes.slice(0);\n      return heap;\n    };\n\n    Heap.prototype.toArray = function() {\n      return this.nodes.slice(0);\n    };\n\n    Heap.prototype.insert = Heap.prototype.push;\n\n    Heap.prototype.top = Heap.prototype.peek;\n\n    Heap.prototype.front = Heap.prototype.peek;\n\n    Heap.prototype.has = Heap.prototype.contains;\n\n    Heap.prototype.copy = Heap.prototype.clone;\n\n    return Heap;\n\n  })();\n\n  (function(root, factory) {\n    if (typeof define === 'function' && define.amd) {\n      return define([], factory);\n    } else if (typeof exports === 'object') {\n      return module.exports = factory();\n    } else {\n      return root.Heap = factory();\n    }\n  })(this, function() {\n    return Heap;\n  });\n\n}).call(this);\n","module.exports = require('./lib/heap');\n","// Generated by CoffeeScript 1.3.1\n\n/*\nModule difflib -- helpers for computing deltas between objects.\n\nFunction getCloseMatches(word, possibilities, n=3, cutoff=0.6):\n    Use SequenceMatcher to return list of the best \"good enough\" matches.\n\nFunction contextDiff(a, b):\n    For two lists of strings, return a delta in context diff format.\n\nFunction ndiff(a, b):\n    Return a delta: the difference between `a` and `b` (lists of strings).\n\nFunction restore(delta, which):\n    Return one of the two sequences that generated an ndiff delta.\n\nFunction unifiedDiff(a, b):\n    For two lists of strings, return a delta in unified diff format.\n\nClass SequenceMatcher:\n    A flexible class for comparing pairs of sequences of any type.\n\nClass Differ:\n    For producing human-readable deltas from sequences of lines of text.\n*/\n\n\n(function() {\n  var Differ, Heap, IS_CHARACTER_JUNK, IS_LINE_JUNK, SequenceMatcher, contextDiff, floor, getCloseMatches, max, min, ndiff, restore, unifiedDiff, _any, _arrayCmp, _calculateRatio, _countLeading, _formatRangeContext, _formatRangeUnified, _has,\n    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i } return -1 }\n\n  floor = Math.floor, max = Math.max, min = Math.min\n\n  Heap = require('heap')\n\n  _calculateRatio = function(matches, length) {\n    if (length) {\n      return 2.0 * matches / length\n    } else {\n      return 1.0\n    }\n  }\n\n  _arrayCmp = function(a, b) {\n    var i, la, lb, _i, _ref, _ref1\n    _ref = [a.length, b.length], la = _ref[0], lb = _ref[1]\n    for (i = _i = 0, _ref1 = min(la, lb); 0 <= _ref1 ? _i < _ref1 : _i > _ref1; i = 0 <= _ref1 ? ++_i : --_i) {\n      if (a[i] < b[i]) {\n        return -1\n      }\n      if (a[i] > b[i]) {\n        return 1\n      }\n    }\n    return la - lb\n  }\n\n  _has = function(obj, key) {\n    return Object.prototype.hasOwnProperty.call(obj, key)\n  }\n\n  _any = function(items) {\n    var item, _i, _len\n    for (_i = 0, _len = items.length; _i < _len; _i++) {\n      item = items[_i]\n      if (item) {\n        return true\n      }\n    }\n    return false\n  }\n\n  SequenceMatcher = (function() {\n\n    /*\n      SequenceMatcher is a flexible class for comparing pairs of sequences of\n      any type, so long as the sequence elements are hashable.  The basic\n      algorithm predates, and is a little fancier than, an algorithm\n      published in the late 1980's by Ratcliff and Obershelp under the\n      hyperbolic name \"gestalt pattern matching\".  The basic idea is to find\n      the longest contiguous matching subsequence that contains no \"junk\"\n      elements (R-O doesn't address junk).  The same idea is then applied\n      recursively to the pieces of the sequences to the left and to the right\n      of the matching subsequence.  This does not yield minimal edit\n      sequences, but does tend to yield matches that \"look right\" to people.\n    \n      SequenceMatcher tries to compute a \"human-friendly diff\" between two\n      sequences.  Unlike e.g. UNIX(tm) diff, the fundamental notion is the\n      longest *contiguous* & junk-free matching subsequence.  That's what\n      catches peoples' eyes.  The Windows(tm) windiff has another interesting\n      notion, pairing up elements that appear uniquely in each sequence.\n      That, and the method here, appear to yield more intuitive difference\n      reports than does diff.  This method appears to be the least vulnerable\n      to synching up on blocks of \"junk lines\", though (like blank lines in\n      ordinary text files, or maybe \"<P>\" lines in HTML files).  That may be\n      because this is the only method of the 3 that has a *concept* of\n      \"junk\" <wink>.\n    \n      Example, comparing two strings, and considering blanks to be \"junk\":\n    \n      >>> isjunk = (c) -> c is ' '\n      >>> s = new SequenceMatcher(isjunk,\n                                  'private Thread currentThread;',\n                                  'private volatile Thread currentThread;')\n    \n      .ratio() returns a float in [0, 1], measuring the \"similarity\" of the\n      sequences.  As a rule of thumb, a .ratio() value over 0.6 means the\n      sequences are close matches:\n    \n      >>> s.ratio().toPrecision(3)\n      '0.866'\n    \n      If you're only interested in where the sequences match,\n      .getMatchingBlocks() is handy:\n    \n      >>> for [a, b, size] in s.getMatchingBlocks()\n      ...   console.log(\"a[#{a}] and b[#{b}] match for #{size} elements\");\n      a[0] and b[0] match for 8 elements\n      a[8] and b[17] match for 21 elements\n      a[29] and b[38] match for 0 elements\n    \n      Note that the last tuple returned by .get_matching_blocks() is always a\n      dummy, (len(a), len(b), 0), and this is the only case in which the last\n      tuple element (number of elements matched) is 0.\n    \n      If you want to know how to change the first sequence into the second,\n      use .get_opcodes():\n    \n      >>> for [op, a1, a2, b1, b2] in s.getOpcodes()\n      ...   console.log \"#{op} a[#{a1}:#{a2}] b[#{b1}:#{b2}]\"\n      equal a[0:8] b[0:8]\n      insert a[8:8] b[8:17]\n      equal a[8:29] b[17:38]\n    \n      See the Differ class for a fancy human-friendly file differencer, which\n      uses SequenceMatcher both to compare sequences of lines, and to compare\n      sequences of characters within similar (near-matching) lines.\n    \n      See also function getCloseMatches() in this module, which shows how\n      simple code building on SequenceMatcher can be used to do useful work.\n    \n      Timing:  Basic R-O is cubic time worst case and quadratic time expected\n      case.  SequenceMatcher is quadratic time for the worst case and has\n      expected-case behavior dependent in a complicated way on how many\n      elements the sequences have in common; best case time is linear.\n    \n      Methods:\n    \n      constructor(isjunk=null, a='', b='')\n          Construct a SequenceMatcher.\n    \n      setSeqs(a, b)\n          Set the two sequences to be compared.\n    \n      setSeq1(a)\n          Set the first sequence to be compared.\n    \n      setSeq2(b)\n          Set the second sequence to be compared.\n    \n      findLongestMatch(alo, ahi, blo, bhi)\n          Find longest matching block in a[alo:ahi] and b[blo:bhi].\n    \n      getMatchingBlocks()\n          Return list of triples describing matching subsequences.\n    \n      getOpcodes()\n          Return list of 5-tuples describing how to turn a into b.\n    \n      ratio()\n          Return a measure of the sequences' similarity (float in [0,1]).\n    \n      quickRatio()\n          Return an upper bound on .ratio() relatively quickly.\n    \n      realQuickRatio()\n          Return an upper bound on ratio() very quickly.\n    */\n\n\n    function SequenceMatcher(isjunk, a, b, autojunk) {\n      this.isjunk = isjunk\n      if (a == null) {\n        a = ''\n      }\n      if (b == null) {\n        b = ''\n      }\n      this.autojunk = autojunk != null ? autojunk : true\n      /*\n          Construct a SequenceMatcher.\n      \n          Optional arg isjunk is null (the default), or a one-argument\n          function that takes a sequence element and returns true iff the\n          element is junk.  Null is equivalent to passing \"(x) -> 0\", i.e.\n          no elements are considered to be junk.  For example, pass\n              (x) -> x in ' \\t'\n          if you're comparing lines as sequences of characters, and don't\n          want to synch up on blanks or hard tabs.\n      \n          Optional arg a is the first of two sequences to be compared.  By\n          default, an empty string.  The elements of a must be hashable.  See\n          also .setSeqs() and .setSeq1().\n      \n          Optional arg b is the second of two sequences to be compared.  By\n          default, an empty string.  The elements of b must be hashable. See\n          also .setSeqs() and .setSeq2().\n      \n          Optional arg autojunk should be set to false to disable the\n          \"automatic junk heuristic\" that treats popular elements as junk\n          (see module documentation for more information).\n      */\n\n      this.a = this.b = null\n      this.setSeqs(a, b)\n    }\n\n    SequenceMatcher.prototype.setSeqs = function(a, b) {\n      /* \n      Set the two sequences to be compared. \n      \n      >>> s = new SequenceMatcher()\n      >>> s.setSeqs('abcd', 'bcde')\n      >>> s.ratio()\n      0.75\n      */\n      this.setSeq1(a)\n      return this.setSeq2(b)\n    }\n\n    SequenceMatcher.prototype.setSeq1 = function(a) {\n      /* \n      Set the first sequence to be compared. \n      \n      The second sequence to be compared is not changed.\n      \n      >>> s = new SequenceMatcher(null, 'abcd', 'bcde')\n      >>> s.ratio()\n      0.75\n      >>> s.setSeq1('bcde')\n      >>> s.ratio()\n      1.0\n      \n      SequenceMatcher computes and caches detailed information about the\n      second sequence, so if you want to compare one sequence S against\n      many sequences, use .setSeq2(S) once and call .setSeq1(x)\n      repeatedly for each of the other sequences.\n      \n      See also setSeqs() and setSeq2().\n      */\n      if (a === this.a) {\n        return\n      }\n      this.a = a\n      return this.matchingBlocks = this.opcodes = null\n    }\n\n    SequenceMatcher.prototype.setSeq2 = function(b) {\n      /*\n          Set the second sequence to be compared. \n      \n          The first sequence to be compared is not changed.\n      \n          >>> s = new SequenceMatcher(null, 'abcd', 'bcde')\n          >>> s.ratio()\n          0.75\n          >>> s.setSeq2('abcd')\n          >>> s.ratio()\n          1.0\n      \n          SequenceMatcher computes and caches detailed information about the\n          second sequence, so if you want to compare one sequence S against\n          many sequences, use .setSeq2(S) once and call .setSeq1(x)\n          repeatedly for each of the other sequences.\n      \n          See also setSeqs() and setSeq1().\n      */\n      if (b === this.b) {\n        return\n      }\n      this.b = b\n      this.matchingBlocks = this.opcodes = null\n      this.fullbcount = null\n      return this._chainB()\n    }\n\n    SequenceMatcher.prototype._chainB = function() {\n      var b, b2j, elt, i, idxs, indices, isjunk, junk, n, ntest, popular, _i, _j, _len, _len1, _ref\n      b = this.b\n      this.b2j = b2j = {}\n      for (i = _i = 0, _len = b.length; _i < _len; i = ++_i) {\n        elt = b[i]\n        indices = _has(b2j, elt) ? b2j[elt] : b2j[elt] = []\n        indices.push(i)\n      }\n      junk = {}\n      isjunk = this.isjunk\n      if (isjunk) {\n        _ref = Object.keys(b2j)\n        for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {\n          elt = _ref[_j]\n          if (isjunk(elt)) {\n            junk[elt] = true\n            delete b2j[elt]\n          }\n        }\n      }\n      popular = {}\n      n = b.length\n      if (this.autojunk && n >= 200) {\n        ntest = floor(n / 100) + 1\n        for (elt in b2j) {\n          idxs = b2j[elt]\n          if (idxs.length > ntest) {\n            popular[elt] = true\n            delete b2j[elt]\n          }\n        }\n      }\n      this.isbjunk = function(b) {\n        return _has(junk, b)\n      }\n      return this.isbpopular = function(b) {\n        return _has(popular, b)\n      }\n    }\n\n    SequenceMatcher.prototype.findLongestMatch = function(alo, ahi, blo, bhi) {\n      /* \n      Find longest matching block in a[alo...ahi] and b[blo...bhi].  \n      \n      If isjunk is not defined:\n      \n      Return [i,j,k] such that a[i...i+k] is equal to b[j...j+k], where\n          alo <= i <= i+k <= ahi\n          blo <= j <= j+k <= bhi\n      and for all [i',j',k'] meeting those conditions,\n          k >= k'\n          i <= i'\n          and if i == i', j <= j'\n      \n      In other words, of all maximal matching blocks, return one that\n      starts earliest in a, and of all those maximal matching blocks that\n      start earliest in a, return the one that starts earliest in b.\n      \n      >>> isjunk = (x) -> x is ' '\n      >>> s = new SequenceMatcher(isjunk, ' abcd', 'abcd abcd')\n      >>> s.findLongestMatch(0, 5, 0, 9)\n      [1, 0, 4]\n      \n      >>> s = new SequenceMatcher(null, 'ab', 'c')\n      >>> s.findLongestMatch(0, 2, 0, 1)\n      [0, 0, 0]\n      */\n\n      var a, b, b2j, besti, bestj, bestsize, i, isbjunk, j, j2len, k, newj2len, _i, _j, _len, _ref, _ref1, _ref2, _ref3, _ref4, _ref5\n      _ref = [this.a, this.b, this.b2j, this.isbjunk], a = _ref[0], b = _ref[1], b2j = _ref[2], isbjunk = _ref[3]\n      _ref1 = [alo, blo, 0], besti = _ref1[0], bestj = _ref1[1], bestsize = _ref1[2]\n      j2len = {}\n      for (i = _i = alo; alo <= ahi ? _i < ahi : _i > ahi; i = alo <= ahi ? ++_i : --_i) {\n        newj2len = {}\n        _ref2 = (_has(b2j, a[i]) ? b2j[a[i]] : [])\n        for (_j = 0, _len = _ref2.length; _j < _len; _j++) {\n          j = _ref2[_j]\n          if (j < blo) {\n            continue\n          }\n          if (j >= bhi) {\n            break\n          }\n          k = newj2len[j] = (j2len[j - 1] || 0) + 1\n          if (k > bestsize) {\n            _ref3 = [i - k + 1, j - k + 1, k], besti = _ref3[0], bestj = _ref3[1], bestsize = _ref3[2]\n          }\n        }\n        j2len = newj2len\n      }\n      while (besti > alo && bestj > blo && !isbjunk(b[bestj - 1]) && a[besti - 1] === b[bestj - 1]) {\n        _ref4 = [besti - 1, bestj - 1, bestsize + 1], besti = _ref4[0], bestj = _ref4[1], bestsize = _ref4[2]\n      }\n      while (besti + bestsize < ahi && bestj + bestsize < bhi && !isbjunk(b[bestj + bestsize]) && a[besti + bestsize] === b[bestj + bestsize]) {\n        bestsize++\n      }\n      while (besti > alo && bestj > blo && isbjunk(b[bestj - 1]) && a[besti - 1] === b[bestj - 1]) {\n        _ref5 = [besti - 1, bestj - 1, bestsize + 1], besti = _ref5[0], bestj = _ref5[1], bestsize = _ref5[2]\n      }\n      while (besti + bestsize < ahi && bestj + bestsize < bhi && isbjunk(b[bestj + bestsize]) && a[besti + bestsize] === b[bestj + bestsize]) {\n        bestsize++\n      }\n      return [besti, bestj, bestsize]\n    }\n\n    SequenceMatcher.prototype.getMatchingBlocks = function() {\n      /*\n          Return list of triples describing matching subsequences.\n      \n          Each triple is of the form [i, j, n], and means that\n          a[i...i+n] == b[j...j+n].  The triples are monotonically increasing in\n          i and in j.  it's also guaranteed that if\n          [i, j, n] and [i', j', n'] are adjacent triples in the list, and\n          the second is not the last triple in the list, then i+n != i' or\n          j+n != j'.  IOW, adjacent triples never describe adjacent equal\n          blocks.\n      \n          The last triple is a dummy, [a.length, b.length, 0], and is the only\n          triple with n==0.\n      \n          >>> s = new SequenceMatcher(null, 'abxcd', 'abcd')\n          >>> s.getMatchingBlocks()\n          [[0, 0, 2], [3, 2, 2], [5, 4, 0]]\n      */\n\n      var ahi, alo, bhi, blo, i, i1, i2, j, j1, j2, k, k1, k2, la, lb, matchingBlocks, nonAdjacent, queue, x, _i, _len, _ref, _ref1, _ref2, _ref3, _ref4\n      if (this.matchingBlocks) {\n        return this.matchingBlocks\n      }\n      _ref = [this.a.length, this.b.length], la = _ref[0], lb = _ref[1]\n      queue = [[0, la, 0, lb]]\n      matchingBlocks = []\n      while (queue.length) {\n        _ref1 = queue.pop(), alo = _ref1[0], ahi = _ref1[1], blo = _ref1[2], bhi = _ref1[3]\n        _ref2 = x = this.findLongestMatch(alo, ahi, blo, bhi), i = _ref2[0], j = _ref2[1], k = _ref2[2]\n        if (k) {\n          matchingBlocks.push(x)\n          if (alo < i && blo < j) {\n            queue.push([alo, i, blo, j])\n          }\n          if (i + k < ahi && j + k < bhi) {\n            queue.push([i + k, ahi, j + k, bhi])\n          }\n        }\n      }\n      matchingBlocks.sort(_arrayCmp)\n      i1 = j1 = k1 = 0\n      nonAdjacent = []\n      for (_i = 0, _len = matchingBlocks.length; _i < _len; _i++) {\n        _ref3 = matchingBlocks[_i], i2 = _ref3[0], j2 = _ref3[1], k2 = _ref3[2]\n        if (i1 + k1 === i2 && j1 + k1 === j2) {\n          k1 += k2\n        } else {\n          if (k1) {\n            nonAdjacent.push([i1, j1, k1])\n          }\n          _ref4 = [i2, j2, k2], i1 = _ref4[0], j1 = _ref4[1], k1 = _ref4[2]\n        }\n      }\n      if (k1) {\n        nonAdjacent.push([i1, j1, k1])\n      }\n      nonAdjacent.push([la, lb, 0])\n      return this.matchingBlocks = nonAdjacent\n    }\n\n    SequenceMatcher.prototype.getOpcodes = function() {\n      /* \n      Return list of 5-tuples describing how to turn a into b.\n      \n      Each tuple is of the form [tag, i1, i2, j1, j2].  The first tuple\n      has i1 == j1 == 0, and remaining tuples have i1 == the i2 from the\n      tuple preceding it, and likewise for j1 == the previous j2.\n      \n      The tags are strings, with these meanings:\n      \n      'replace':  a[i1...i2] should be replaced by b[j1...j2]\n      'delete':   a[i1...i2] should be deleted.\n                  Note that j1==j2 in this case.\n      'insert':   b[j1...j2] should be inserted at a[i1...i1].\n                  Note that i1==i2 in this case.\n      'equal':    a[i1...i2] == b[j1...j2]\n      \n      >>> s = new SequenceMatcher(null, 'qabxcd', 'abycdf')\n      >>> s.getOpcodes()\n      [ [ 'delete'  , 0 , 1 , 0 , 0 ] ,\n        [ 'equal'   , 1 , 3 , 0 , 2 ] ,\n        [ 'replace' , 3 , 4 , 2 , 3 ] ,\n        [ 'equal'   , 4 , 6 , 3 , 5 ] ,\n        [ 'insert'  , 6 , 6 , 5 , 6 ] ]\n      */\n\n      var ai, answer, bj, i, j, size, tag, _i, _len, _ref, _ref1, _ref2\n      if (this.opcodes) {\n        return this.opcodes\n      }\n      i = j = 0\n      this.opcodes = answer = []\n      _ref = this.getMatchingBlocks()\n      for (_i = 0, _len = _ref.length; _i < _len; _i++) {\n        _ref1 = _ref[_i], ai = _ref1[0], bj = _ref1[1], size = _ref1[2]\n        tag = ''\n        if (i < ai && j < bj) {\n          tag = 'replace'\n        } else if (i < ai) {\n          tag = 'delete'\n        } else if (j < bj) {\n          tag = 'insert'\n        }\n        if (tag) {\n          answer.push([tag, i, ai, j, bj])\n        }\n        _ref2 = [ai + size, bj + size], i = _ref2[0], j = _ref2[1]\n        if (size) {\n          answer.push(['equal', ai, i, bj, j])\n        }\n      }\n      return answer\n    }\n\n    SequenceMatcher.prototype.getGroupedOpcodes = function(n) {\n      var codes, group, groups, i1, i2, j1, j2, nn, tag, _i, _len, _ref, _ref1, _ref2, _ref3\n      if (n == null) {\n        n = 3\n      }\n      /* \n      Isolate change clusters by eliminating ranges with no changes.\n      \n      Return a list groups with upto n lines of context.\n      Each group is in the same format as returned by get_opcodes().\n      \n      >>> a = [1...40].map(String)\n      >>> b = a.slice()\n      >>> b[8...8] = 'i'\n      >>> b[20] += 'x'\n      >>> b[23...28] = []\n      >>> b[30] += 'y'\n      >>> s = new SequenceMatcher(null, a, b)\n      >>> s.getGroupedOpcodes()\n      [ [ [ 'equal'  , 5 , 8  , 5 , 8 ],\n          [ 'insert' , 8 , 8  , 8 , 9 ],\n          [ 'equal'  , 8 , 11 , 9 , 12 ] ],\n        [ [ 'equal'   , 16 , 19 , 17 , 20 ],\n          [ 'replace' , 19 , 20 , 20 , 21 ],\n          [ 'equal'   , 20 , 22 , 21 , 23 ],\n          [ 'delete'  , 22 , 27 , 23 , 23 ],\n          [ 'equal'   , 27 , 30 , 23 , 26 ] ],\n        [ [ 'equal'   , 31 , 34 , 27 , 30 ],\n          [ 'replace' , 34 , 35 , 30 , 31 ],\n          [ 'equal'   , 35 , 38 , 31 , 34 ] ] ]\n      */\n\n      codes = this.getOpcodes()\n      if (!codes.length) {\n        codes = [['equal', 0, 1, 0, 1]]\n      }\n      if (codes[0][0] === 'equal') {\n        _ref = codes[0], tag = _ref[0], i1 = _ref[1], i2 = _ref[2], j1 = _ref[3], j2 = _ref[4]\n        codes[0] = [tag, max(i1, i2 - n), i2, max(j1, j2 - n), j2]\n      }\n      if (codes[codes.length - 1][0] === 'equal') {\n        _ref1 = codes[codes.length - 1], tag = _ref1[0], i1 = _ref1[1], i2 = _ref1[2], j1 = _ref1[3], j2 = _ref1[4]\n        codes[codes.length - 1] = [tag, i1, min(i2, i1 + n), j1, min(j2, j1 + n)]\n      }\n      nn = n + n\n      groups = []\n      group = []\n      for (_i = 0, _len = codes.length; _i < _len; _i++) {\n        _ref2 = codes[_i], tag = _ref2[0], i1 = _ref2[1], i2 = _ref2[2], j1 = _ref2[3], j2 = _ref2[4]\n        if (tag === 'equal' && i2 - i1 > nn) {\n          group.push([tag, i1, min(i2, i1 + n), j1, min(j2, j1 + n)])\n          groups.push(group)\n          group = []\n          _ref3 = [max(i1, i2 - n), max(j1, j2 - n)], i1 = _ref3[0], j1 = _ref3[1]\n        }\n        group.push([tag, i1, i2, j1, j2])\n      }\n      if (group.length && !(group.length === 1 && group[0][0] === 'equal')) {\n        groups.push(group)\n      }\n      return groups\n    }\n\n    SequenceMatcher.prototype.ratio = function() {\n      /*\n          Return a measure of the sequences' similarity (float in [0,1]).\n      \n          Where T is the total number of elements in both sequences, and\n          M is the number of matches, this is 2.0*M / T.\n          Note that this is 1 if the sequences are identical, and 0 if\n          they have nothing in common.\n      \n          .ratio() is expensive to compute if you haven't already computed\n          .getMatchingBlocks() or .getOpcodes(), in which case you may\n          want to try .quickRatio() or .realQuickRatio() first to get an\n          upper bound.\n          \n          >>> s = new SequenceMatcher(null, 'abcd', 'bcde')\n          >>> s.ratio()\n          0.75\n          >>> s.quickRatio()\n          0.75\n          >>> s.realQuickRatio()\n          1.0\n      */\n\n      var match, matches, _i, _len, _ref\n      matches = 0\n      _ref = this.getMatchingBlocks()\n      for (_i = 0, _len = _ref.length; _i < _len; _i++) {\n        match = _ref[_i]\n        matches += match[2]\n      }\n      return _calculateRatio(matches, this.a.length + this.b.length)\n    }\n\n    SequenceMatcher.prototype.quickRatio = function() {\n      /*\n          Return an upper bound on ratio() relatively quickly.\n      \n          This isn't defined beyond that it is an upper bound on .ratio(), and\n          is faster to compute.\n      */\n\n      var avail, elt, fullbcount, matches, numb, _i, _j, _len, _len1, _ref, _ref1\n      if (!this.fullbcount) {\n        this.fullbcount = fullbcount = {}\n        _ref = this.b\n        for (_i = 0, _len = _ref.length; _i < _len; _i++) {\n          elt = _ref[_i]\n          fullbcount[elt] = (fullbcount[elt] || 0) + 1\n        }\n      }\n      fullbcount = this.fullbcount\n      avail = {}\n      matches = 0\n      _ref1 = this.a\n      for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {\n        elt = _ref1[_j]\n        if (_has(avail, elt)) {\n          numb = avail[elt]\n        } else {\n          numb = fullbcount[elt] || 0\n        }\n        avail[elt] = numb - 1\n        if (numb > 0) {\n          matches++\n        }\n      }\n      return _calculateRatio(matches, this.a.length + this.b.length)\n    }\n\n    SequenceMatcher.prototype.realQuickRatio = function() {\n      /*\n          Return an upper bound on ratio() very quickly.\n      \n          This isn't defined beyond that it is an upper bound on .ratio(), and\n          is faster to compute than either .ratio() or .quickRatio().\n      */\n\n      var la, lb, _ref\n      _ref = [this.a.length, this.b.length], la = _ref[0], lb = _ref[1]\n      return _calculateRatio(min(la, lb), la + lb)\n    }\n\n    return SequenceMatcher\n\n  })()\n\n  getCloseMatches = function(word, possibilities, n, cutoff) {\n    var result, s, score, x, _i, _j, _len, _len1, _ref, _results\n    if (n == null) {\n      n = 3\n    }\n    if (cutoff == null) {\n      cutoff = 0.6\n    }\n    /*\n      Use SequenceMatcher to return list of the best \"good enough\" matches.\n    \n      word is a sequence for which close matches are desired (typically a\n      string).\n    \n      possibilities is a list of sequences against which to match word\n      (typically a list of strings).\n    \n      Optional arg n (default 3) is the maximum number of close matches to\n      return.  n must be > 0.\n    \n      Optional arg cutoff (default 0.6) is a float in [0, 1].  Possibilities\n      that don't score at least that similar to word are ignored.\n    \n      The best (no more than n) matches among the possibilities are returned\n      in a list, sorted by similarity score, most similar first.\n    \n      >>> getCloseMatches('appel', ['ape', 'apple', 'peach', 'puppy'])\n      ['apple', 'ape']\n      >>> KEYWORDS = require('coffee-script').RESERVED\n      >>> getCloseMatches('wheel', KEYWORDS)\n      ['when', 'while']\n      >>> getCloseMatches('accost', KEYWORDS)\n      ['const']\n    */\n\n    if (!(n > 0)) {\n      throw new Error(\"n must be > 0: (\" + n + \")\")\n    }\n    if (!((0.0 <= cutoff && cutoff <= 1.0))) {\n      throw new Error(\"cutoff must be in [0.0, 1.0]: (\" + cutoff + \")\")\n    }\n    result = []\n    s = new SequenceMatcher()\n    s.setSeq2(word)\n    for (_i = 0, _len = possibilities.length; _i < _len; _i++) {\n      x = possibilities[_i]\n      s.setSeq1(x)\n      if (s.realQuickRatio() >= cutoff && s.quickRatio() >= cutoff && s.ratio() >= cutoff) {\n        result.push([s.ratio(), x])\n      }\n    }\n    result = Heap.nlargest(result, n, _arrayCmp)\n    _results = []\n    for (_j = 0, _len1 = result.length; _j < _len1; _j++) {\n      _ref = result[_j], score = _ref[0], x = _ref[1]\n      _results.push(x)\n    }\n    return _results\n  }\n\n  _countLeading = function(line, ch) {\n    /*\n      Return number of `ch` characters at the start of `line`.\n    \n      >>> _countLeading('   abc', ' ')\n      3\n    */\n\n    var i, n, _ref\n    _ref = [0, line.length], i = _ref[0], n = _ref[1]\n    while (i < n && line[i] === ch) {\n      i++\n    }\n    return i\n  }\n\n  Differ = (function() {\n\n    /*\n      Differ is a class for comparing sequences of lines of text, and\n      producing human-readable differences or deltas.  Differ uses\n      SequenceMatcher both to compare sequences of lines, and to compare\n      sequences of characters within similar (near-matching) lines.\n    \n      Each line of a Differ delta begins with a two-letter code:\n    \n          '- '    line unique to sequence 1\n          '+ '    line unique to sequence 2\n          '  '    line common to both sequences\n          '? '    line not present in either input sequence\n    \n      Lines beginning with '? ' attempt to guide the eye to intraline\n      differences, and were not present in either input sequence.  These lines\n      can be confusing if the sequences contain tab characters.\n    \n      Note that Differ makes no claim to produce a *minimal* diff.  To the\n      contrary, minimal diffs are often counter-intuitive, because they synch\n      up anywhere possible, sometimes accidental matches 100 pages apart.\n      Restricting synch points to contiguous matches preserves some notion of\n      locality, at the occasional cost of producing a longer diff.\n    \n      Example: Comparing two texts.\n    \n      >>> text1 = ['1. Beautiful is better than ugly.\\n',\n      ...   '2. Explicit is better than implicit.\\n',\n      ...   '3. Simple is better than complex.\\n',\n      ...   '4. Complex is better than complicated.\\n']\n      >>> text1.length\n      4\n      >>> text2 = ['1. Beautiful is better than ugly.\\n',\n      ...   '3.   Simple is better than complex.\\n',\n      ...   '4. Complicated is better than complex.\\n',\n      ...   '5. Flat is better than nested.\\n']\n    \n      Next we instantiate a Differ object:\n    \n      >>> d = new Differ()\n    \n      Note that when instantiating a Differ object we may pass functions to\n      filter out line and character 'junk'.\n    \n      Finally, we compare the two:\n    \n      >>> result = d.compare(text1, text2)\n      [ '  1. Beautiful is better than ugly.\\n',\n        '- 2. Explicit is better than implicit.\\n',\n        '- 3. Simple is better than complex.\\n',\n        '+ 3.   Simple is better than complex.\\n',\n        '?   ++\\n',\n        '- 4. Complex is better than complicated.\\n',\n        '?          ^                     ---- ^\\n',\n        '+ 4. Complicated is better than complex.\\n',\n        '?         ++++ ^                      ^\\n',\n        '+ 5. Flat is better than nested.\\n' ]\n    \n      Methods:\n    \n      constructor(linejunk=null, charjunk=null)\n          Construct a text differencer, with optional filters.\n      compare(a, b)\n          Compare two sequences of lines; generate the resulting delta.\n    */\n\n\n    function Differ(linejunk, charjunk) {\n      this.linejunk = linejunk\n      this.charjunk = charjunk\n      /*\n          Construct a text differencer, with optional filters.\n      \n          The two optional keyword parameters are for filter functions:\n      \n          - `linejunk`: A function that should accept a single string argument,\n            and return true iff the string is junk. The module-level function\n            `IS_LINE_JUNK` may be used to filter out lines without visible\n            characters, except for at most one splat ('#').  It is recommended\n            to leave linejunk null. \n      \n          - `charjunk`: A function that should accept a string of length 1. The\n            module-level function `IS_CHARACTER_JUNK` may be used to filter out\n            whitespace characters (a blank or tab; **note**: bad idea to include\n            newline in this!).  Use of IS_CHARACTER_JUNK is recommended.\n      */\n\n    }\n\n    Differ.prototype.compare = function(a, b) {\n      /*\n          Compare two sequences of lines; generate the resulting delta.\n      \n          Each sequence must contain individual single-line strings ending with\n          newlines. Such sequences can be obtained from the `readlines()` method\n          of file-like objects.  The delta generated also consists of newline-\n          terminated strings, ready to be printed as-is via the writeline()\n          method of a file-like object.\n      \n          Example:\n      \n          >>> d = new Differ\n          >>> d.compare(['one\\n', 'two\\n', 'three\\n'],\n          ...           ['ore\\n', 'tree\\n', 'emu\\n'])\n          [ '- one\\n',\n            '?  ^\\n',\n            '+ ore\\n',\n            '?  ^\\n',\n            '- two\\n',\n            '- three\\n',\n            '?  -\\n',\n            '+ tree\\n',\n            '+ emu\\n' ]\n      */\n\n      var ahi, alo, bhi, blo, cruncher, g, line, lines, tag, _i, _j, _len, _len1, _ref, _ref1\n      cruncher = new SequenceMatcher(this.linejunk, a, b)\n      lines = []\n      _ref = cruncher.getOpcodes()\n      for (_i = 0, _len = _ref.length; _i < _len; _i++) {\n        _ref1 = _ref[_i], tag = _ref1[0], alo = _ref1[1], ahi = _ref1[2], blo = _ref1[3], bhi = _ref1[4]\n        switch (tag) {\n          case 'replace':\n            g = this._fancyReplace(a, alo, ahi, b, blo, bhi)\n            break\n          case 'delete':\n            g = this._dump('-', a, alo, ahi)\n            break\n          case 'insert':\n            g = this._dump('+', b, blo, bhi)\n            break\n          case 'equal':\n            g = this._dump(' ', a, alo, ahi)\n            break\n          default:\n            throw new Error(\"unknow tag (\" + tag + \")\")\n        }\n        for (_j = 0, _len1 = g.length; _j < _len1; _j++) {\n          line = g[_j]\n          lines.push(line)\n        }\n      }\n      return lines\n    }\n\n    Differ.prototype._dump = function(tag, x, lo, hi) {\n      /*\n          Generate comparison results for a same-tagged range.\n      */\n\n      var i, _i, _results\n      _results = []\n      for (i = _i = lo; lo <= hi ? _i < hi : _i > hi; i = lo <= hi ? ++_i : --_i) {\n        _results.push(\"\" + tag + \" \" + x[i])\n      }\n      return _results\n    }\n\n    Differ.prototype._plainReplace = function(a, alo, ahi, b, blo, bhi) {\n      var first, g, line, lines, second, _i, _j, _len, _len1, _ref\n      if (bhi - blo < ahi - alo) {\n        first = this._dump('+', b, blo, bhi)\n        second = this._dump('-', a, alo, ahi)\n      } else {\n        first = this._dump('-', a, alo, ahi)\n        second = this._dump('+', b, blo, bhi)\n      }\n      lines = []\n      _ref = [first, second]\n      for (_i = 0, _len = _ref.length; _i < _len; _i++) {\n        g = _ref[_i]\n        for (_j = 0, _len1 = g.length; _j < _len1; _j++) {\n          line = g[_j]\n          lines.push(line)\n        }\n      }\n      return lines\n    }\n\n    Differ.prototype._fancyReplace = function(a, alo, ahi, b, blo, bhi) {\n      /*\n          When replacing one block of lines with another, search the blocks\n          for *similar* lines; the best-matching pair (if any) is used as a\n          synch point, and intraline difference marking is done on the\n          similar pair. Lots of work, but often worth it.\n      \n          Example:\n          >>> d = new Differ\n          >>> d._fancyReplace(['abcDefghiJkl\\n'], 0, 1,\n          ...                 ['abcdefGhijkl\\n'], 0, 1)\n          [ '- abcDefghiJkl\\n',\n            '?    ^  ^  ^\\n',\n            '+ abcdefGhijkl\\n',\n            '?    ^  ^  ^\\n' ]\n      */\n\n      var aelt, ai, ai1, ai2, atags, belt, bestRatio, besti, bestj, bj, bj1, bj2, btags, cruncher, cutoff, eqi, eqj, i, j, la, lb, line, lines, tag, _i, _j, _k, _l, _len, _len1, _len2, _len3, _len4, _m, _n, _o, _ref, _ref1, _ref10, _ref11, _ref12, _ref2, _ref3, _ref4, _ref5, _ref6, _ref7, _ref8, _ref9\n      _ref = [0.74, 0.75], bestRatio = _ref[0], cutoff = _ref[1]\n      cruncher = new SequenceMatcher(this.charjunk)\n      _ref1 = [null, null], eqi = _ref1[0], eqj = _ref1[1]\n      lines = []\n      for (j = _i = blo; blo <= bhi ? _i < bhi : _i > bhi; j = blo <= bhi ? ++_i : --_i) {\n        bj = b[j]\n        cruncher.setSeq2(bj)\n        for (i = _j = alo; alo <= ahi ? _j < ahi : _j > ahi; i = alo <= ahi ? ++_j : --_j) {\n          ai = a[i]\n          if (ai === bj) {\n            if (eqi === null) {\n              _ref2 = [i, j], eqi = _ref2[0], eqj = _ref2[1]\n            }\n            continue\n          }\n          cruncher.setSeq1(ai)\n          if (cruncher.realQuickRatio() > bestRatio && cruncher.quickRatio() > bestRatio && cruncher.ratio() > bestRatio) {\n            _ref3 = [cruncher.ratio(), i, j], bestRatio = _ref3[0], besti = _ref3[1], bestj = _ref3[2]\n          }\n        }\n      }\n      if (bestRatio < cutoff) {\n        if (eqi === null) {\n          _ref4 = this._plainReplace(a, alo, ahi, b, blo, bhi)\n          for (_k = 0, _len = _ref4.length; _k < _len; _k++) {\n            line = _ref4[_k]\n            lines.push(line)\n          }\n          return lines\n        }\n        _ref5 = [eqi, eqj, 1.0], besti = _ref5[0], bestj = _ref5[1], bestRatio = _ref5[2]\n      } else {\n        eqi = null\n      }\n      _ref6 = this._fancyHelper(a, alo, besti, b, blo, bestj)\n      for (_l = 0, _len1 = _ref6.length; _l < _len1; _l++) {\n        line = _ref6[_l]\n        lines.push(line)\n      }\n      _ref7 = [a[besti], b[bestj]], aelt = _ref7[0], belt = _ref7[1]\n      if (eqi === null) {\n        atags = btags = ''\n        cruncher.setSeqs(aelt, belt)\n        _ref8 = cruncher.getOpcodes()\n        for (_m = 0, _len2 = _ref8.length; _m < _len2; _m++) {\n          _ref9 = _ref8[_m], tag = _ref9[0], ai1 = _ref9[1], ai2 = _ref9[2], bj1 = _ref9[3], bj2 = _ref9[4]\n          _ref10 = [ai2 - ai1, bj2 - bj1], la = _ref10[0], lb = _ref10[1]\n          switch (tag) {\n            case 'replace':\n              atags += Array(la + 1).join('^')\n              btags += Array(lb + 1).join('^')\n              break\n            case 'delete':\n              atags += Array(la + 1).join('-')\n              break\n            case 'insert':\n              btags += Array(lb + 1).join('+')\n              break\n            case 'equal':\n              atags += Array(la + 1).join(' ')\n              btags += Array(lb + 1).join(' ')\n              break\n            default:\n              throw new Error(\"unknow tag (\" + tag + \")\")\n          }\n        }\n        _ref11 = this._qformat(aelt, belt, atags, btags)\n        for (_n = 0, _len3 = _ref11.length; _n < _len3; _n++) {\n          line = _ref11[_n]\n          lines.push(line)\n        }\n      } else {\n        lines.push('  ' + aelt)\n      }\n      _ref12 = this._fancyHelper(a, besti + 1, ahi, b, bestj + 1, bhi)\n      for (_o = 0, _len4 = _ref12.length; _o < _len4; _o++) {\n        line = _ref12[_o]\n        lines.push(line)\n      }\n      return lines\n    }\n\n    Differ.prototype._fancyHelper = function(a, alo, ahi, b, blo, bhi) {\n      var g\n      g = []\n      if (alo < ahi) {\n        if (blo < bhi) {\n          g = this._fancyReplace(a, alo, ahi, b, blo, bhi)\n        } else {\n          g = this._dump('-', a, alo, ahi)\n        }\n      } else if (blo < bhi) {\n        g = this._dump('+', b, blo, bhi)\n      }\n      return g\n    }\n\n    Differ.prototype._qformat = function(aline, bline, atags, btags) {\n      /*\n          Format \"?\" output and deal with leading tabs.\n      \n          Example:\n      \n          >>> d = new Differ\n          >>> d._qformat('\\tabcDefghiJkl\\n', '\\tabcdefGhijkl\\n',\n          [ '- \\tabcDefghiJkl\\n',\n            '? \\t ^ ^  ^\\n',\n            '+ \\tabcdefGhijkl\\n',\n            '? \\t ^ ^  ^\\n' ]\n      */\n\n      var common, lines\n      lines = []\n      common = min(_countLeading(aline, '\\t'), _countLeading(bline, '\\t'))\n      common = min(common, _countLeading(atags.slice(0, common), ' '))\n      common = min(common, _countLeading(btags.slice(0, common), ' '))\n      atags = atags.slice(common).replace(/\\s+$/, '')\n      btags = btags.slice(common).replace(/\\s+$/, '')\n      lines.push('- ' + aline)\n      if (atags.length) {\n        lines.push(\"? \" + (Array(common + 1).join('\\t')) + atags + \"\\n\")\n      }\n      lines.push('+ ' + bline)\n      if (btags.length) {\n        lines.push(\"? \" + (Array(common + 1).join('\\t')) + btags + \"\\n\")\n      }\n      return lines\n    }\n\n    return Differ\n\n  })()\n\n  IS_LINE_JUNK = function(line, pat) {\n    if (pat == null) {\n      pat = /^\\s*#?\\s*$/\n    }\n    /*\n      Return 1 for ignorable line: iff `line` is blank or contains a single '#'.\n        \n      Examples:\n    \n      >>> IS_LINE_JUNK('\\n')\n      true\n      >>> IS_LINE_JUNK('  #   \\n')\n      true\n      >>> IS_LINE_JUNK('hello\\n')\n      false\n    */\n\n    return pat.test(line)\n  }\n\n  IS_CHARACTER_JUNK = function(ch, ws) {\n    if (ws == null) {\n      ws = ' \\t'\n    }\n    /*\n      Return 1 for ignorable character: iff `ch` is a space or tab.\n    \n      Examples:\n      >>> IS_CHARACTER_JUNK(' ').should.be.true\n      true\n      >>> IS_CHARACTER_JUNK('\\t').should.be.true\n      true\n      >>> IS_CHARACTER_JUNK('\\n').should.be.false\n      false\n      >>> IS_CHARACTER_JUNK('x').should.be.false\n      false\n    */\n\n    return __indexOf.call(ws, ch) >= 0\n  }\n\n  _formatRangeUnified = function(start, stop) {\n    /*\n      Convert range to the \"ed\" format'\n    */\n\n    var beginning, length\n    beginning = start + 1\n    length = stop - start\n    if (length === 1) {\n      return \"\" + beginning\n    }\n    if (!length) {\n      beginning--\n    }\n    return \"\" + beginning + \",\" + length\n  }\n\n  unifiedDiff = function(a, b, _arg) {\n    var file1Range, file2Range, first, fromdate, fromfile, fromfiledate, group, i1, i2, j1, j2, last, line, lines, lineterm, n, started, tag, todate, tofile, tofiledate, _i, _j, _k, _l, _len, _len1, _len2, _len3, _len4, _m, _ref, _ref1, _ref2, _ref3, _ref4, _ref5, _ref6\n    _ref = _arg != null ? _arg : {}, fromfile = _ref.fromfile, tofile = _ref.tofile, fromfiledate = _ref.fromfiledate, tofiledate = _ref.tofiledate, n = _ref.n, lineterm = _ref.lineterm\n    /*\n      Compare two sequences of lines; generate the delta as a unified diff.\n    \n      Unified diffs are a compact way of showing line changes and a few\n      lines of context.  The number of context lines is set by 'n' which\n      defaults to three.\n    \n      By default, the diff control lines (those with ---, +++, or @@) are\n      created with a trailing newline.  \n    \n      For inputs that do not have trailing newlines, set the lineterm\n      argument to \"\" so that the output will be uniformly newline free.\n    \n      The unidiff format normally has a header for filenames and modification\n      times.  Any or all of these may be specified using strings for\n      'fromfile', 'tofile', 'fromfiledate', and 'tofiledate'.\n      The modification times are normally expressed in the ISO 8601 format.\n    \n      Example:\n    \n      >>> unifiedDiff('one two three four'.split(' '),\n      ...             'zero one tree four'.split(' '), {\n      ...               fromfile: 'Original'\n      ...               tofile: 'Current',\n      ...               fromfiledate: '2005-01-26 23:30:50',\n      ...               tofiledate: '2010-04-02 10:20:52',\n      ...               lineterm: ''\n      ...             })\n      [ '--- Original\\t2005-01-26 23:30:50',\n        '+++ Current\\t2010-04-02 10:20:52',\n        '@@ -1,4 +1,4 @@',\n        '+zero',\n        ' one',\n        '-two',\n        '-three',\n        '+tree',\n        ' four' ]\n    */\n\n    if (fromfile == null) {\n      fromfile = ''\n    }\n    if (tofile == null) {\n      tofile = ''\n    }\n    if (fromfiledate == null) {\n      fromfiledate = ''\n    }\n    if (tofiledate == null) {\n      tofiledate = ''\n    }\n    if (n == null) {\n      n = 3\n    }\n    if (lineterm == null) {\n      lineterm = '\\n'\n    }\n    lines = []\n    started = false\n    _ref1 = (new SequenceMatcher(null, a, b)).getGroupedOpcodes()\n    for (_i = 0, _len = _ref1.length; _i < _len; _i++) {\n      group = _ref1[_i]\n      if (!started) {\n        started = true\n        fromdate = fromfiledate ? \"\\t\" + fromfiledate : ''\n        todate = tofiledate ? \"\\t\" + tofiledate : ''\n        lines.push(\"--- \" + fromfile + fromdate + lineterm)\n        lines.push(\"+++ \" + tofile + todate + lineterm)\n      }\n      _ref2 = [group[0], group[group.length - 1]], first = _ref2[0], last = _ref2[1]\n      file1Range = _formatRangeUnified(first[1], last[2])\n      file2Range = _formatRangeUnified(first[3], last[4])\n      lines.push(\"@@ -\" + file1Range + \" +\" + file2Range + \" @@\" + lineterm)\n      for (_j = 0, _len1 = group.length; _j < _len1; _j++) {\n        _ref3 = group[_j], tag = _ref3[0], i1 = _ref3[1], i2 = _ref3[2], j1 = _ref3[3], j2 = _ref3[4]\n        if (tag === 'equal') {\n          _ref4 = a.slice(i1, i2)\n          for (_k = 0, _len2 = _ref4.length; _k < _len2; _k++) {\n            line = _ref4[_k]\n            lines.push(' ' + line)\n          }\n          continue\n        }\n        if (tag === 'replace' || tag === 'delete') {\n          _ref5 = a.slice(i1, i2)\n          for (_l = 0, _len3 = _ref5.length; _l < _len3; _l++) {\n            line = _ref5[_l]\n            lines.push('-' + line)\n          }\n        }\n        if (tag === 'replace' || tag === 'insert') {\n          _ref6 = b.slice(j1, j2)\n          for (_m = 0, _len4 = _ref6.length; _m < _len4; _m++) {\n            line = _ref6[_m]\n            lines.push('+' + line)\n          }\n        }\n      }\n    }\n    return lines\n  }\n\n  _formatRangeContext = function(start, stop) {\n    /*\n      Convert range to the \"ed\" format'\n    */\n\n    var beginning, length\n    beginning = start + 1\n    length = stop - start\n    if (!length) {\n      beginning--\n    }\n    if (length <= 1) {\n      return \"\" + beginning\n    }\n    return \"\" + beginning + \",\" + (beginning + length - 1)\n  }\n\n  contextDiff = function(a, b, _arg) {\n    var file1Range, file2Range, first, fromdate, fromfile, fromfiledate, group, i1, i2, j1, j2, last, line, lines, lineterm, n, prefix, started, tag, todate, tofile, tofiledate, _, _i, _j, _k, _l, _len, _len1, _len2, _len3, _len4, _m, _ref, _ref1, _ref2, _ref3, _ref4, _ref5, _ref6\n    _ref = _arg != null ? _arg : {}, fromfile = _ref.fromfile, tofile = _ref.tofile, fromfiledate = _ref.fromfiledate, tofiledate = _ref.tofiledate, n = _ref.n, lineterm = _ref.lineterm\n    /*\n      Compare two sequences of lines; generate the delta as a context diff.\n    \n      Context diffs are a compact way of showing line changes and a few\n      lines of context.  The number of context lines is set by 'n' which\n      defaults to three.\n    \n      By default, the diff control lines (those with *** or ---) are\n      created with a trailing newline.  This is helpful so that inputs\n      created from file.readlines() result in diffs that are suitable for\n      file.writelines() since both the inputs and outputs have trailing\n      newlines.\n    \n      For inputs that do not have trailing newlines, set the lineterm\n      argument to \"\" so that the output will be uniformly newline free.\n    \n      The context diff format normally has a header for filenames and\n      modification times.  Any or all of these may be specified using\n      strings for 'fromfile', 'tofile', 'fromfiledate', and 'tofiledate'.\n      The modification times are normally expressed in the ISO 8601 format.\n      If not specified, the strings default to blanks.\n    \n      Example:\n      >>> a = ['one\\n', 'two\\n', 'three\\n', 'four\\n']\n      >>> b = ['zero\\n', 'one\\n', 'tree\\n', 'four\\n']\n      >>> contextDiff(a, b, {fromfile: 'Original', tofile: 'Current'})\n      [ '*** Original\\n',\n        '--- Current\\n',\n        '***************\\n',\n        '*** 1,4 ****\\n',\n        '  one\\n',\n        '! two\\n',\n        '! three\\n',\n        '  four\\n',\n        '--- 1,4 ----\\n',\n        '+ zero\\n',\n        '  one\\n',\n        '! tree\\n',\n        '  four\\n' ]\n    */\n\n    if (fromfile == null) {\n      fromfile = ''\n    }\n    if (tofile == null) {\n      tofile = ''\n    }\n    if (fromfiledate == null) {\n      fromfiledate = ''\n    }\n    if (tofiledate == null) {\n      tofiledate = ''\n    }\n    if (n == null) {\n      n = 3\n    }\n    if (lineterm == null) {\n      lineterm = '\\n'\n    }\n    prefix = {\n      insert: '+ ',\n      \"delete\": '- ',\n      replace: '! ',\n      equal: '  '\n    }\n    started = false\n    lines = []\n    _ref1 = (new SequenceMatcher(null, a, b)).getGroupedOpcodes()\n    for (_i = 0, _len = _ref1.length; _i < _len; _i++) {\n      group = _ref1[_i]\n      if (!started) {\n        started = true\n        fromdate = fromfiledate ? \"\\t\" + fromfiledate : ''\n        todate = tofiledate ? \"\\t\" + tofiledate : ''\n        lines.push(\"*** \" + fromfile + fromdate + lineterm)\n        lines.push(\"--- \" + tofile + todate + lineterm)\n        _ref2 = [group[0], group[group.length - 1]], first = _ref2[0], last = _ref2[1]\n        lines.push('***************' + lineterm)\n        file1Range = _formatRangeContext(first[1], last[2])\n        lines.push(\"*** \" + file1Range + \" ****\" + lineterm)\n        if (_any((function() {\n          var _j, _len1, _ref3, _results\n          _results = []\n          for (_j = 0, _len1 = group.length; _j < _len1; _j++) {\n            _ref3 = group[_j], tag = _ref3[0], _ = _ref3[1], _ = _ref3[2], _ = _ref3[3], _ = _ref3[4]\n            _results.push(tag === 'replace' || tag === 'delete')\n          }\n          return _results\n        })())) {\n          for (_j = 0, _len1 = group.length; _j < _len1; _j++) {\n            _ref3 = group[_j], tag = _ref3[0], i1 = _ref3[1], i2 = _ref3[2], _ = _ref3[3], _ = _ref3[4]\n            if (tag !== 'insert') {\n              _ref4 = a.slice(i1, i2)\n              for (_k = 0, _len2 = _ref4.length; _k < _len2; _k++) {\n                line = _ref4[_k]\n                lines.push(prefix[tag] + line)\n              }\n            }\n          }\n        }\n        file2Range = _formatRangeContext(first[3], last[4])\n        lines.push(\"--- \" + file2Range + \" ----\" + lineterm)\n        if (_any((function() {\n          var _l, _len3, _ref5, _results\n          _results = []\n          for (_l = 0, _len3 = group.length; _l < _len3; _l++) {\n            _ref5 = group[_l], tag = _ref5[0], _ = _ref5[1], _ = _ref5[2], _ = _ref5[3], _ = _ref5[4]\n            _results.push(tag === 'replace' || tag === 'insert')\n          }\n          return _results\n        })())) {\n          for (_l = 0, _len3 = group.length; _l < _len3; _l++) {\n            _ref5 = group[_l], tag = _ref5[0], _ = _ref5[1], _ = _ref5[2], j1 = _ref5[3], j2 = _ref5[4]\n            if (tag !== 'delete') {\n              _ref6 = b.slice(j1, j2)\n              for (_m = 0, _len4 = _ref6.length; _m < _len4; _m++) {\n                line = _ref6[_m]\n                lines.push(prefix[tag] + line)\n              }\n            }\n          }\n        }\n      }\n    }\n    return lines\n  }\n\n  ndiff = function(a, b, linejunk, charjunk) {\n    if (charjunk == null) {\n      charjunk = IS_CHARACTER_JUNK\n    }\n    /*\n      Compare `a` and `b` (lists of strings); return a `Differ`-style delta.\n    \n      Optional keyword parameters `linejunk` and `charjunk` are for filter\n      functions (or None):\n    \n      - linejunk: A function that should accept a single string argument, and\n        return true iff the string is junk.  The default is null, and is\n        recommended; \n    \n      - charjunk: A function that should accept a string of length 1. The\n        default is module-level function IS_CHARACTER_JUNK, which filters out\n        whitespace characters (a blank or tab; note: bad idea to include newline\n        in this!).\n    \n      Example:\n      >>> a = ['one\\n', 'two\\n', 'three\\n']\n      >>> b = ['ore\\n', 'tree\\n', 'emu\\n']\n      >>> ndiff(a, b)\n      [ '- one\\n',\n        '?  ^\\n',\n        '+ ore\\n',\n        '?  ^\\n',\n        '- two\\n',\n        '- three\\n',\n        '?  -\\n',\n        '+ tree\\n',\n        '+ emu\\n' ]\n    */\n\n    return (new Differ(linejunk, charjunk)).compare(a, b)\n  }\n\n  restore = function(delta, which) {\n    /*\n      Generate one of the two sequences that generated a delta.\n    \n      Given a `delta` produced by `Differ.compare()` or `ndiff()`, extract\n      lines originating from file 1 or 2 (parameter `which`), stripping off line\n      prefixes.\n    \n      Examples:\n      >>> a = ['one\\n', 'two\\n', 'three\\n']\n      >>> b = ['ore\\n', 'tree\\n', 'emu\\n']\n      >>> diff = ndiff(a, b)\n      >>> restore(diff, 1)\n      [ 'one\\n',\n        'two\\n',\n        'three\\n' ]\n      >>> restore(diff, 2)\n      [ 'ore\\n',\n        'tree\\n',\n        'emu\\n' ]\n    */\n\n    var line, lines, prefixes, tag, _i, _len, _ref\n    tag = {\n      1: '- ',\n      2: '+ '\n    }[which]\n    if (!tag) {\n      throw new Error(\"unknow delta choice (must be 1 or 2): \" + which)\n    }\n    prefixes = ['  ', tag]\n    lines = []\n    for (_i = 0, _len = delta.length; _i < _len; _i++) {\n      line = delta[_i]\n      if (_ref = line.slice(0, 2), __indexOf.call(prefixes, _ref) >= 0) {\n        lines.push(line.slice(2))\n      }\n    }\n    return lines\n  }\n\n  exports._arrayCmp = _arrayCmp\n\n  exports.SequenceMatcher = SequenceMatcher\n\n  exports.getCloseMatches = getCloseMatches\n\n  exports._countLeading = _countLeading\n\n  exports.Differ = Differ\n\n  exports.IS_LINE_JUNK = IS_LINE_JUNK\n\n  exports.IS_CHARACTER_JUNK = IS_CHARACTER_JUNK\n\n  exports._formatRangeUnified = _formatRangeUnified\n\n  exports.unifiedDiff = unifiedDiff\n\n  exports._formatRangeContext = _formatRangeContext\n\n  exports.contextDiff = contextDiff\n\n  exports.ndiff = ndiff\n\n  exports.restore = restore\n\n}).call(this)\n","module.exports = require('./lib/difflib');\n","import URL from 'url';\nimport cheerio from 'cheerio';\nimport TurndownService from 'turndown';\n\nimport addCustomExtractor from '@/extractors/add-extractor';\nimport getExtractor from '@/extractors/get-extractor';\nimport RootExtractor, { selectExtendedTypes } from '@/extractors/root-extractor';\nimport collectAllPages from '@/extractors/collect-all-pages';\nimport { validateUrl } from '@/utils';\nimport Resource from '@/resource';\n\nconst Parser = {\n  async parse(url, { html, ...opts } = {}) {\n    const {\n      fetchAllPages = true,\n      fallback = true,\n      contentType = 'html',\n      headers = {},\n      extend,\n      customExtractor,\n    } = opts;\n\n    // if no url was passed and this is the browser version,\n    // set url to window.location.href and load the html\n    // from the current page\n    if (!url && cheerio.browser) {\n      url = window.location.href; // eslint-disable-line no-undef\n      html = html || cheerio.html();\n    }\n\n    const parsedUrl = URL.parse(url);\n\n    if (!validateUrl(parsedUrl)) {\n      return {\n        error: true,\n        message:\n          'The url parameter passed does not look like a valid URL. Please check your URL and try again.',\n      };\n    }\n\n    const $ = await Resource.create(url, html, parsedUrl, headers);\n\n    // If we found an error creating the resource, return that error\n    if ($.failed) {\n      return $;\n    }\n\n    // Add custom extractor via cli.\n    if (customExtractor) {\n      addCustomExtractor(customExtractor);\n    }\n\n    const Extractor = getExtractor(url, parsedUrl, $);\n    // console.log(`Using extractor for ${Extractor.domain}`);\n\n    // if html still has not been set (i.e., url passed to Parser.parse),\n    // set html from the response of Resource.create\n    if (!html) {\n      html = $.html();\n    }\n\n    // Cached value of every meta name in our document.\n    // Used when extracting title/author/date_published/dek\n    const metaCache = $('meta')\n      .map((_, node) => $(node).attr('name'))\n      .toArray();\n\n    let extendedTypes = {};\n    if (extend) {\n      extendedTypes = selectExtendedTypes(extend, { $, url, html });\n    }\n\n    let result = RootExtractor.extract(Extractor, {\n      url,\n      html,\n      $,\n      metaCache,\n      parsedUrl,\n      fallback,\n      contentType,\n    });\n\n    const { title, next_page_url } = result;\n\n    // Fetch more pages if next_page_url found\n    if (fetchAllPages && next_page_url) {\n      result = await collectAllPages({\n        Extractor,\n        next_page_url,\n        html,\n        $,\n        metaCache,\n        result,\n        title,\n        url,\n      });\n    } else {\n      result = {\n        ...result,\n        total_pages: 1,\n        rendered_pages: 1,\n      };\n    }\n\n    if (contentType === 'markdown') {\n      const turndownService = new TurndownService();\n      result.content = turndownService.turndown(result.content);\n    } else if (contentType === 'text') {\n      result.content = $.text($(result.content));\n    }\n\n    return { ...result, ...extendedTypes };\n  },\n\n  browser: !!cheerio.browser,\n\n  // A convenience method for getting a resource\n  // to work with, e.g., for custom extractor generator\n  fetchResource(url) {\n    return Resource.create(url);\n  },\n\n  addExtractor(extractor) {\n    return addCustomExtractor(extractor);\n  },\n};\n\nexport default Parser;\n","import mergeSupportedDomains from '../utils/merge-supported-domains';\n\nexport const apiExtractors = {};\n\nexport default function addExtractor(extractor) {\n  if (!extractor || !extractor.domain) {\n    return {\n      error: true,\n      message: 'Unable to add custom extractor. Invalid parameters.',\n    };\n  }\n\n  Object.assign(apiExtractors, mergeSupportedDomains(extractor));\n\n  return apiExtractors;\n}\n","const merge = (extractor, domains) =>\n  domains.reduce((acc, domain) => {\n    acc[domain] = extractor;\n    return acc;\n  }, {});\n\nexport default function mergeSupportedDomains(extractor) {\n  return extractor.supportedDomains\n    ? merge(extractor, [extractor.domain, ...extractor.supportedDomains])\n    : merge(extractor, [extractor.domain]);\n}\n","import URL from 'url';\n\nimport Extractors from './all';\nimport GenericExtractor from './generic';\nimport detectByHtml from './detect-by-html';\nimport { apiExtractors } from './add-extractor';\n\nexport default function getExtractor(url, parsedUrl, $) {\n  parsedUrl = parsedUrl || URL.parse(url);\n  const { hostname } = parsedUrl;\n  const baseDomain = hostname\n    .split('.')\n    .slice(-2)\n    .join('.');\n\n  return (\n    apiExtractors[hostname] ||\n    apiExtractors[baseDomain] ||\n    Extractors[hostname] ||\n    Extractors[baseDomain] ||\n    detectByHtml($) ||\n    GenericExtractor\n  );\n}\n","import mergeSupportedDomains from '@/utils/merge-supported-domains';\nimport * as CustomExtractors from './custom/index';\n\nexport default Object.keys(CustomExtractors).reduce((acc, key) => {\n  const extractor = CustomExtractors[key];\n  return {\n    ...acc,\n    ...mergeSupportedDomains(extractor),\n  };\n}, {});\n","export * from './blogspot.com';\nexport * from './nymag.com';\nexport * from './wikipedia.org';\nexport * from './twitter.com';\nexport * from './www.nytimes.com';\nexport * from './www.theatlantic.com';\nexport * from './www.newyorker.com';\nexport * from './www.wired.com';\nexport * from './www.msn.com';\nexport * from './www.yahoo.com';\nexport * from './www.buzzfeed.com';\nexport * from './fandom.wikia.com';\nexport * from './www.littlethings.com';\nexport * from './www.politico.com';\nexport * from './deadspin.com';\nexport * from './www.broadwayworld.com';\nexport * from './www.apartmenttherapy.com';\nexport * from './medium.com';\nexport * from './www.tmz.com';\nexport * from './www.washingtonpost.com';\nexport * from './www.huffingtonpost.com';\nexport * from './newrepublic.com';\nexport * from './money.cnn.com';\nexport * from './www.theverge.com';\nexport * from './www.cnn.com';\nexport * from './www.aol.com';\nexport * from './www.youtube.com';\nexport * from './www.theguardian.com';\nexport * from './www.sbnation.com';\nexport * from './www.bloomberg.com';\nexport * from './www.bustle.com';\nexport * from './www.npr.org';\nexport * from './www.recode.net';\nexport * from './qz.com';\nexport * from './www.dmagazine.com';\nexport * from './www.reuters.com';\nexport * from './mashable.com';\nexport * from './www.chicagotribune.com';\nexport * from './www.vox.com';\nexport * from './news.nationalgeographic.com';\nexport * from './www.nationalgeographic.com';\nexport * from './www.latimes.com';\nexport * from './pagesix.com';\nexport * from './thefederalistpapers.org';\nexport * from './www.cbssports.com';\nexport * from './www.msnbc.com';\nexport * from './www.thepoliticalinsider.com';\nexport * from './www.mentalfloss.com';\nexport * from './abcnews.go.com';\nexport * from './www.nydailynews.com';\nexport * from './www.cnbc.com';\nexport * from './www.popsugar.com';\nexport * from './observer.com';\nexport * from './people.com';\nexport * from './www.usmagazine.com';\nexport * from './www.rollingstone.com';\nexport * from './247sports.com';\nexport * from './uproxx.com';\nexport * from './www.eonline.com';\nexport * from './www.miamiherald.com';\nexport * from './www.refinery29.com';\nexport * from './www.macrumors.com';\nexport * from './www.androidcentral.com';\nexport * from './www.si.com';\nexport * from './www.rawstory.com';\nexport * from './www.cnet.com';\nexport * from './www.today.com';\nexport * from './www.al.com';\nexport * from './www.thepennyhoarder.com';\nexport * from './www.westernjournalism.com';\nexport * from './www.americanow.com';\nexport * from './sciencefly.com';\nexport * from './hellogiggles.com';\nexport * from './thoughtcatalog.com';\nexport * from './www.inquisitr.com';\nexport * from './www.nbcnews.com';\nexport * from './fortune.com';\nexport * from './www.linkedin.com';\nexport * from './obamawhitehouse.archives.gov';\nexport * from './www.opposingviews.com';\nexport * from './www.prospectmagazine.co.uk';\nexport * from './forward.com';\nexport * from './www.qdaily.com';\nexport * from './gothamist.com';\nexport * from './www.fool.com';\nexport * from './www.slate.com';\nexport * from './ici.radio-canada.ca';\nexport * from './www.fortinet.com';\nexport * from './www.fastcompany.com';\nexport * from './blisterreview.com';\nexport * from './news.mynavi.jp';\nexport * from './clinicaltrials.gov';\nexport * from './github.com';\nexport * from './www.reddit.com';\nexport * from './otrs.com';\nexport * from './www.ossnews.jp';\nexport * from './buzzap.jp';\nexport * from './www.asahi.com';\nexport * from './www.sanwa.co.jp';\nexport * from './www.elecom.co.jp';\nexport * from './scan.netsecurity.ne.jp';\nexport * from './jvndb.jvn.jp';\nexport * from './genius.com';\nexport * from './www.jnsa.org';\nexport * from './phpspot.org';\nexport * from './www.infoq.com';\nexport * from './www.moongift.jp';\nexport * from './www.itmedia.co.jp';\nexport * from './www.publickey1.jp';\nexport * from './takagi-hiromitsu.jp';\nexport * from './bookwalker.jp';\nexport * from './www.yomiuri.co.jp';\nexport * from './japan.cnet.com';\nexport * from './deadline.com';\nexport * from './www.gizmodo.jp';\nexport * from './getnews.jp';\nexport * from './www.lifehacker.jp';\nexport * from './sect.iij.ad.jp';\nexport * from './www.oreilly.co.jp';\nexport * from './www.ipa.go.jp';\nexport * from './weekly.ascii.jp';\nexport * from './techlog.iij.ad.jp';\nexport * from './wired.jp';\nexport * from './japan.zdnet.com';\nexport * from './www.rbbtoday.com';\nexport * from './www.lemonde.fr';\nexport * from './www.phoronix.com';\nexport * from './pitchfork.com';\nexport * from './biorxiv.org';\nexport * from './epaper.zeit.de';\nexport * from './www.ladbible.com';\nexport * from './timesofindia.indiatimes.com';\nexport * from './ma.ttias.be';\nexport * from './pastebin.com';\nexport * from './www.abendblatt.de';\nexport * from './www.gruene.de';\nexport * from './www.engadget.com';\nexport * from './arstechnica.com';\nexport * from './www.ndtv.com';\nexport * from './www.spektrum.de';\nexport * from './postlight.com';\nexport * from './www.investmentexecutive.com';\nexport * from './www.cbc.ca';\n","export const BloggerExtractor = {\n  domain: 'blogspot.com',\n  content: {\n    // Blogger is insane and does not load its content\n    // initially in the page, but it's all there\n    // in noscript\n    selectors: ['.post-content noscript'],\n\n    // Selectors to remove from the extracted content\n    clean: [],\n\n    // Convert the noscript tag to a div\n    transforms: {\n      noscript: 'div',\n    },\n  },\n\n  author: {\n    selectors: ['.post-author-name'],\n  },\n\n  title: {\n    selectors: ['.post h2.title'],\n  },\n\n  date_published: {\n    selectors: ['span.publishdate'],\n  },\n};\n","export const NYMagExtractor = {\n  domain: 'nymag.com',\n  content: {\n    // Order by most likely. Extractor will stop on first occurrence\n    selectors: ['div.article-content', 'section.body', 'article.article'],\n\n    // Selectors to remove from the extracted content\n    clean: ['.ad', '.single-related-story'],\n\n    // Object of tranformations to make on matched elements\n    // Each key is the selector, each value is the tag to\n    // transform to.\n    // If a function is given, it should return a string\n    // to convert to or nothing (in which case it will not perform\n    // the transformation.\n    transforms: {\n      // Convert h1s to h2s\n      h1: 'h2',\n\n      // Convert lazy-loaded noscript images to figures\n      noscript: ($node, $) => {\n        const $children = $.browser ? $($node.text()) : $node.children();\n        if (\n          $children.length === 1 &&\n          $children.get(0) !== undefined &&\n          $children.get(0).tagName.toLowerCase() === 'img'\n        ) {\n          return 'figure';\n        }\n\n        return null;\n      },\n    },\n  },\n\n  title: {\n    selectors: ['h1.lede-feature-title', 'h1.headline-primary', 'h1'],\n  },\n\n  author: {\n    selectors: ['.by-authors', '.lede-feature-author'],\n  },\n\n  dek: {\n    selectors: ['.lede-feature-teaser'],\n  },\n\n  date_published: {\n    selectors: [\n      ['time.article-timestamp[datetime]', 'datetime'],\n      'time.article-timestamp',\n    ],\n  },\n};\n","export const WikipediaExtractor = {\n  domain: 'wikipedia.org',\n  content: {\n    selectors: ['#mw-content-text'],\n\n    defaultCleaner: false,\n\n    // transform top infobox to an image with caption\n    transforms: {\n      '.infobox img': $node => {\n        const $parent = $node.parents('.infobox');\n        // Only prepend the first image in .infobox\n        if ($parent.children('img').length === 0) {\n          $parent.prepend($node);\n        }\n      },\n      '.infobox caption': 'figcaption',\n      '.infobox': 'figure',\n    },\n\n    // Selectors to remove from the extracted content\n    clean: [\n      '.mw-editsection',\n      'figure tr, figure td, figure tbody',\n      '#toc',\n      '.navbox',\n    ],\n  },\n\n  author: 'Wikipedia Contributors',\n\n  title: {\n    selectors: ['h2.title'],\n  },\n\n  date_published: {\n    selectors: ['#footer-info-lastmod'],\n  },\n};\n","export const TwitterExtractor = {\n  domain: 'twitter.com',\n\n  content: {\n    transforms: {\n      // We're transforming essentially the whole page here.\n      // Twitter doesn't have nice selectors, so our initial\n      // selector grabs the whole page, then we're re-writing\n      // it to fit our needs before we clean it up.\n      '.permalink[role=main]': ($node, $) => {\n        const tweets = $node.find('.tweet');\n        const $tweetContainer = $('<div id=\"TWEETS_GO_HERE\"></div>');\n        $tweetContainer.append(tweets);\n        $node.replaceWith($tweetContainer);\n      },\n\n      // Twitter wraps @ with s, which\n      // renders as a strikethrough\n      s: 'span',\n    },\n\n    selectors: ['.permalink[role=main]'],\n\n    defaultCleaner: false,\n\n    clean: ['.stream-item-footer', 'button', '.tweet-details-fixer'],\n  },\n\n  author: {\n    selectors: ['.tweet.permalink-tweet .username'],\n  },\n\n  date_published: {\n    selectors: [['.permalink-tweet ._timestamp[data-time-ms]', 'data-time-ms']],\n  },\n};\n","export const NYTimesExtractor = {\n  domain: 'www.nytimes.com',\n\n  title: {\n    selectors: [\n      'h1[data-testid=\"headline\"]',\n      'h1.g-headline',\n      'h1[itemprop=\"headline\"]',\n      'h1.headline',\n      'h1 .balancedHeadline',\n    ],\n  },\n\n  author: {\n    selectors: [\n      ['meta[name=\"author\"]', 'value'],\n      '.g-byline',\n      '.byline',\n      ['meta[name=\"byl\"]', 'value'],\n    ],\n  },\n\n  content: {\n    selectors: ['div.g-blocks', 'section[name=\"articleBody\"]', 'article#story'],\n\n    transforms: {\n      'img.g-lazy': $node => {\n        let src = $node.attr('src');\n        const width = 640;\n\n        src = src.replace('{{size}}', width);\n        $node.attr('src', src);\n      },\n    },\n\n    clean: [\n      '.ad',\n      'header#story-header',\n      '.story-body-1 .lede.video',\n      '.visually-hidden',\n      '#newsletter-promo',\n      '.promo',\n      '.comments-button',\n      '.hidden',\n      '.comments',\n      '.supplemental',\n      '.nocontent',\n      '.story-footer-links',\n    ],\n  },\n\n  date_published: {\n    selectors: [\n      ['meta[name=\"article:published_time\"]', 'value'],\n      ['meta[name=\"article:published\"]', 'value'],\n    ],\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  dek: null,\n\n  next_page_url: null,\n\n  excerpt: null,\n};\n","// Rename CustomExtractor\n// to fit your publication\nexport const TheAtlanticExtractor = {\n  domain: 'www.theatlantic.com',\n  title: {\n    selectors: ['h1', '.c-article-header__hed'],\n  },\n\n  author: {\n    selectors: [['meta[name=\"author\"]', 'value'], '.c-byline__author'],\n  },\n\n  content: {\n    selectors: ['article', '.article-body'],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: [],\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: [\n      '.partner-box',\n      '.callout',\n      '.c-article-writer__image',\n      '.c-article-writer__content',\n      '.c-letters-cta__text',\n      '.c-footer__logo',\n      '.c-recirculation-link',\n      '.twitter-tweet',\n    ],\n  },\n\n  dek: {\n    selectors: [['meta[name=\"description\"]', 'value']],\n  },\n\n  date_published: {\n    selectors: [['time[itemprop=\"datePublished\"]', 'datetime']],\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  next_page_url: null,\n\n  excerpt: null,\n};\n","// Rename CustomExtractor\n// to fit your publication\n// (e.g., NYTimesExtractor)\nexport const NewYorkerExtractor = {\n  domain: 'www.newyorker.com',\n  title: {\n    selectors: [\n      'h1[class^=\"content-header\"]',\n      'h1[class^=\"ArticleHeader__hed\"]',\n      'h1[class*=\"ContentHeaderHed\"]',\n      ['meta[name=\"og:title\"]', 'value'],\n    ],\n  },\n\n  author: {\n    selectors: [\n      'article header div[class^=\"BylinesWrapper\"]',\n      ['meta[name=\"article:author\"]', 'value'],\n      'div[class^=\"ArticleContributors\"] a[rel=\"author\"]',\n      'article header div[class*=\"Byline__multipleContributors\"]',\n    ],\n  },\n\n  content: {\n    selectors: [\n      '.article__body',\n      'article.article.main-content',\n      'main[class^=\"Layout__content\"]',\n    ],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {\n      '.caption__text': 'figcaption',\n      '.caption__credit': 'figcaption',\n    },\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: ['footer[class^=\"ArticleFooter__footer\"]', 'aside'],\n  },\n\n  date_published: {\n    selectors: [\n      ['meta[name=\"article:published_time\"]', 'value'],\n      'time.content-header__publish-date',\n      ['meta[name=\"pubdate\"]', 'value'],\n    ],\n    timezone: 'America/New_York',\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  dek: {\n    selectors: [\n      'div[class^=\"ContentHeaderDek\"]',\n      'div.content-header__dek',\n      'h2[class^=\"ArticleHeader__dek\"]',\n    ],\n  },\n\n  next_page_url: null,\n\n  excerpt: null,\n};\n","// Rename CustomExtractor\n// to fit your publication\n// (e.g., NYTimesExtractor)\nexport const WiredExtractor = {\n  domain: 'www.wired.com',\n  title: {\n    selectors: [\n      'h1[data-testId=\"ContentHeaderHed\"]',\n      // enter title selectors\n    ],\n  },\n\n  author: {\n    selectors: [\n      ['meta[name=\"article:author\"]', 'value'],\n      'a[rel=\"author\"]',\n      // enter author selectors\n    ],\n  },\n\n  content: {\n    selectors: [\n      'article.article.main-content',\n      'article.content',\n      // enter content selectors\n    ],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: [],\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: ['.visually-hidden', 'figcaption img.photo', '.alert-message'],\n  },\n\n  date_published: {\n    selectors: [['meta[name=\"article:published_time\"]', 'value']],\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  dek: {\n    selectors: [],\n  },\n\n  next_page_url: null,\n\n  excerpt: null,\n};\n","// Rename CustomExtractor\n// to fit your publication\n// (e.g., NYTimesExtractor)\nexport const MSNExtractor = {\n  domain: 'www.msn.com',\n  title: {\n    selectors: [\n      'h1',\n      // enter title selectors\n    ],\n  },\n\n  author: {\n    selectors: [\n      'span.authorname-txt',\n      // enter author selectors\n    ],\n  },\n\n  content: {\n    selectors: [\n      'div.richtext',\n      // enter content selectors\n    ],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: [],\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: ['span.caption'],\n  },\n\n  date_published: {\n    selectors: ['span.time'],\n  },\n\n  lead_image_url: {\n    selectors: [],\n  },\n\n  dek: {\n    selectors: [],\n  },\n\n  next_page_url: null,\n\n  excerpt: null,\n};\n","// Rename CustomExtractor\n// to fit your publication\n// (e.g., NYTimesExtractor)\nexport const YahooExtractor = {\n  domain: 'www.yahoo.com',\n  title: {\n    selectors: [\n      'header.canvas-header',\n      // enter title selectors\n    ],\n  },\n\n  author: {\n    selectors: [\n      'span.provider-name',\n      // enter author selectors\n    ],\n  },\n\n  content: {\n    selectors: [\n      // enter content selectors\n      '.content-canvas',\n    ],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: [],\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: ['.figure-caption'],\n  },\n\n  date_published: {\n    selectors: [['time.date[datetime]', 'datetime']],\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  dek: {\n    selectors: [\n      // enter dek selectors\n    ],\n  },\n\n  next_page_url: null,\n\n  excerpt: null,\n};\n","// Rename CustomExtractor\n// to fit your publication\n// (e.g., NYTimesExtractor)\nexport const BuzzfeedExtractor = {\n  domain: 'www.buzzfeed.com',\n\n  supportedDomains: ['www.buzzfeednews.com'],\n\n  title: {\n    selectors: [\n      'h1.embed-headline-title',\n      // enter title selectors\n    ],\n  },\n\n  author: {\n    selectors: [\n      'a[data-action=\"user/username\"]',\n      'byline__author',\n      ['meta[name=\"author\"]', 'value'],\n      // enter author selectors\n    ],\n  },\n\n  content: {\n    selectors: [\n      ['div[class^=\"featureimage_featureImageWrapper\"]', '.js-subbuzz-wrapper'],\n      ['.js-subbuzz-wrapper'],\n    ],\n\n    defaultCleaner: false,\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {\n      h2: 'b',\n\n      'div.longform_custom_header_media': $node => {\n        if ($node.has('img') && $node.has('.longform_header_image_source')) {\n          return 'figure';\n        }\n\n        return null;\n      },\n\n      'figure.longform_custom_header_media .longform_header_image_source':\n        'figcaption',\n    },\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: [\n      '.instapaper_ignore',\n      '.suplist_list_hide .buzz_superlist_item .buzz_superlist_number_inline',\n      '.share-box',\n      '.print',\n      '.js-inline-share-bar',\n      '.js-ad-placement',\n    ],\n  },\n\n  date_published: {\n    selectors: [['time[datetime]', 'datetime']],\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  dek: {\n    selectors: ['.embed-headline-description'],\n  },\n\n  next_page_url: null,\n\n  excerpt: null,\n};\n","// Rename CustomExtractor\n// to fit your publication\n// (e.g., NYTimesExtractor)\nexport const WikiaExtractor = {\n  domain: 'fandom.wikia.com',\n  title: {\n    selectors: [\n      'h1.entry-title',\n      // enter title selectors\n    ],\n  },\n\n  author: {\n    selectors: [\n      '.author vcard',\n      '.fn',\n      // enter author selectors\n    ],\n  },\n\n  content: {\n    selectors: [\n      '.grid-content',\n      '.entry-content',\n      // enter content selectors\n    ],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: [],\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: [],\n  },\n\n  date_published: {\n    selectors: [['meta[name=\"article:published_time\"]', 'value']],\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  dek: {\n    selectors: [],\n  },\n\n  next_page_url: null,\n\n  excerpt: null,\n};\n","// Rename CustomExtractor\n// to fit your publication\n// (e.g., NYTimesExtractor)\nexport const LittleThingsExtractor = {\n  domain: 'www.littlethings.com',\n  title: {\n    selectors: [\n      'h1[class*=\"PostHeader\"]',\n      'h1.post-title',\n      // enter title selectors\n    ],\n  },\n\n  author: {\n    selectors: [\n      'div[class^=\"PostHeader__ScAuthorNameSection\"]',\n      ['meta[name=\"author\"]', 'value'],\n      // enter author selectors\n    ],\n  },\n\n  content: {\n    selectors: [\n      // enter content selectors\n      'section[class*=\"PostMainArticle\"]',\n      '.mainContentIntro',\n      '.content-wrapper',\n    ],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: [],\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: [],\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  next_page_url: null,\n\n  excerpt: null,\n};\n","export const PoliticoExtractor = {\n  domain: 'www.politico.com',\n  title: {\n    selectors: [['meta[name=\"og:title\"]', 'value']],\n  },\n\n  author: {\n    selectors: [\n      ['div[itemprop=\"author\"] meta[itemprop=\"name\"]', 'value'],\n      '.story-meta__authors .vcard',\n      '.story-main-content .byline .vcard',\n    ],\n  },\n\n  content: {\n    selectors: [['.story-text'], '.story-main-content', '.story-core'],\n\n    transforms: [],\n\n    clean: ['figcaption', '.story-meta', '.ad'],\n  },\n\n  date_published: {\n    selectors: [\n      ['time[itemprop=\"datePublished\"]', 'datetime'],\n      ['.story-meta__details time[datetime]', 'datetime'],\n      ['.story-main-content .timestamp time[datetime]', 'datetime'],\n    ],\n    timezone: 'America/New_York',\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  dek: {\n    selectors: [['meta[name=\"og:description\"]', 'value']],\n  },\n};\n","export const DeadspinExtractor = {\n  domain: 'deadspin.com',\n\n  supportedDomains: [\n    'jezebel.com',\n    'lifehacker.com',\n    'kotaku.com',\n    'gizmodo.com',\n    'jalopnik.com',\n    'kinja.com',\n    'avclub.com',\n    'clickhole.com',\n    'splinternews.com',\n    'theonion.com',\n    'theroot.com',\n    'thetakeout.com',\n    'theinventory.com',\n  ],\n\n  title: {\n    selectors: ['header h1', 'h1.headline'],\n  },\n\n  author: {\n    selectors: ['a[data-ga*=\"Author\"]', '.author'],\n  },\n\n  content: {\n    selectors: ['.js_post-content', '.post-content', '.entry-content'],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {\n      'iframe.lazyload[data-recommend-id^=\"youtube://\"]': $node => {\n        const youtubeId = $node.attr('id').split('youtube-')[1];\n        $node.attr('src', `https://www.youtube.com/embed/${youtubeId}`);\n      },\n    },\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: ['.magnifier', '.lightbox'],\n  },\n\n  date_published: {\n    selectors: [\n      ['meta[name=\"article:published_time\"]', 'value'],\n      ['time.updated[datetime]', 'datetime'],\n    ],\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  dek: {\n    selectors: [\n      // enter selectors\n    ],\n  },\n\n  next_page_url: {\n    selectors: [\n      // enter selectors\n    ],\n  },\n\n  excerpt: {\n    selectors: [\n      // enter selectors\n    ],\n  },\n};\n","// Rename CustomExtractor\n// to fit your publication\n// (e.g., NYTimesExtractor)\nexport const BroadwayWorldExtractor = {\n  domain: 'www.broadwayworld.com',\n  title: {\n    selectors: ['h1[itemprop=headline]', 'h1.article-title'],\n  },\n\n  author: {\n    selectors: ['span[itemprop=author]'],\n  },\n\n  content: {\n    selectors: ['div[itemprop=articlebody]'],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {},\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: [],\n  },\n\n  date_published: {\n    selectors: [['meta[itemprop=datePublished]', 'value']],\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  dek: {\n    selectors: [],\n  },\n\n  next_page_url: {\n    selectors: [\n      // enter selectors\n    ],\n  },\n\n  excerpt: {\n    selectors: [\n      // enter selectors\n    ],\n  },\n};\n","// Rename CustomExtractor\n// to fit your publication\n// (e.g., NYTimesExtractor)\nexport const ApartmentTherapyExtractor = {\n  domain: 'www.apartmenttherapy.com',\n  title: {\n    selectors: ['h1.headline'],\n  },\n\n  author: {\n    selectors: ['.PostByline__name'],\n  },\n\n  content: {\n    selectors: ['div.post__content'],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {\n      'div[data-render-react-id=\"images/LazyPicture\"]': ($node, $) => {\n        const data = JSON.parse($node.attr('data-props'));\n        const { src } = data.sources[0];\n        const $img = $('<img />').attr('src', src);\n        $node.replaceWith($img);\n      },\n    },\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: [],\n  },\n\n  date_published: {\n    selectors: [['.PostByline__timestamp[datetime]', 'datetime']],\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  dek: {\n    selectors: [],\n  },\n\n  next_page_url: {\n    selectors: [\n      // enter selectors\n    ],\n  },\n\n  excerpt: {\n    selectors: [\n      // enter selectors\n    ],\n  },\n};\n","export const MediumExtractor = {\n  domain: 'medium.com',\n\n  title: {\n    selectors: ['h1', ['meta[name=\"og:title\"]', 'value']],\n  },\n\n  author: {\n    selectors: [['meta[name=\"author\"]', 'value']],\n  },\n\n  content: {\n    selectors: ['article'],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {\n      // Allow drop cap character.\n      'section span:first-of-type': $node => {\n        const $text = $node.html();\n        if ($text.length === 1 && /^[a-zA-Z()]+$/.test($text)) {\n          $node.replaceWith($text);\n        }\n      },\n      // Re-write lazy-loaded youtube videos\n      iframe: $node => {\n        const ytRe = /https:\\/\\/i.embed.ly\\/.+url=https:\\/\\/i\\.ytimg\\.com\\/vi\\/(\\w+)\\//;\n        const thumb = decodeURIComponent($node.attr('data-thumbnail'));\n        const $parent = $node.parents('figure');\n\n        if (ytRe.test(thumb)) {\n          const [_, youtubeId] = thumb.match(ytRe); // eslint-disable-line\n          $node.attr('src', `https://www.youtube.com/embed/${youtubeId}`);\n          const $caption = $parent.find('figcaption');\n          $parent.empty().append([$node, $caption]);\n          return;\n        }\n\n        // If we can't draw the YouTube preview, remove the figure.\n        $parent.remove();\n      },\n\n      // rewrite figures to pull out image and caption, remove rest\n      figure: $node => {\n        // ignore if figure has an iframe\n        if ($node.find('iframe').length > 0) return;\n\n        const $img = $node.find('img').slice(-1)[0];\n        const $caption = $node.find('figcaption');\n\n        $node.empty().append([$img, $caption]);\n      },\n\n      // Remove any smaller images that did not get caught by the generic image\n      // cleaner (author photo 48px, leading sentence images 79px, etc.).\n      img: $node => {\n        const width = parseInt($node.attr('width'), 10);\n        if (width < 100) $node.remove();\n      },\n    },\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: ['span a', 'svg'],\n  },\n\n  date_published: {\n    selectors: [['meta[name=\"article:published_time\"]', 'value']],\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  dek: null,\n\n  next_page_url: {\n    selectors: [\n      // enter selectors\n    ],\n  },\n\n  excerpt: {\n    selectors: [\n      // enter selectors\n    ],\n  },\n};\n","export const WwwTmzComExtractor = {\n  domain: 'www.tmz.com',\n\n  title: {\n    selectors: ['.post-title-breadcrumb', 'h1', '.headline'],\n  },\n\n  author: 'TMZ STAFF',\n\n  date_published: {\n    selectors: ['.article__published-at', '.article-posted-date'],\n\n    timezone: 'America/Los_Angeles',\n  },\n\n  dek: {\n    selectors: [\n      // enter selectors\n    ],\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  content: {\n    selectors: ['.article__blocks', '.article-content', '.all-post-body'],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {},\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: ['.lightbox-link'],\n  },\n};\n","export const WwwWashingtonpostComExtractor = {\n  domain: 'www.washingtonpost.com',\n\n  title: {\n    selectors: ['h1', '#topper-headline-wrapper'],\n  },\n\n  author: {\n    selectors: ['.pb-author-name'],\n  },\n\n  date_published: {\n    selectors: [['.author-timestamp[itemprop=\"datePublished\"]', 'content']],\n  },\n\n  dek: {\n    selectors: [],\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  content: {\n    selectors: ['.article-body'],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {\n      'div.inline-content': $node => {\n        if ($node.has('img,iframe,video').length > 0) {\n          return 'figure';\n        }\n\n        $node.remove();\n        return null;\n      },\n      '.pb-caption': 'figcaption',\n    },\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: ['.interstitial-link', '.newsletter-inline-unit'],\n  },\n};\n","export const WwwHuffingtonpostComExtractor = {\n  domain: 'www.huffingtonpost.com',\n\n  title: {\n    selectors: ['h1.headline__title'],\n  },\n\n  author: {\n    selectors: ['span.author-card__details__name'],\n  },\n\n  date_published: {\n    selectors: [\n      ['meta[name=\"article:modified_time\"]', 'value'],\n      ['meta[name=\"article:published_time\"]', 'value'],\n    ],\n  },\n\n  dek: {\n    selectors: ['h2.headline__subtitle'],\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  content: {\n    selectors: ['div.entry__body'],\n\n    defaultCleaner: false,\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {},\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: [\n      '.pull-quote',\n      '.tag-cloud',\n      '.embed-asset',\n      '.below-entry',\n      '.entry-corrections',\n      '#suggested-story',\n    ],\n  },\n};\n","export const NewrepublicComExtractor = {\n  domain: 'newrepublic.com',\n\n  title: {\n    selectors: ['h1.article-headline'],\n  },\n\n  author: {\n    selectors: ['span.AuthorList'],\n  },\n\n  date_published: {\n    selectors: [['meta[name=\"article:published_time\"]', 'value']],\n\n    timezone: 'America/New_York',\n  },\n\n  dek: {\n    selectors: ['h2.article-subhead'],\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  content: {\n    selectors: [['div.article-body']],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {},\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: ['aside'],\n  },\n};\n","export const MoneyCnnComExtractor = {\n  domain: 'money.cnn.com',\n\n  title: {\n    selectors: ['.article-title'],\n  },\n\n  author: {\n    selectors: [['meta[name=\"author\"]', 'value'], '.byline a'],\n  },\n\n  date_published: {\n    selectors: [['meta[name=\"date\"]', 'value']],\n\n    timezone: 'GMT',\n  },\n\n  dek: {\n    selectors: ['#storytext h2'],\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  content: {\n    selectors: ['#storytext'],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {},\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: ['.inStoryHeading'],\n  },\n};\n","export const WwwThevergeComExtractor = {\n  domain: 'www.theverge.com',\n\n  supportedDomains: ['www.polygon.com'],\n\n  title: {\n    selectors: ['h1'],\n  },\n\n  author: {\n    selectors: [['meta[name=\"author\"]', 'value']],\n  },\n\n  date_published: {\n    selectors: [['meta[name=\"article:published_time\"]', 'value']],\n  },\n\n  dek: {\n    selectors: ['.p-dek'],\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  content: {\n    selectors: [\n      // feature template multi-match\n      ['.c-entry-hero .e-image', '.c-entry-intro', '.c-entry-content'],\n      // regular post multi-match\n      ['.e-image--hero', '.c-entry-content'],\n      // feature template fallback\n      '.l-wrapper .l-feature',\n      // regular post fallback\n      'div.c-entry-content',\n    ],\n\n    // Transform lazy-loaded images\n    transforms: {\n      noscript: $node => {\n        const $children = $node.children();\n        if ($children.length === 1 && $children.get(0).tagName === 'img') {\n          return 'span';\n        }\n\n        return null;\n      },\n    },\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: [\n      '.aside',\n      'img.c-dynamic-image', // images come from noscript transform\n    ],\n  },\n};\n","export const WwwCnnComExtractor = {\n  domain: 'www.cnn.com',\n\n  title: {\n    selectors: ['h1.pg-headline', 'h1'],\n  },\n\n  author: {\n    selectors: [['meta[name=\"author\"]', 'value']],\n  },\n\n  date_published: {\n    selectors: [['meta[name=\"article:published_time\"]', 'value']],\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  content: {\n    selectors: [\n      // a more specific selector to grab the lead image and the body\n      ['.media__video--thumbnail', '.zn-body-text'],\n      // a fallback for the above\n      '.zn-body-text',\n      'div[itemprop=\"articleBody\"]',\n    ],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {\n      '.zn-body__paragraph, .el__leafmedia--sourced-paragraph': $node => {\n        const $text = $node.html();\n        if ($text) {\n          return 'p';\n        }\n\n        return null;\n      },\n\n      // this transform cleans the short, all-link sections linking\n      // to related content but not marked as such in any way.\n      '.zn-body__paragraph': $node => {\n        if ($node.has('a')) {\n          if (\n            $node.text().trim() ===\n            $node\n              .find('a')\n              .text()\n              .trim()\n          ) {\n            $node.remove();\n          }\n        }\n      },\n\n      '.media__video--thumbnail': 'figure',\n    },\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: [],\n  },\n};\n","export const WwwAolComExtractor = {\n  domain: 'www.aol.com',\n\n  title: {\n    selectors: ['h1.p-article__title'],\n  },\n\n  author: {\n    selectors: [['meta[name=\"author\"]', 'value']],\n  },\n\n  date_published: {\n    selectors: ['.p-article__byline__date'],\n\n    timezone: 'America/New_York',\n  },\n\n  dek: {\n    selectors: [\n      // enter selectors\n    ],\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  content: {\n    selectors: ['.article-content'],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {},\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: [],\n  },\n};\n","export const WwwYoutubeComExtractor = {\n  domain: 'www.youtube.com',\n\n  title: {\n    selectors: [\n      ['meta[name=\"title\"]', 'value'],\n      '.watch-title',\n      'h1.watch-title-container',\n    ],\n  },\n\n  author: {\n    selectors: [['link[itemprop=\"name\"]', 'content'], '.yt-user-info'],\n  },\n\n  date_published: {\n    selectors: [['meta[itemProp=\"datePublished\"]', 'value']],\n\n    timezone: 'GMT',\n  },\n\n  dek: {\n    selectors: [\n      // enter selectors\n    ],\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  content: {\n    defaultCleaner: false,\n\n    selectors: [\n      '#player-container-outer',\n      'ytd-expandable-video-description-body-renderer #description',\n      ['#player-api', '#description'],\n    ],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {\n      '#player-api': ($node, $) => {\n        const videoId = $('meta[itemProp=\"videoId\"]').attr('value');\n        $node.html(`\n          <iframe src=\"https://www.youtube.com/embed/${videoId}\" frameborder=\"0\" allowfullscreen></iframe>`);\n      },\n      '#player-container-outer': ($node, $) => {\n        const videoId = $('meta[itemProp=\"videoId\"]').attr('value');\n        const description = $('meta[itemProp=\"description\"]').attr('value');\n        $node.html(`\n        <iframe src=\"https://www.youtube.com/embed/${videoId}\" frameborder=\"0\" allowfullscreen></iframe>\n        <div><span>${description}</span></div>`);\n      },\n    },\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: [],\n  },\n};\n","export const WwwTheguardianComExtractor = {\n  domain: 'www.theguardian.com',\n\n  title: {\n    selectors: ['h1', '.content__headline'],\n  },\n\n  author: {\n    selectors: ['address[data-link-name=\"byline\"]', 'p.byline'],\n  },\n\n  date_published: {\n    selectors: [['meta[name=\"article:published_time\"]', 'value']],\n  },\n\n  dek: {\n    selectors: ['div[data-gu-name=\"standfirst\"]', '.content__standfirst'],\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  content: {\n    selectors: ['#maincontent', '.content__article-body'],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {},\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: ['.hide-on-mobile', '.inline-icon'],\n  },\n};\n","export const WwwSbnationComExtractor = {\n  domain: 'www.sbnation.com',\n\n  title: {\n    selectors: ['h1.c-page-title'],\n  },\n\n  author: {\n    selectors: [['meta[name=\"author\"]', 'value']],\n  },\n\n  date_published: {\n    selectors: [['meta[name=\"article:published_time\"]', 'value']],\n  },\n\n  dek: {\n    selectors: ['p.c-entry-summary.p-dek', 'h2.c-entry-summary.p-dek'],\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  content: {\n    selectors: ['div.c-entry-content'],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {},\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: [],\n  },\n};\n","export const WwwBloombergComExtractor = {\n  domain: 'www.bloomberg.com',\n\n  title: {\n    selectors: [\n      // normal articles\n      '.lede-headline',\n\n      // /graphics/ template\n      'h1.article-title',\n\n      // /news/ template\n      'h1[class^=\"headline\"]',\n      'h1.lede-text-only__hed',\n    ],\n  },\n\n  author: {\n    selectors: [\n      ['meta[name=\"parsely-author\"]', 'value'],\n      '.byline-details__link',\n\n      // /graphics/ template\n      '.bydek',\n\n      // /news/ template\n      '.author',\n      'p[class*=\"author\"]',\n    ],\n  },\n\n  date_published: {\n    selectors: [\n      ['time.published-at', 'datetime'],\n      ['time[datetime]', 'datetime'],\n      ['meta[name=\"date\"]', 'value'],\n      ['meta[name=\"parsely-pub-date\"]', 'value'],\n      ['meta[name=\"parsely-pub-date\"]', 'content'],\n    ],\n  },\n\n  dek: {\n    selectors: [],\n  },\n\n  lead_image_url: {\n    selectors: [\n      ['meta[name=\"og:image\"]', 'value'],\n      ['meta[name=\"og:image\"]', 'content'],\n    ],\n  },\n\n  content: {\n    selectors: [\n      '.article-body__content',\n      '.body-content',\n\n      // /graphics/ template\n      ['section.copy-block'],\n\n      // /news/ template\n      '.body-copy',\n    ],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {},\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: ['.inline-newsletter', '.page-ad'],\n  },\n};\n","export const WwwBustleComExtractor = {\n  domain: 'www.bustle.com',\n\n  title: {\n    selectors: ['h1', 'h1.post-page__title'],\n  },\n\n  author: {\n    selectors: ['a[href*=\"profile\"]', 'div.content-meta__author'],\n  },\n\n  date_published: {\n    selectors: [['time', 'datetime']],\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  content: {\n    selectors: ['article', '.post-page__body'],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {},\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: [],\n  },\n};\n","export const WwwNprOrgExtractor = {\n  domain: 'www.npr.org',\n\n  title: {\n    selectors: ['h1', '.storytitle'],\n  },\n\n  author: {\n    selectors: ['p.byline__name.byline__name--block'],\n  },\n\n  date_published: {\n    selectors: [\n      ['.dateblock time[datetime]', 'datetime'],\n      ['meta[name=\"date\"]', 'value'],\n    ],\n  },\n\n  lead_image_url: {\n    selectors: [\n      ['meta[name=\"og:image\"]', 'value'],\n      ['meta[name=\"twitter:image:src\"]', 'value'],\n    ],\n  },\n\n  content: {\n    selectors: ['.storytext'],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {\n      '.bucketwrap.image': 'figure',\n      '.bucketwrap.image .credit-caption': 'figcaption',\n    },\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: ['div.enlarge_measure'],\n  },\n};\n","export const WwwRecodeNetExtractor = {\n  domain: 'www.recode.net',\n\n  title: {\n    selectors: ['h1.c-page-title'],\n  },\n\n  author: {\n    selectors: [['meta[name=\"author\"]', 'value']],\n  },\n\n  date_published: {\n    selectors: [['meta[name=\"article:published_time\"]', 'value']],\n  },\n\n  dek: {\n    selectors: ['h2.c-entry-summary.p-dek'],\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  content: {\n    selectors: [\n      ['figure.e-image--hero', '.c-entry-content'],\n      '.c-entry-content',\n    ],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {},\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: [],\n  },\n};\n","export const QzComExtractor = {\n  domain: 'qz.com',\n\n  title: {\n    selectors: ['article header h1'],\n  },\n\n  author: {\n    selectors: [['meta[name=\"author\"]', 'value']],\n  },\n\n  date_published: {\n    selectors: [\n      ['meta[name=\"article:published_time\"]', 'value'],\n      ['time[datetime]', 'datetime'],\n    ],\n  },\n\n  lead_image_url: {\n    selectors: [\n      ['meta[name=\"og:image\"]', 'value'],\n      ['meta[property=\"og:image\"]', 'content'],\n      ['meta[name=\"twitter:image\"]', 'content'],\n    ],\n  },\n\n  content: {\n    selectors: ['#article-content'],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {},\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: [],\n  },\n};\n","export const WwwDmagazineComExtractor = {\n  domain: 'www.dmagazine.com',\n\n  title: {\n    selectors: ['h1.story__title'],\n  },\n\n  author: {\n    selectors: ['.story__info .story__info__item:first-child'],\n  },\n\n  date_published: {\n    selectors: [\n      // enter selectors\n      '.story__info',\n    ],\n\n    timezone: 'America/Chicago',\n    format: 'MMMM D, YYYY h:mm a',\n  },\n\n  dek: {\n    selectors: ['.story__subhead'],\n  },\n\n  lead_image_url: {\n    selectors: [['article figure a:first-child', 'href']],\n  },\n\n  content: {\n    selectors: ['.story__content'],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {},\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: [],\n  },\n};\n","export const WwwReutersComExtractor = {\n  domain: 'www.reuters.com',\n\n  title: {\n    selectors: ['h1[class*=\"ArticleHeader-headline-\"]', 'h1.article-headline'],\n  },\n\n  author: {\n    selectors: [['meta[name=\"og:article:author\"]', 'value'], '.author'],\n  },\n\n  date_published: {\n    selectors: [['meta[name=\"og:article:published_time\"]', 'value']],\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  content: {\n    selectors: ['div.ArticleBodyWrapper', '#article-text'],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {\n      '.article-subtitle': 'h4',\n    },\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: [\n      'div[class^=\"ArticleBody-byline-container-\"]',\n      '#article-byline .author',\n    ],\n  },\n};\n","export const MashableComExtractor = {\n  domain: 'mashable.com',\n\n  title: {\n    selectors: ['header h1', 'h1.title'],\n  },\n\n  author: {\n    selectors: [['meta[name=\"article:author\"]', 'value'], 'span.author_name a'],\n  },\n\n  date_published: {\n    selectors: [['meta[name=\"article:published_time\"]', 'value']],\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  content: {\n    selectors: ['#article', 'section.article-content.blueprint'],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {\n      '.image-credit': 'figcaption',\n    },\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: [],\n  },\n};\n","export const WwwChicagotribuneComExtractor = {\n  domain: 'www.chicagotribune.com',\n\n  title: {\n    selectors: [['meta[name=\"og:title\"]', 'value']],\n  },\n\n  author: {\n    selectors: ['div.article_byline span:first-of-type'],\n  },\n\n  date_published: {\n    selectors: ['time'],\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  content: {\n    selectors: ['article'],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {},\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: [],\n  },\n};\n","export const WwwVoxComExtractor = {\n  domain: 'www.vox.com',\n\n  title: {\n    selectors: ['h1.c-page-title'],\n  },\n\n  author: {\n    selectors: [['meta[name=\"author\"]', 'value']],\n  },\n\n  date_published: {\n    selectors: [['meta[name=\"article:published_time\"]', 'value']],\n  },\n\n  dek: {\n    selectors: ['.p-dek'],\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  content: {\n    selectors: [\n      ['figure.e-image--hero', '.c-entry-content'],\n      '.c-entry-content',\n    ],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {\n      'figure .e-image__image noscript': $node => {\n        const imgHtml = $node.html();\n        $node\n          .parents('.e-image__image')\n          .find('.c-dynamic-image')\n          .replaceWith(imgHtml);\n      },\n\n      'figure .e-image__meta': 'figcaption',\n    },\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: [],\n  },\n};\n","export const NewsNationalgeographicComExtractor = {\n  domain: 'news.nationalgeographic.com',\n\n  title: {\n    selectors: ['h1', 'h1.main-title'],\n  },\n\n  author: {\n    selectors: ['.byline-component__contributors b span'],\n  },\n\n  date_published: {\n    selectors: [['meta[name=\"article:published_time\"]', 'value']],\n    format: 'ddd MMM DD HH:mm:ss zz YYYY',\n    timezone: 'EST',\n  },\n\n  dek: {\n    selectors: ['.article__deck'],\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  content: {\n    selectors: [['.parsys.content', '.__image-lead__'], '.content'],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {\n      '.parsys.content': ($node, $) => {\n        const $imgSrc = $node\n          .find('.image.parbase.section')\n          .find('.picturefill')\n          .first()\n          .data('platform-src');\n        if ($imgSrc) {\n          $node.prepend($(`<img class=\"__image-lead__\" src=\"${$imgSrc}\"/>`));\n        }\n      },\n    },\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: ['.pull-quote.pull-quote--large'],\n  },\n};\n","export const WwwNationalgeographicComExtractor = {\n  domain: 'www.nationalgeographic.com',\n\n  title: {\n    selectors: ['h1', 'h1.main-title'],\n  },\n\n  author: {\n    selectors: ['.byline-component__contributors b span'],\n  },\n\n  date_published: {\n    selectors: [['meta[name=\"article:published_time\"]', 'value']],\n  },\n\n  dek: {\n    selectors: ['.Article__Headline__Desc', '.article__deck'],\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  content: {\n    selectors: [\n      'section.Article__Content',\n      ['.parsys.content', '.__image-lead__'],\n      '.content',\n    ],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {\n      '.parsys.content': ($node, $) => {\n        const $imageParent = $node.children().first();\n        if ($imageParent.hasClass('imageGroup')) {\n          const $dataAttrContainer = $imageParent\n            .find('.media--medium__container')\n            .children()\n            .first();\n          const imgPath1 = $dataAttrContainer.data('platform-image1-path');\n          const imgPath2 = $dataAttrContainer.data('platform-image2-path');\n          if (imgPath2 && imgPath1) {\n            $node.prepend(\n              $(`<div class=\"__image-lead__\">\n                <img src=\"${imgPath1}\"/>\n                <img src=\"${imgPath2}\"/>\n              </div>`)\n            );\n          }\n        } else {\n          const $imgSrc = $node\n            .find('.image.parbase.section')\n            .find('.picturefill')\n            .first()\n            .data('platform-src');\n          if ($imgSrc) {\n            $node.prepend($(`<img class=\"__image-lead__\" src=\"${$imgSrc}\"/>`));\n          }\n        }\n      },\n    },\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: ['.pull-quote.pull-quote--small'],\n  },\n};\n","export const WwwLatimesComExtractor = {\n  domain: 'www.latimes.com',\n\n  title: {\n    selectors: ['h1.headline', '.trb_ar_hl'],\n  },\n\n  author: {\n    selectors: [\n      'a[data-click=\"standardBylineAuthorName\"]',\n      ['meta[name=\"author\"]', 'value'],\n    ],\n  },\n\n  date_published: {\n    selectors: [\n      ['meta[name=\"article:published_time\"]', 'value'],\n      ['meta[itemprop=\"datePublished\"]', 'value'],\n    ],\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  content: {\n    selectors: ['.page-article-body', '.trb_ar_main'],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {\n      '.trb_ar_la': $node => {\n        const $figure = $node.find('figure');\n        $node.replaceWith($figure);\n      },\n    },\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: ['.trb_ar_by', '.trb_ar_cr'],\n  },\n};\n","export const PagesixComExtractor = {\n  domain: 'pagesix.com',\n\n  supportedDomains: ['nypost.com'],\n\n  title: {\n    selectors: [['meta[name=\"og:title\"]', 'value']],\n  },\n\n  author: {\n    selectors: ['.byline'],\n  },\n\n  date_published: {\n    selectors: [['meta[name=\"article:published_time\"]', 'value']],\n  },\n\n  dek: {\n    selectors: [['meta[name=\"description\"]', 'value']],\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  content: {\n    selectors: [\n      ['#featured-image-wrapper', '.entry-content'],\n      '.entry-content',\n    ],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {\n      '#featured-image-wrapper': 'figure',\n      '.wp-caption-text': 'figcaption',\n    },\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: ['.modal-trigger'],\n  },\n};\n","export const ThefederalistpapersOrgExtractor = {\n  domain: 'thefederalistpapers.org',\n\n  title: {\n    selectors: ['h1.entry-title'],\n  },\n\n  author: {\n    selectors: ['.author-meta-title', 'main span.entry-author-name'],\n  },\n\n  date_published: {\n    selectors: [['meta[name=\"article:published_time\"]', 'value']],\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  content: {\n    selectors: ['.content'],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {},\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: [\n      'header',\n      '.article-sharing',\n      '.after-article',\n      '.type-commenting',\n      '.more-posts',\n      ['p[style]'],\n    ],\n  },\n};\n","export const WwwCbssportsComExtractor = {\n  domain: 'www.cbssports.com',\n\n  title: {\n    selectors: ['.Article-headline', '.article-headline'],\n  },\n\n  author: {\n    selectors: ['.ArticleAuthor-nameText', '.author-name'],\n  },\n\n  date_published: {\n    selectors: [['meta[itemprop=\"datePublished\"]', 'value']],\n    timezone: 'UTC',\n  },\n\n  dek: {\n    selectors: ['.Article-subline', '.article-subline'],\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  content: {\n    selectors: ['.article'],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {},\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: [],\n  },\n};\n","export const WwwMsnbcComExtractor = {\n  domain: 'www.msnbc.com',\n\n  title: {\n    selectors: ['h1', 'h1.is-title-pane'],\n  },\n\n  author: {\n    selectors: ['.byline-name', '.author'],\n  },\n\n  date_published: {\n    selectors: [\n      ['meta[itemprop=\"datePublished\"]', 'value'],\n      ['meta[name=\"DC.date.issued\"]', 'value'],\n    ],\n  },\n\n  dek: {\n    selectors: [['meta[name=\"description\"]', 'value']],\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  content: {\n    selectors: ['.article-body__content', '.pane-node-body'],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {\n      '.pane-node-body': ($node, $) => {\n        const [\n          selector,\n          attr,\n        ] = WwwMsnbcComExtractor.lead_image_url.selectors[0];\n        const src = $(selector).attr(attr);\n        if (src) {\n          $node.prepend(`<img src=\"${src}\" />`);\n        }\n      },\n    },\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: [],\n  },\n};\n","export const WwwThepoliticalinsiderComExtractor = {\n  domain: 'www.thepoliticalinsider.com',\n\n  title: {\n    selectors: [['meta[name=\"sailthru.title\"]', 'value']],\n  },\n\n  author: {\n    selectors: [['meta[name=\"sailthru.author\"]', 'value']],\n  },\n\n  date_published: {\n    selectors: [['meta[name=\"sailthru.date\"]', 'value']],\n    timezone: 'America/New_York',\n  },\n\n  dek: {\n    selectors: [\n      // enter selectors\n    ],\n  },\n\n  lead_image_url: {\n    selectors: [\n      ['meta[name=\"og:image\"]', 'value'], // enter selectors\n    ],\n  },\n\n  content: {\n    selectors: ['div#article-body'],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {},\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: [],\n  },\n};\n","export const WwwMentalflossComExtractor = {\n  domain: 'www.mentalfloss.com',\n\n  title: {\n    selectors: [\n      ['meta[name=\"og:title\"]', 'value'],\n      'h1.title',\n      '.title-group',\n      '.inner',\n    ],\n  },\n\n  author: {\n    selectors: [\n      'a[data-vars-label*=\"authors\"]',\n      '.field-name-field-enhanced-authors',\n    ],\n  },\n\n  date_published: {\n    selectors: [\n      ['meta[name=\"article:published_time\"]', 'value'],\n      '.date-display-single',\n    ],\n    timezone: 'America/New_York',\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  content: {\n    selectors: ['article main', 'div.field.field-name-body'],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {},\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: ['small'],\n  },\n};\n","export const AbcnewsGoComExtractor = {\n  domain: 'abcnews.go.com',\n\n  title: {\n    selectors: ['div[class*=\"Article_main__body\"] h1', '.article-header h1'],\n  },\n\n  author: {\n    selectors: ['.ShareByline span:nth-child(2)', '.authors'],\n    clean: ['.author-overlay', '.by-text'],\n  },\n\n  date_published: {\n    selectors: ['.ShareByline', '.timestamp'],\n    format: 'MMMM D, YYYY h:mm a',\n    timezone: 'America/New_York',\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  content: {\n    selectors: ['article', '.article-copy'],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {},\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: [],\n  },\n};\n","export const WwwNydailynewsComExtractor = {\n  domain: 'www.nydailynews.com',\n\n  title: {\n    selectors: ['h1.headline', 'h1#ra-headline'],\n  },\n\n  author: {\n    selectors: [\n      '.article_byline span',\n      ['meta[name=\"parsely-author\"]', 'value'],\n    ],\n  },\n\n  date_published: {\n    selectors: ['time', ['meta[name=\"sailthru.date\"]', 'value']],\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  content: {\n    selectors: ['article', 'article#ra-body'],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {},\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: ['dl#ra-tags', '.ra-related', 'a.ra-editor', 'dl#ra-share-bottom'],\n  },\n};\n","export const WwwCnbcComExtractor = {\n  domain: 'www.cnbc.com',\n\n  title: {\n    selectors: ['h1.title', 'h1.ArticleHeader-headline'],\n  },\n\n  author: {\n    selectors: [['meta[name=\"author\"]', 'value']],\n  },\n\n  date_published: {\n    selectors: [['meta[name=\"article:published_time\"]', 'value']],\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  content: {\n    selectors: [\n      'div#article_body.content',\n      'div.story',\n      'div.ArticleBody-articleBody',\n    ],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {},\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: [],\n  },\n};\n","export const WwwPopsugarComExtractor = {\n  domain: 'www.popsugar.com',\n\n  title: {\n    selectors: ['h2.post-title', 'title-text'],\n  },\n\n  author: {\n    selectors: [['meta[name=\"article:author\"]', 'value']],\n  },\n\n  date_published: {\n    selectors: [['meta[name=\"article:published_time\"]', 'value']],\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  content: {\n    selectors: ['#content'],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {},\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: ['.share-copy-title', '.post-tags', '.reactions'],\n  },\n};\n","export const ObserverComExtractor = {\n  domain: 'observer.com',\n\n  title: {\n    selectors: ['h1.entry-title'],\n  },\n\n  author: {\n    selectors: ['.author', '.vcard'],\n  },\n\n  date_published: {\n    selectors: [['meta[name=\"article:published_time\"]', 'value']],\n  },\n\n  dek: {\n    selectors: ['h2.dek'],\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  content: {\n    selectors: ['div.entry-content'],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {},\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: [],\n  },\n};\n","export const PeopleComExtractor = {\n  domain: 'people.com',\n\n  title: {\n    selectors: ['.article-header h1', ['meta[name=\"og:title\"]', 'value']],\n  },\n\n  author: {\n    selectors: [['meta[name=\"sailthru.author\"]', 'value'], 'a.author.url.fn'],\n  },\n\n  date_published: {\n    selectors: [\n      '.mntl-attribution__item-date',\n      ['meta[name=\"article:published_time\"]', 'value'],\n    ],\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  dek: {\n    selectors: ['.article-header h2'],\n  },\n\n  content: {\n    selectors: ['div[class^=\"loc article-content\"]', 'div.article-body__inner'],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {},\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: [],\n  },\n};\n","export const WwwUsmagazineComExtractor = {\n  domain: 'www.usmagazine.com',\n\n  title: {\n    selectors: ['header h1'],\n  },\n\n  author: {\n    selectors: ['a.author', 'a.article-byline.tracked-offpage'],\n  },\n\n  date_published: {\n    timezone: 'America/New_York',\n\n    selectors: [['meta[name=\"article:published_time\"]', 'value']],\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  content: {\n    selectors: ['div.article-content'],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {},\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: ['.module-related'],\n  },\n};\n","export const WwwRollingstoneComExtractor = {\n  domain: 'www.rollingstone.com',\n\n  title: {\n    selectors: ['h1.l-article-header__row--title', 'h1.content-title'],\n  },\n\n  author: {\n    selectors: ['a.c-byline__link', 'a.content-author.tracked-offpage'],\n  },\n\n  date_published: {\n    selectors: [\n      ['meta[name=\"article:published_time\"]', 'value'],\n      'time.content-published-date',\n    ],\n\n    timezone: 'America/New_York',\n  },\n\n  dek: {\n    selectors: ['h2.l-article-header__row--lead', '.content-description'],\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  content: {\n    selectors: [\n      '.l-article-content',\n      ['.lead-container', '.article-content'],\n      '.article-content',\n    ],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {},\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: ['.c-related-links-wrapper', '.module-related'],\n  },\n};\n","export const twofortysevensportsComExtractor = {\n  domain: '247sports.com',\n\n  title: {\n    selectors: ['title', 'article header h1'],\n  },\n\n  author: {\n    selectors: ['.article-cnt__author', '.author'],\n  },\n\n  date_published: {\n    selectors: [['time[data-published]', 'data-published']],\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  content: {\n    selectors: ['.article-body', 'section.body.article'],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {},\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: [],\n  },\n};\n","export const UproxxComExtractor = {\n  domain: 'uproxx.com',\n\n  title: {\n    selectors: ['div.entry-header h1'],\n  },\n\n  author: {\n    selectors: [['meta[name=\"qc:author\"]', 'value']],\n  },\n\n  date_published: {\n    selectors: [['meta[name=\"article:published_time\"]', 'value']],\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  content: {\n    selectors: ['.entry-content'],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {\n      'div.image': 'figure',\n      'div.image .wp-media-credit': 'figcaption',\n    },\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: [],\n  },\n};\n","export const WwwEonlineComExtractor = {\n  domain: 'www.eonline.com',\n\n  title: {\n    selectors: ['h1.article-detail__title', 'h1.article__title'],\n  },\n\n  author: {\n    selectors: ['.article-detail__meta__author', '.entry-meta__author a'],\n  },\n\n  date_published: {\n    selectors: [\n      ['meta[name=\"article:published_time\"]', 'value'],\n      ['meta[itemprop=\"datePublished\"]', 'value'],\n    ],\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  content: {\n    selectors: [\n      ['.article-detail__main-content section'],\n      ['.post-content section, .post-content div.post-content__image'],\n    ],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {\n      'div.post-content__image': 'figure',\n      'div.post-content__image .image__credits': 'figcaption',\n    },\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: [],\n  },\n};\n","export const WwwMiamiheraldComExtractor = {\n  domain: 'www.miamiherald.com',\n\n  title: {\n    selectors: ['h1.title'],\n  },\n\n  date_published: {\n    selectors: ['p.published-date'],\n\n    timezone: 'America/New_York',\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  content: {\n    selectors: ['div.dateline-storybody'],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {},\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: [],\n  },\n};\n","export const WwwRefinery29ComExtractor = {\n  domain: 'www.refinery29.com',\n\n  title: {\n    selectors: ['h1.title'],\n  },\n\n  author: {\n    selectors: ['.contributor'],\n  },\n\n  date_published: {\n    selectors: [['meta[name=\"sailthru.date\"]', 'value']],\n\n    timezone: 'America/New_York',\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  content: {\n    selectors: [\n      ['.full-width-opener', '.article-content'],\n      '.article-content',\n      '.body',\n    ],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {\n      'div.loading noscript': $node => {\n        const imgHtml = $node.html();\n        $node.parents('.loading').replaceWith(imgHtml);\n      },\n\n      '.section-image': 'figure',\n\n      '.section-image .content-caption': 'figcaption',\n\n      '.section-text': 'p',\n    },\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: ['.story-share'],\n  },\n};\n","export const WwwMacrumorsComExtractor = {\n  domain: 'www.macrumors.com',\n\n  title: {\n    selectors: ['h1', 'h1.title'],\n  },\n\n  author: {\n    selectors: ['article a[rel=\"author\"]', '.author-url'],\n  },\n\n  date_published: {\n    selectors: [['time', 'datetime']],\n\n    timezone: 'America/Los_Angeles',\n  },\n\n  dek: {\n    selectors: [['meta[name=\"description\"]', 'value']],\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  content: {\n    selectors: ['article', '.article'],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {},\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: [],\n  },\n};\n","export const WwwAndroidcentralComExtractor = {\n  domain: 'www.androidcentral.com',\n\n  title: {\n    selectors: ['h1', 'h1.main-title'],\n  },\n\n  author: {\n    selectors: [['meta[name=\"parsely-author\"]', 'value']],\n  },\n\n  date_published: {\n    selectors: [['meta[name=\"article:published_time\"]', 'value']],\n  },\n\n  dek: {\n    selectors: [['meta[name=\"description\"]', 'value']],\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  content: {\n    selectors: ['#article-body'],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {},\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: ['.intro', 'blockquote'],\n  },\n};\n","export const WwwSiComExtractor = {\n  domain: 'www.si.com',\n\n  title: {\n    selectors: ['h1', 'h1.headline'],\n  },\n\n  author: {\n    selectors: [['meta[name=\"author\"]', 'value']],\n  },\n\n  date_published: {\n    selectors: [['meta[name=\"published\"]', 'value']],\n\n    timezone: 'America/New_York',\n  },\n\n  dek: {\n    selectors: ['.m-detail-header--dek'],\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  content: {\n    selectors: [\n      '.m-detail--body',\n      ['p', '.marquee_large_2x', '.component.image'],\n    ],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {\n      noscript: $node => {\n        const $children = $node.children();\n        if ($children.length === 1 && $children.get(0).tagName === 'img') {\n          return 'figure';\n        }\n\n        return null;\n      },\n    },\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: [\n      ['.inline-thumb', '.primary-message', '.description', '.instructions'],\n    ],\n  },\n};\n","export const WwwRawstoryComExtractor = {\n  domain: 'www.rawstory.com',\n\n  title: {\n    selectors: [['meta[name=\"og:title\"]', 'value'], '.blog-title'],\n  },\n\n  author: {\n    selectors: [\n      'div.main-post-head .social-author__name',\n      '.blog-author a:first-of-type',\n    ],\n  },\n\n  date_published: {\n    selectors: [\n      ['meta[name=\"article:published_time\"]', 'value'],\n      '.blog-author a:last-of-type',\n    ],\n\n    timezone: 'EST',\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  content: {\n    selectors: ['.post-body', '.blog-content'],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {},\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: [],\n  },\n};\n","export const WwwCnetComExtractor = {\n  domain: 'www.cnet.com',\n\n  title: {\n    selectors: [['meta[name=\"og:title\"]', 'value']],\n  },\n\n  author: {\n    selectors: ['span.author', 'a.author'],\n  },\n\n  date_published: {\n    selectors: ['time'],\n\n    timezone: 'America/Los_Angeles',\n  },\n\n  dek: {\n    selectors: ['.c-head_dek', '.article-dek'],\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  content: {\n    selectors: [\n      ['img.__image-lead__', '.article-main-body'],\n      '.article-main-body',\n    ],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {\n      'figure.image': $node => {\n        const $img = $node.find('img');\n        $img.attr('width', '100%');\n        $img.attr('height', '100%');\n        $img.addClass('__image-lead__');\n        $node.remove('.imgContainer').prepend($img);\n      },\n    },\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: [],\n  },\n};\n","export const WwwTodayComExtractor = {\n  domain: 'www.today.com',\n\n  title: {\n    selectors: ['h1.article-hero-headline__htag', 'h1.entry-headline'],\n  },\n\n  author: {\n    selectors: ['span.byline-name', ['meta[name=\"author\"]', 'value']],\n  },\n\n  date_published: {\n    selectors: ['time[datetime]', ['meta[name=\"DC.date.issued\"]', 'value']],\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  content: {\n    selectors: ['div.article-body__content', '.entry-container'],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {},\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: ['.label-comment'],\n  },\n};\n","export const WwwAlComExtractor = {\n  domain: 'www.al.com',\n\n  title: {\n    selectors: [['meta[name=\"title\"]', 'value']],\n  },\n\n  author: {\n    selectors: [['meta[name=\"article_author\"]', 'value']],\n  },\n\n  date_published: {\n    selectors: [['meta[name=\"article_date_original\"]', 'value']],\n    timezone: 'EST',\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  content: {\n    selectors: ['.entry-content'],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {},\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: [],\n  },\n};\n","export const WwwThepennyhoarderComExtractor = {\n  domain: 'www.thepennyhoarder.com',\n\n  title: {\n    selectors: [['meta[name=\"dcterms.title\"]', 'value']],\n  },\n\n  author: {\n    selectors: [['link[rel=\"author\"]', 'title']],\n  },\n\n  date_published: {\n    selectors: [['meta[name=\"article:published_time\"]', 'value']],\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  content: {\n    selectors: [\n      ['.post-img', '.post-text'],\n      '.post-text',\n      '.single-post-content-inner',\n    ],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {},\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: [],\n  },\n};\n","export const WwwWesternjournalismComExtractor = {\n  domain: 'www.westernjournalism.com',\n\n  title: {\n    selectors: ['title', 'h1.entry-title'],\n  },\n\n  author: {\n    selectors: [['meta[name=\"author\"]', 'value']],\n  },\n\n  date_published: {\n    selectors: [['meta[name=\"DC.date.issued\"]', 'value']],\n  },\n\n  dek: {\n    selectors: ['.subtitle'],\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  content: {\n    selectors: ['div.article-sharing.top + div'],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {},\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: ['.ad-notice-small'],\n  },\n};\n","export const WwwAmericanowComExtractor = {\n  domain: 'www.americanow.com',\n\n  title: {\n    selectors: ['.title', ['meta[name=\"title\"]', 'value']],\n  },\n\n  author: {\n    selectors: ['.byline'],\n  },\n\n  date_published: {\n    selectors: [['meta[name=\"publish_date\"]', 'value']],\n  },\n\n  dek: {\n    selectors: [\n      // enter selectors\n    ],\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  content: {\n    selectors: [['.article-content', '.image', '.body'], '.body'],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {},\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: ['.article-video-wrapper', '.show-for-small-only'],\n  },\n};\n","export const ScienceflyComExtractor = {\n  domain: 'sciencefly.com',\n\n  title: {\n    selectors: ['.entry-title', '.cb-entry-title', '.cb-single-title'],\n  },\n\n  author: {\n    selectors: ['div.cb-author', 'div.cb-author-title'],\n  },\n\n  date_published: {\n    selectors: [['meta[name=\"article:published_time\"]', 'value']],\n  },\n\n  dek: {\n    selectors: [\n      // enter selectors\n    ],\n  },\n\n  lead_image_url: {\n    selectors: [['div.theiaPostSlider_slides img', 'src']],\n  },\n\n  content: {\n    selectors: ['div.theiaPostSlider_slides'],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {},\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: [],\n  },\n};\n","export const HellogigglesComExtractor = {\n  domain: 'hellogiggles.com',\n\n  title: {\n    selectors: [['meta[name=\"og:title\"]', 'value'], '.title'],\n  },\n\n  author: {\n    selectors: ['.byline-wrapper span.author_name', '.author-link'],\n  },\n\n  date_published: {\n    selectors: [\n      ['meta[property=\"article:published_time\"]', 'content'],\n      ['meta[name=\"article:published_time\"]', 'value'],\n    ],\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  content: {\n    selectors: ['.main-content', '.entry-content'],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {},\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: [],\n  },\n};\n","export const ThoughtcatalogComExtractor = {\n  domain: 'thoughtcatalog.com',\n\n  title: {\n    selectors: ['h1.title', ['meta[name=\"og:title\"]', 'value']],\n  },\n\n  author: {\n    selectors: [\n      'cite a',\n      'div.col-xs-12.article_header div.writer-container.writer-container-inline.writer-no-avatar h4.writer-name',\n      'h1.writer-name',\n    ],\n  },\n\n  date_published: {\n    selectors: [['meta[name=\"article:published_time\"]', 'value']],\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  content: {\n    selectors: ['.entry.post'],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {},\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: ['.tc_mark', 'figcaption'],\n  },\n};\n","export const WwwInquisitrComExtractor = {\n  domain: 'www.inquisitr.com',\n\n  title: {\n    selectors: ['h1.entry-title.story--header--title'],\n  },\n\n  author: {\n    selectors: ['div.story--header--author'],\n  },\n\n  date_published: {\n    selectors: [['meta[name=\"datePublished\"]', 'value']],\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  content: {\n    selectors: ['article.story', '.entry-content.'],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {},\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: [\n      '.post-category',\n      '.story--header--socials',\n      '.story--header--content',\n    ],\n  },\n};\n","export const WwwNbcnewsComExtractor = {\n  domain: 'www.nbcnews.com',\n\n  title: {\n    selectors: ['div.article-hero-headline h1', 'div.article-hed h1'],\n  },\n\n  author: {\n    selectors: [\n      'div.article-inline-byline span.byline-name',\n      'span.byline_author',\n    ],\n  },\n\n  date_published: {\n    selectors: [\n      ['meta[name=\"article:published\"]', 'value'],\n      ['.flag_article-wrapper time.timestamp_article[datetime]', 'datetime'],\n      '.flag_article-wrapper time',\n    ],\n\n    timezone: 'America/New_York',\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  content: {\n    selectors: ['div.article-body__content', 'div.article-body'],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {},\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: [],\n  },\n};\n","export const FortuneComExtractor = {\n  domain: 'fortune.com',\n\n  title: {\n    selectors: ['h1'],\n  },\n\n  author: {\n    selectors: [['meta[name=\"author\"]', 'value']],\n  },\n\n  date_published: {\n    selectors: ['.MblGHNMJ'],\n\n    timezone: 'UTC',\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  content: {\n    selectors: [['picture', 'article.row'], 'article.row'],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {},\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: [],\n  },\n};\n","export const WwwLinkedinComExtractor = {\n  domain: 'www.linkedin.com',\n\n  title: {\n    selectors: ['.article-title', 'h1'],\n  },\n\n  author: {\n    selectors: [\n      '.main-author-card h3',\n      ['meta[name=\"article:author\"]', 'value'],\n      '.entity-name a[rel=author]',\n    ],\n  },\n\n  date_published: {\n    selectors: [\n      '.base-main-card__metadata',\n      ['time[itemprop=\"datePublished\"]', 'datetime'],\n    ],\n\n    timezone: 'America/Los_Angeles',\n  },\n\n  dek: {\n    selectors: [\n      // enter selectors\n    ],\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  content: {\n    selectors: [\n      '.article-content__body',\n      ['header figure', '.prose'],\n      '.prose',\n    ],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {},\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: ['.entity-image'],\n  },\n};\n","export const ObamawhitehouseArchivesGovExtractor = {\n  domain: 'obamawhitehouse.archives.gov',\n\n  supportedDomains: ['whitehouse.gov'],\n\n  title: {\n    selectors: ['h1', '.pane-node-title'],\n  },\n\n  author: {\n    selectors: ['.blog-author-link', '.node-person-name-link'],\n  },\n\n  date_published: {\n    selectors: [['meta[name=\"article:published_time\"]', 'value']],\n  },\n\n  dek: {\n    selectors: ['.field-name-field-forall-summary'],\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  content: {\n    defaultCleaner: false,\n\n    selectors: ['div#content-start', '.pane-node-field-forall-body'],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {},\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: ['.pane-node-title', '.pane-custom.pane-1'],\n  },\n};\n","export const WwwOpposingviewsComExtractor = {\n  domain: 'www.opposingviews.com',\n\n  title: {\n    selectors: ['h1.m-detail-header--title', 'h1.title'],\n  },\n\n  author: {\n    selectors: [['meta[name=\"author\"]', 'value'], 'div.date span span a'],\n  },\n\n  date_published: {\n    selectors: [\n      ['meta[name=\"published\"]', 'value'],\n      ['meta[name=\"publish_date\"]', 'value'],\n    ],\n  },\n\n  dek: {\n    selectors: [\n      // enter selectors\n    ],\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  content: {\n    selectors: ['.m-detail--body', '.article-content'],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {},\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: ['.show-for-small-only'],\n  },\n};\n","export const WwwProspectmagazineCoUkExtractor = {\n  domain: 'www.prospectmagazine.co.uk',\n\n  title: {\n    selectors: ['.blog-header__title', '.page-title'],\n  },\n\n  author: {\n    selectors: ['.blog-header__author-link', '.aside_author .title'],\n  },\n\n  date_published: {\n    selectors: [['meta[name=\"article:published_time\"]', 'value'], '.post-info'],\n\n    timezone: 'Europe/London',\n  },\n\n  dek: {\n    selectors: ['.blog-header__description', '.page-subtitle'],\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  content: {\n    selectors: ['.blog__container', 'article .post_content'],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {},\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: [],\n  },\n};\n","export const ForwardComExtractor = {\n  domain: 'forward.com',\n\n  title: {\n    selectors: [['meta[name=\"og:title\"]', 'value']],\n  },\n\n  author: {\n    selectors: [\n      '.post-author a',\n      '.author-name',\n      ['meta[name=\"sailthru.author\"]', 'value'],\n    ],\n  },\n\n  date_published: {\n    selectors: [\n      ['meta[name=\"article:published_time\"]', 'value'],\n      ['meta[name=\"date\"]', 'value'],\n    ],\n  },\n\n  dek: {\n    selectors: [\n      // enter selectors\n    ],\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  content: {\n    selectors: [\n      '.content-container article',\n      ['.post-item-media-wrap', '.post-item p'],\n    ],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {},\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: ['.post-author', '.donate-box', '.message', '.subtitle'],\n  },\n};\n","export const WwwQdailyComExtractor = {\n  domain: 'www.qdaily.com',\n\n  title: {\n    selectors: ['h2', 'h2.title'],\n  },\n\n  author: {\n    selectors: ['.name'],\n  },\n\n  date_published: {\n    selectors: [['.date.smart-date', 'data-origindate']],\n  },\n\n  dek: {\n    selectors: ['.excerpt'],\n  },\n\n  lead_image_url: {\n    selectors: [['.article-detail-hd img', 'src']],\n  },\n\n  content: {\n    selectors: ['.detail'],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {},\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: ['.lazyload', '.lazylad', '.lazylood'],\n  },\n};\n","export const GothamistComExtractor = {\n  domain: 'gothamist.com',\n\n  supportedDomains: [\n    'chicagoist.com',\n    'laist.com',\n    'sfist.com',\n    'shanghaiist.com',\n    'dcist.com',\n  ],\n\n  title: {\n    selectors: ['h1', '.entry-header h1'],\n  },\n\n  author: {\n    // There are multiple article-metadata and byline-author classes, but the main article's is the 3rd child of the l-container class\n    selectors: ['.article-metadata:nth-child(3) .byline-author', '.author'],\n  },\n\n  date_published: {\n    selectors: [\n      ['meta[name=\"article:published_time\"]', 'value'],\n      'abbr',\n      'abbr.published',\n    ],\n\n    timezone: 'America/New_York',\n  },\n\n  dek: {\n    selectors: [null],\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  content: {\n    selectors: ['.article-body', '.entry-body'],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {\n      'div.image-none': 'figure',\n      '.image-none i': 'figcaption',\n      'div.image-left': 'figure',\n      '.image-left i': 'figcaption',\n      'div.image-right': 'figure',\n      '.image-right i': 'figcaption',\n    },\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: [\n      '.image-none br',\n      '.image-left br',\n      '.image-right br',\n      '.galleryEase',\n    ],\n  },\n};\n","export const WwwFoolComExtractor = {\n  domain: 'www.fool.com',\n\n  title: {\n    selectors: ['h1'],\n  },\n\n  author: {\n    selectors: [\n      ['meta[name=\"author\"]', 'value'],\n      '.author-inline .author-name',\n    ],\n  },\n\n  date_published: {\n    selectors: [['meta[name=\"date\"]', 'value']],\n  },\n\n  dek: {\n    selectors: [['meta[name=\"og:description\"]', 'value'], 'header h2'],\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  content: {\n    selectors: ['.tailwind-article-body', '.article-content'],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {\n      '.caption img': $node => {\n        const src = $node.attr('src');\n        $node.parent().replaceWith(`<figure><img src=\"${src}\"/></figure>`);\n      },\n      '.caption': 'figcaption',\n    },\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: ['#pitch'],\n  },\n};\n","export const WwwSlateComExtractor = {\n  domain: 'www.slate.com',\n\n  title: {\n    selectors: ['.hed', 'h1'],\n  },\n\n  author: {\n    selectors: ['a[rel=author]'],\n  },\n\n  date_published: {\n    selectors: ['.pub-date'],\n\n    timezone: 'America/New_York',\n  },\n\n  dek: {\n    selectors: ['.dek'],\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  content: {\n    selectors: ['.body'],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {},\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: [\n      '.about-the-author',\n      '.pullquote',\n      '.newsletter-signup-component',\n      '.top-comment',\n    ],\n  },\n};\n","export const IciRadioCanadaCaExtractor = {\n  domain: 'ici.radio-canada.ca',\n\n  title: {\n    selectors: ['h1'],\n  },\n\n  author: {\n    selectors: [['meta[name=\"dc.creator\"]', 'value']],\n  },\n\n  date_published: {\n    selectors: [['meta[name=\"dc.date.created\"]', 'value']],\n    format: 'YYYY-MM-DD|HH[h]mm',\n    timezone: 'America/New_York',\n  },\n\n  dek: {\n    selectors: ['div.lead-container', '.bunker-component.lead'],\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  content: {\n    selectors: [\n      'section.document-content-style',\n      ['.main-multimedia-item', '.news-story-content'],\n    ],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {},\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: [],\n  },\n};\n","export const WwwFortinetComExtractor = {\n  domain: 'www.fortinet.com',\n\n  title: {\n    selectors: ['h1'],\n  },\n\n  author: {\n    selectors: ['.b15-blog-meta__author'],\n  },\n\n  date_published: {\n    selectors: [['meta[name=\"article:published_time\"]', 'value']],\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  content: {\n    selectors: [\n      'div.responsivegrid.aem-GridColumn.aem-GridColumn--default--12',\n    ],\n\n    transforms: {\n      noscript: $node => {\n        const $children = $node.children();\n        if ($children.length === 1 && $children.get(0).tagName === 'img') {\n          return 'figure';\n        }\n        return null;\n      },\n    },\n  },\n};\n","export const WwwFastcompanyComExtractor = {\n  domain: 'www.fastcompany.com',\n\n  title: {\n    selectors: ['h1'],\n  },\n\n  author: {\n    selectors: [['meta[name=\"author\"]', 'value']],\n  },\n\n  date_published: {\n    selectors: [['meta[name=\"article:published_time\"]', 'value']],\n  },\n\n  dek: {\n    selectors: ['.post__deck'],\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  content: {\n    selectors: ['.post__article'],\n  },\n};\n","export const BlisterreviewComExtractor = {\n  domain: 'blisterreview.com',\n\n  title: {\n    selectors: [['meta[name=\"og:title\"]', 'value'], 'h1.entry-title'],\n  },\n\n  author: {\n    selectors: ['span.author-name'],\n  },\n\n  date_published: {\n    selectors: [\n      ['meta[name=\"article:published_time\"]', 'value'],\n      ['time.entry-date', 'datetime'],\n      ['meta[itemprop=\"datePublished\"]', 'content'],\n    ],\n  },\n\n  dek: {\n    selectors: [\n      // enter selectors\n    ],\n  },\n\n  lead_image_url: {\n    selectors: [\n      ['meta[name=\"og:image\"]', 'value'],\n      ['meta[property=\"og:image\"]', 'content'],\n      ['meta[itemprop=\"image\"]', 'content'],\n      ['meta[name=\"twitter:image\"]', 'content'],\n      ['img.attachment-large', 'src'],\n    ],\n  },\n\n  content: {\n    selectors: [\n      [\n        '.elementor-section-wrap',\n        '.elementor-text-editor > p, .elementor-text-editor > ul > li, .attachment-large, .wp-caption-text',\n      ],\n    ],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {\n      figcaption: 'p',\n    },\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: ['.comments-area'],\n  },\n};\n","export const NewsMynaviJpExtractor = {\n  domain: 'news.mynavi.jp',\n\n  title: {\n    selectors: [['meta[name=\"og:title\"]', 'value']],\n  },\n\n  author: {\n    selectors: [\n      'a.articleHeader_name',\n      'main div.article-author a.article-author__name',\n    ],\n  },\n\n  date_published: {\n    selectors: [['meta[name=\"article:published_time\"]', 'value']],\n  },\n\n  dek: {\n    selectors: [['meta[name=\"og:description\"]', 'value']],\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  content: {\n    selectors: ['div.article-body', 'main article div'],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {\n      img: $node => {\n        const src = $node.attr('data-original');\n        if (src !== '') {\n          $node.attr('src', src);\n        }\n      },\n    },\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: [],\n  },\n};\n","export const ClinicaltrialsGovExtractor = {\n  domain: 'clinicaltrials.gov',\n\n  title: {\n    selectors: ['h1.tr-solo_record'],\n  },\n\n  author: {\n    selectors: ['div#sponsor.tr-info-text'],\n  },\n\n  date_published: {\n    // selectors: ['span.term[data-term=\"Last Update Posted\"]'],\n    selectors: ['div:has(> span.term[data-term=\"Last Update Posted\"])'],\n  },\n\n  content: {\n    selectors: ['div#tab-body'],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {},\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: ['.usa-alert> img'],\n  },\n};\n","export const GithubComExtractor = {\n  domain: 'github.com',\n\n  title: {\n    selectors: [['meta[name=\"og:title\"]', 'value']],\n  },\n\n  author: {\n    selectors: [\n      // enter author selectors\n    ],\n  },\n\n  date_published: {\n    selectors: [\n      ['relative-time[datetime]', 'datetime'],\n      ['span[itemprop=\"dateModified\"] relative-time', 'datetime'],\n    ],\n  },\n\n  dek: {\n    selectors: [\n      ['meta[name=\"description\"]', 'value'],\n      'span[itemprop=\"about\"]',\n    ],\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  content: {\n    selectors: [['#readme article']],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {},\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: [],\n  },\n};\n","export const WwwRedditComExtractor = {\n  domain: 'www.reddit.com',\n\n  title: {\n    selectors: [\n      'div[data-test-id=\"post-content\"] h1',\n      'div[data-test-id=\"post-content\"] h2',\n    ],\n  },\n\n  author: {\n    selectors: ['div[data-test-id=\"post-content\"] a[href*=\"user/\"]'],\n  },\n\n  date_published: {\n    selectors: [\n      'div[data-test-id=\"post-content\"] span[data-click-id=\"timestamp\"]',\n      'div[data-test-id=\"post-content\"] a[data-click-id=\"timestamp\"]',\n    ],\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  content: {\n    selectors: [\n      ['div[data-test-id=\"post-content\"] p'], // text post\n      [\n        'div[data-test-id=\"post-content\"] a[target=\"_blank\"]:not([data-click-id=\"timestamp\"])', // external link\n        'div[data-test-id=\"post-content\"] div[data-click-id=\"media\"]', // embedded media\n      ], // external link with media preview (YouTube, imgur album, etc...)\n      ['div[data-test-id=\"post-content\"] div[data-click-id=\"media\"]'], // Embedded media (Reddit video)\n      ['div[data-test-id=\"post-content\"] a'], // external link\n      'div[data-test-id=\"post-content\"]',\n    ],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {\n      'div[role=\"img\"]': $node => {\n        // External link image preview\n        const $img = $node.find('img');\n        const bgImg = $node.css('background-image');\n        if ($img.length === 1 && bgImg) {\n          $img.attr('src', bgImg.match(/\\((.*?)\\)/)[1].replace(/('|\")/g, ''));\n          return $img;\n        }\n        return $node;\n      },\n    },\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: [\n      '.icon',\n      'span[id^=\"PostAwardBadges\"]',\n      'div a[data-test-id=\"comments-page-link-num-comments\"]',\n    ],\n  },\n};\n","export const OtrsComExtractor = {\n  domain: 'otrs.com',\n\n  title: {\n    selectors: ['#main article h1'],\n  },\n\n  author: {\n    selectors: ['div.dateplusauthor a'],\n  },\n\n  date_published: {\n    selectors: [['meta[name=\"article:published_time\"]', 'value']],\n  },\n\n  dek: {\n    selectors: [['meta[name=\"og:description\"]', 'value']],\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  content: {\n    selectors: ['#main article'],\n\n    defaultCleaner: false,\n\n    transforms: {},\n\n    clean: [\n      'div.dateplusauthor',\n      'div.gr-12.push-6.footershare',\n      '#atftbx',\n      'div.category-modul',\n    ],\n  },\n};\n","export const WwwOssnewsJpExtractor = {\n  domain: 'www.ossnews.jp',\n\n  title: {\n    selectors: ['#alpha-block h1.hxnewstitle'],\n  },\n\n  author: null,\n\n  date_published: {\n    selectors: ['p.fs12'],\n    format: 'YYYY年MM月DD日 HH:mm',\n    timezone: 'Asia/Tokyo',\n  },\n\n  dek: null,\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  content: {\n    selectors: ['#alpha-block .section:has(h1.hxnewstitle)'],\n\n    defaultCleaner: false,\n\n    transforms: {},\n\n    clean: [],\n  },\n};\n","export const BuzzapJpExtractor = {\n  domain: 'buzzap.jp',\n\n  title: {\n    selectors: ['h1.entry-title'],\n  },\n\n  author: null,\n\n  date_published: {\n    selectors: [['time.entry-date', 'datetime']],\n  },\n\n  dek: null,\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  content: {\n    selectors: ['div.ctiframe'],\n\n    defaultCleaner: false,\n\n    transforms: {},\n\n    clean: [],\n  },\n};\n","export const WwwAsahiComExtractor = {\n  domain: 'www.asahi.com',\n\n  title: {\n    selectors: ['main h1', '.ArticleTitle h1'],\n  },\n\n  author: {\n    selectors: [['meta[name=\"article:author\"]', 'value']],\n  },\n\n  date_published: {\n    selectors: [['meta[name=\"pubdate\"]', 'value']],\n  },\n\n  dek: null,\n\n  excerpt: {\n    selectors: [['meta[name=\"og:description\"]', 'value']],\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  content: {\n    selectors: ['main'],\n\n    defaultCleaner: false,\n\n    transforms: {},\n\n    clean: ['div.AdMod', 'div.LoginSelectArea', 'time', 'div.notPrint'],\n  },\n};\n","export const WwwSanwaCoJpExtractor = {\n  domain: 'www.sanwa.co.jp',\n\n  title: {\n    selectors: ['#newsContent h1'],\n  },\n\n  author: null,\n\n  date_published: {\n    selectors: ['dl.date'],\n    format: 'YYYY.MM.DD',\n    timezone: 'Asia/Tokyo',\n  },\n\n  dek: {\n    selectors: [['meta[name=\"og:description\"]', 'value']],\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  content: {\n    selectors: ['#newsContent'],\n\n    defaultCleaner: false,\n\n    transforms: {},\n\n    clean: ['#smartphone', 'div.sns_box', 'div.contentFoot'],\n  },\n};\n","export const WwwElecomCoJpExtractor = {\n  domain: 'www.elecom.co.jp',\n\n  title: {\n    selectors: ['title'],\n  },\n\n  author: null,\n\n  date_published: {\n    selectors: ['p.section-last'],\n    format: 'YYYY.MM.DD',\n    timezone: 'Asia/Tokyo',\n  },\n\n  dek: null,\n\n  lead_image_url: null,\n\n  content: {\n    selectors: ['td.TableMain2'],\n\n    defaultCleaner: false,\n\n    transforms: {\n      table: $node => {\n        $node.attr('width', 'auto');\n      },\n    },\n\n    clean: [],\n  },\n};\n","export const ScanNetsecurityNeJpExtractor = {\n  domain: 'scan.netsecurity.ne.jp',\n\n  title: {\n    selectors: ['header.arti-header h1.head'],\n  },\n\n  author: null,\n\n  date_published: {\n    selectors: [['meta[name=\"article:modified_time\"]', 'value']],\n  },\n\n  dek: {\n    selectors: ['header.arti-header p.arti-summary'],\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  content: {\n    selectors: ['div.arti-content.arti-content--thumbnail'],\n\n    defaultCleaner: false,\n\n    transforms: {},\n\n    clean: ['aside.arti-giga'],\n  },\n};\n","export const JvndbJvnJpExtractor = {\n  domain: 'jvndb.jvn.jp',\n\n  title: {\n    selectors: ['title'],\n  },\n\n  author: null,\n\n  date_published: {\n    selectors: ['div.modifytxt:nth-child(2)'],\n    format: 'YYYY/MM/DD',\n    timezone: 'Asia/Tokyo',\n  },\n\n  dek: null,\n\n  lead_image_url: null,\n\n  content: {\n    selectors: ['#news-list'],\n\n    defaultCleaner: false,\n\n    transforms: {},\n\n    clean: [],\n  },\n};\n","export const GeniusComExtractor = {\n  domain: 'genius.com',\n\n  title: {\n    selectors: ['h1'],\n  },\n\n  author: {\n    selectors: ['h2 a'],\n  },\n\n  date_published: {\n    selectors: [\n      [\n        'meta[itemprop=page_data]',\n        'value',\n        res => {\n          const json = JSON.parse(res);\n          return json.song.release_date;\n        },\n      ],\n    ],\n  },\n\n  dek: {\n    selectors: [\n      // enter selectors\n    ],\n  },\n\n  lead_image_url: {\n    selectors: [\n      [\n        'meta[itemprop=page_data]',\n        'value',\n        res => {\n          const json = JSON.parse(res);\n          return json.song.album.cover_art_url;\n        },\n      ],\n    ],\n  },\n\n  content: {\n    selectors: ['.lyrics'],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {},\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: [],\n  },\n};\n","export const WwwJnsaOrgExtractor = {\n  domain: 'www.jnsa.org',\n\n  title: {\n    selectors: ['#wgtitle h2'],\n  },\n\n  author: null,\n\n  date_published: null,\n\n  dek: null,\n\n  excerpt: {\n    selectors: [['meta[name=\"og:description\"]', 'value']],\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  content: {\n    selectors: ['#main_area'],\n\n    transforms: {},\n\n    clean: ['#pankuzu', '#side'],\n  },\n};\n","export const PhpspotOrgExtractor = {\n  domain: 'phpspot.org',\n\n  title: {\n    selectors: ['h3.hl'],\n  },\n\n  author: null,\n\n  date_published: {\n    selectors: ['h4.hl'],\n    format: 'YYYY年MM月DD日',\n    timezone: 'Asia/Tokyo',\n  },\n\n  dek: null,\n\n  lead_image_url: null,\n\n  content: {\n    selectors: ['div.entrybody'],\n\n    defaultCleaner: false,\n\n    transforms: {},\n\n    clean: [],\n  },\n};\n","export const WwwInfoqComExtractor = {\n  domain: 'www.infoq.com',\n\n  title: {\n    selectors: ['h1.heading'],\n  },\n\n  author: {\n    selectors: ['div.widget.article__authors'],\n  },\n\n  date_published: {\n    selectors: ['.article__readTime.date'],\n    format: 'YYYY年MM月DD日',\n    timezone: 'Asia/Tokyo',\n  },\n\n  dek: {\n    selectors: [['meta[name=\"og:description\"]', 'value']],\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  content: {\n    selectors: ['div.article__data'],\n\n    defaultCleaner: false,\n\n    transforms: {},\n\n    clean: [],\n  },\n};\n","export const WwwMoongiftJpExtractor = {\n  domain: 'www.moongift.jp',\n\n  title: {\n    selectors: ['h1.title a'],\n  },\n\n  author: null,\n\n  date_published: {\n    selectors: ['ul.meta li:not(.social):first-of-type'],\n    timezone: 'Asia/Tokyo',\n  },\n\n  dek: {\n    selectors: [['meta[name=\"og:description\"]', 'value']],\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  content: {\n    selectors: ['#main'],\n\n    transforms: {},\n\n    clean: ['ul.mg_service.cf'],\n  },\n};\n","export const WwwItmediaCoJpExtractor = {\n  domain: 'www.itmedia.co.jp',\n\n  supportedDomains: [\n    'www.atmarkit.co.jp',\n    'techtarget.itmedia.co.jp',\n    'nlab.itmedia.co.jp',\n  ],\n\n  title: {\n    selectors: ['#cmsTitle h1'],\n  },\n\n  author: {\n    selectors: ['#byline'],\n  },\n\n  date_published: {\n    selectors: [['meta[name=\"article:modified_time\"]', 'value']],\n  },\n\n  dek: {\n    selectors: ['#cmsAbstract h2'],\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  content: {\n    selectors: ['#cmsBody'],\n\n    defaultCleaner: false,\n\n    transforms: {},\n\n    clean: ['#snsSharebox'],\n  },\n};\n","export const WwwPublickey1JpExtractor = {\n  domain: 'www.publickey1.jp',\n\n  title: {\n    selectors: ['h1'],\n  },\n\n  author: {\n    selectors: ['.bloggerinchief p:first-of-type', '#subcol p:has(img)'],\n  },\n\n  date_published: {\n    selectors: ['div.pubdate'],\n    format: 'YYYY年MM月DD日',\n    timezone: 'Asia/Tokyo',\n  },\n\n  dek: null,\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  content: {\n    selectors: ['#maincol'],\n\n    defaultCleaner: false,\n\n    transforms: {},\n\n    clean: ['#breadcrumbs', 'div.sbm', 'div.ad_footer'],\n  },\n};\n","export const TakagihiromitsuJpExtractor = {\n  domain: 'takagi-hiromitsu.jp',\n\n  title: {\n    selectors: ['h3'],\n  },\n\n  author: {\n    selectors: [['meta[name=\"author\"]', 'value']],\n  },\n\n  date_published: {\n    selectors: [['meta[http-equiv=\"Last-Modified\"]', 'value']],\n  },\n\n  dek: null,\n\n  lead_image_url: null,\n\n  content: {\n    selectors: ['div.body'],\n\n    defaultCleaner: false,\n\n    transforms: {},\n\n    clean: [],\n  },\n};\n","export const BookwalkerJpExtractor = {\n  domain: 'bookwalker.jp',\n\n  title: {\n    selectors: ['h1.p-main__title', 'h1.main-heading'],\n  },\n\n  author: {\n    selectors: ['div.p-author__list', 'div.authors'],\n  },\n\n  date_published: {\n    selectors: [\n      'dl.p-information__data dd:nth-of-type(7)',\n      '.work-info .work-detail:first-of-type .work-detail-contents:last-of-type',\n    ],\n    timezone: 'Asia/Tokyo',\n  },\n\n  dek: null,\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  content: {\n    selectors: [\n      'div.p-main__information',\n      ['div.main-info', 'div.main-cover-inner'],\n    ],\n\n    defaultCleaner: false,\n\n    transforms: {},\n\n    clean: [\n      'span.label.label--trial',\n      'dt.info-head.info-head--coin',\n      'dd.info-contents.info-contents--coin',\n      'div.info-notice.fn-toggleClass',\n    ],\n  },\n};\n","export const WwwYomiuriCoJpExtractor = {\n  domain: 'www.yomiuri.co.jp',\n\n  title: {\n    selectors: ['h1.title-article.c-article-title'],\n  },\n\n  author: null,\n\n  date_published: {\n    selectors: [['meta[name=\"article:published_time\"]', 'value']],\n  },\n\n  dek: null,\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  content: {\n    selectors: ['div.p-main-contents'],\n\n    transforms: {},\n\n    clean: [],\n  },\n};\n","export const JapanCnetComExtractor = {\n  domain: 'japan.cnet.com',\n\n  title: {\n    selectors: ['.leaf-headline-ttl'],\n  },\n\n  author: {\n    selectors: ['.writer'],\n  },\n\n  date_published: {\n    selectors: ['.date'],\n    format: 'YYYY年MM月DD日 HH時mm分',\n    timezone: 'Asia/Tokyo',\n  },\n\n  dek: null,\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  content: {\n    selectors: ['div.article_body'],\n\n    transforms: {},\n\n    clean: [],\n  },\n};\n","export const DeadlineComExtractor = {\n  domain: 'deadline.com',\n\n  title: {\n    selectors: ['h1'],\n  },\n\n  author: {\n    selectors: ['section.author h2'],\n  },\n\n  date_published: {\n    selectors: [['meta[name=\"article:published_time\"]', 'value']],\n  },\n\n  dek: null,\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  content: {\n    selectors: ['div.a-article-grid__main.pmc-a-grid article.pmc-a-grid-item'],\n\n    transforms: {\n      '.embed-twitter': $node => {\n        const innerHtml = $node.html();\n        $node.replaceWith(innerHtml);\n      },\n    },\n\n    clean: ['figcaption'],\n  },\n};\n","export const WwwGizmodoJpExtractor = {\n  domain: 'www.gizmodo.jp',\n\n  title: {\n    selectors: ['h1.p-post-title'],\n  },\n\n  author: {\n    selectors: ['li.p-post-AssistAuthor'],\n  },\n\n  date_published: {\n    selectors: [['li.p-post-AssistTime time', 'datetime']],\n  },\n\n  dek: null,\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  content: {\n    selectors: ['article.p-post'],\n\n    transforms: {\n      'img.p-post-thumbnailImage': $node => {\n        const src = $node.attr('src');\n        $node.attr('src', src.replace(/^.*=%27/, '').replace(/%27;$/, ''));\n      },\n    },\n\n    clean: ['h1.p-post-title', 'ul.p-post-Assist'],\n  },\n};\n","export const GetnewsJpExtractor = {\n  domain: 'getnews.jp',\n\n  title: {\n    selectors: ['article h1'],\n  },\n\n  author: {\n    selectors: [['meta[name=\"article:author\"]', 'value'], 'span.prof'],\n  },\n\n  date_published: {\n    selectors: [\n      ['meta[name=\"article:published_time\"]', 'value'],\n      ['ul.cattag-top time', 'datetime'],\n    ],\n  },\n\n  dek: null,\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  content: {\n    selectors: ['div.post-bodycopy'],\n\n    transforms: {},\n\n    clean: [],\n  },\n};\n","export const WwwLifehackerJpExtractor = {\n  domain: 'www.lifehacker.jp',\n\n  title: {\n    selectors: ['h1[class^=\"article_pArticle_Title\"]', 'h1.lh-summary-title'],\n  },\n\n  author: {\n    selectors: [\n      ['meta[name=\"author\"]', 'value'],\n      'p.lh-entryDetailInner--credit',\n    ],\n  },\n\n  date_published: {\n    selectors: [\n      ['meta[name=\"article:published_time\"]', 'value'],\n      ['div.lh-entryDetail-header time', 'datetime'],\n    ],\n  },\n\n  dek: null,\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  content: {\n    selectors: [\n      'div[class^=\"article_pArticle_Body__\"]',\n      'div.lh-entryDetail-body',\n    ],\n\n    transforms: {\n      'img.lazyload': $node => {\n        const src = $node.attr('src');\n        $node.attr('src', src.replace(/^.*=%27/, '').replace(/%27;$/, ''));\n      },\n    },\n\n    clean: ['p.lh-entryDetailInner--credit'],\n  },\n};\n","export const SectIijAdJpExtractor = {\n  domain: 'sect.iij.ad.jp',\n\n  title: {\n    selectors: ['div.title-box-inner h1', 'h3'],\n  },\n\n  author: {\n    selectors: ['p.post-author a', 'dl.entrydate dd'],\n  },\n\n  date_published: {\n    selectors: ['time'],\n    format: 'YYYY年MM月DD日',\n    timezone: 'Asia/Tokyo',\n  },\n\n  dek: null,\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  content: {\n    selectors: ['.entry-inner', '#article'],\n\n    transforms: {},\n\n    clean: ['dl.entrydate'],\n  },\n};\n","export const WwwOreillyCoJpExtractor = {\n  domain: 'www.oreilly.co.jp',\n\n  title: {\n    selectors: [['meta[name=\"og:title\"]', 'value'], 'h3'],\n  },\n\n  author: {\n    selectors: ['span[itemprop=\"author\"]', 'li[itemprop=\"author\"]'],\n  },\n\n  date_published: {\n    selectors: [\n      ['dd[itemprop=\"datePublished\"]', 'content'],\n      ['meta[itemprop=\"datePublished\"]', 'value'],\n    ],\n    timezone: 'Asia/Tokyo',\n  },\n\n  dek: null,\n\n  lead_image_url: {\n    selectors: [\n      ['meta[name=\"og:image:secure_url\"]', 'value'],\n      ['meta[name=\"og:image\"]', 'value'],\n    ],\n  },\n\n  content: {\n    selectors: ['section.detail', '#content'],\n\n    defaultCleaner: false,\n\n    transforms: {},\n\n    clean: ['.social-tools'],\n  },\n};\n","export const WwwIpaGoJpExtractor = {\n  domain: 'www.ipa.go.jp',\n\n  title: {\n    selectors: ['h1'],\n  },\n\n  author: null,\n\n  date_published: {\n    selectors: ['p.ipar_text_right'],\n    format: 'YYYY年M月D日',\n    timezone: 'Asia/Tokyo',\n  },\n\n  dek: null,\n\n  lead_image_url: null,\n\n  content: {\n    selectors: ['#ipar_main'],\n\n    defaultCleaner: false,\n\n    transforms: {},\n\n    clean: ['p.ipar_text_right'],\n  },\n};\n","export const WeeklyAsciiJpExtractor = {\n  domain: 'weekly.ascii.jp',\n\n  title: {\n    selectors: ['article h1', 'h1[itemprop=\"headline\"]'],\n  },\n\n  author: {\n    selectors: ['p.author'],\n  },\n\n  date_published: {\n    selectors: ['p.date', ['meta[name=\"odate\"]', 'value']],\n\n    format: 'YYYY年MM月DD日 HH:mm',\n\n    timezone: 'Asia/Tokyo',\n  },\n\n  dek: null,\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  content: {\n    selectors: ['div#contents_detail', 'div.article'],\n\n    transforms: {},\n\n    clean: [],\n  },\n};\n","export const TechlogIijAdJpExtractor = {\n  domain: 'techlog.iij.ad.jp',\n\n  title: {\n    selectors: ['h1.entry-title'],\n  },\n\n  author: {\n    selectors: ['a[rel=\"author\"]'],\n  },\n\n  date_published: {\n    selectors: [['time.entry-date', 'datetime']],\n  },\n\n  dek: null,\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  content: {\n    selectors: ['div.entry-content'],\n\n    defaultCleaner: false,\n\n    transforms: {},\n\n    clean: ['.wp_social_bookmarking_light'],\n  },\n};\n","import URL from 'url';\n\nexport const WiredJpExtractor = {\n  domain: 'wired.jp',\n\n  title: {\n    selectors: ['h1[data-testid=\"ContentHeaderHed\"]', 'h1.post-title'],\n  },\n\n  author: {\n    selectors: [\n      ['meta[name=\"article:author\"]', 'value'],\n      'p[itemprop=\"author\"]',\n    ],\n  },\n\n  date_published: {\n    selectors: [\n      ['meta[name=\"article:published_time\"]', 'value'],\n      ['time', 'datetime'],\n    ],\n  },\n\n  dek: {\n    selectors: ['div[class^=\"ContentHeaderDek\"]', '.post-intro'],\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  content: {\n    selectors: [\n      'div[data-attribute-verso-pattern=\"article-body\"]',\n      'article.article-detail',\n    ],\n\n    transforms: {\n      'img[data-original]': $node => {\n        const dataOriginal = $node.attr('data-original');\n        const src = $node.attr('src');\n        const url = URL.resolve(src, dataOriginal);\n        $node.attr('src', url);\n      },\n    },\n\n    clean: ['.post-category', 'time', 'h1.post-title', '.social-area-syncer'],\n  },\n};\n","export const JapanZdnetComExtractor = {\n  domain: 'japan.zdnet.com',\n\n  title: {\n    selectors: ['h1'],\n  },\n\n  author: {\n    selectors: [['meta[name=\"cXenseParse:author\"]', 'value']],\n  },\n\n  date_published: {\n    selectors: [['meta[name=\"article:published_time\"]', 'value']],\n  },\n\n  dek: null,\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  content: {\n    selectors: ['div.article_body'],\n\n    transforms: {},\n\n    clean: [],\n  },\n};\n","export const WwwRbbtodayComExtractor = {\n  domain: 'www.rbbtoday.com',\n\n  title: {\n    selectors: ['h1'],\n  },\n\n  author: {\n    selectors: ['.writer.writer-name'],\n  },\n\n  date_published: {\n    selectors: [['header time', 'datetime']],\n  },\n\n  dek: {\n    selectors: [['meta[name=\"description\"]', 'value'], '.arti-summary'],\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  content: {\n    selectors: ['.arti-content'],\n\n    transforms: {},\n\n    clean: ['.arti-giga'],\n  },\n};\n","export const WwwLemondeFrExtractor = {\n  domain: 'www.lemonde.fr',\n\n  title: {\n    selectors: ['h1.article__title'],\n  },\n\n  author: {\n    selectors: ['.author__name'],\n  },\n\n  date_published: {\n    selectors: [['meta[name=\"og:article:published_time\"]', 'value']],\n  },\n\n  dek: {\n    selectors: ['.article__desc'],\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  content: {\n    selectors: ['.article__content'],\n\n    transforms: {},\n\n    clean: ['figcaption'],\n  },\n};\n","export const WwwPhoronixComExtractor = {\n  domain: 'www.phoronix.com',\n\n  title: {\n    selectors: ['article h1', 'article header'],\n  },\n\n  author: {\n    selectors: ['.author a:first-child'],\n  },\n\n  date_published: {\n    selectors: ['.author'],\n    // 1 June 2019 at 08:34 PM EDT\n    format: 'D MMMM YYYY at hh:mm',\n    timezone: 'America/New_York',\n  },\n\n  dek: null,\n\n  lead_image_url: null,\n\n  content: {\n    selectors: ['.content'],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {},\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: [],\n  },\n};\n","export const PitchforkComExtractor = {\n  domain: 'pitchfork.com',\n\n  title: {\n    selectors: [['meta[name=\"og:title\"]', 'value'], 'title'],\n  },\n\n  author: {\n    selectors: [\n      ['meta[name=\"article:author\"]', 'value'],\n      '.authors-detail__display-name',\n    ],\n  },\n\n  date_published: {\n    selectors: ['div[class^=\"InfoSliceWrapper-\"]', ['.pub-date', 'datetime']],\n  },\n\n  dek: {\n    selectors: [\n      ['meta[name=\"og:description\"]', 'value'],\n      '.review-detail__abstract',\n    ],\n  },\n\n  lead_image_url: {\n    selectors: [\n      ['meta[name=\"og:image\"]', 'value'],\n      ['.single-album-tombstone__art img', 'src'],\n    ],\n  },\n\n  content: {\n    selectors: ['div.body__inner-container', '.review-detail__text'],\n  },\n\n  extend: {\n    score: {\n      selectors: ['p[class*=\"Rating\"]', '.score'],\n    },\n  },\n};\n","export const BiorxivOrgExtractor = {\n  domain: 'biorxiv.org',\n\n  title: {\n    selectors: ['h1#page-title'],\n  },\n\n  author: {\n    selectors: [\n      'div.highwire-citation-biorxiv-article-top > div.highwire-cite-authors',\n    ],\n  },\n\n  content: {\n    selectors: ['div#abstract-1'],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {},\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: [],\n  },\n};\n","export const EpaperZeitDeExtractor = {\n  domain: 'epaper.zeit.de',\n\n  title: {\n    selectors: ['p.title'],\n  },\n\n  author: {\n    selectors: ['.article__author'],\n  },\n\n  date_published: null,\n\n  excerpt: {\n    selectors: ['subtitle'],\n  },\n\n  lead_image_url: null,\n\n  content: {\n    selectors: ['.article'],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {\n      'p.title': 'h1',\n      '.article__author': 'p',\n      byline: 'p',\n      linkbox: 'p',\n    },\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: ['image-credits', 'box[type=citation]'],\n  },\n};\n","export const WwwLadbibleComExtractor = {\n  domain: 'www.ladbible.com',\n\n  title: {\n    selectors: ['h1'],\n  },\n\n  author: {\n    selectors: ['[class*=Byline]'],\n  },\n\n  date_published: {\n    selectors: ['time'],\n    timezone: 'Europe/London',\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  content: {\n    selectors: ['[class*=ArticleContainer]'],\n    clean: [\n      'time',\n      'source',\n      'a[href^=\"https://www.ladbible.com/\"]',\n      'picture',\n      '[class*=StyledCardBlock]',\n    ],\n  },\n};\n","export const TimesofindiaIndiatimesComExtractor = {\n  domain: 'timesofindia.indiatimes.com',\n\n  title: {\n    selectors: ['h1'],\n  },\n\n  extend: {\n    reporter: {\n      selectors: ['div.byline'],\n      transforms: {},\n    },\n  },\n\n  date_published: {\n    selectors: ['.byline'],\n    format: 'MMM D, YYYY, HH:mm z',\n    timezone: 'Asia/Kolkata',\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  content: {\n    selectors: ['div.contentwrapper:has(section)'],\n    defaultCleaner: false,\n\n    clean: [\n      'section',\n      'h1',\n      '.byline',\n      '.img_cptn',\n      '.icon_share_wrap',\n      'ul[itemtype=\"https://schema.org/BreadcrumbList\"]',\n    ],\n  },\n};\n","export const MaTtiasBeExtractor = {\n  domain: 'ma.ttias.be',\n\n  title: {\n    selectors: [['meta[name=\"twitter:title\"]', 'value']],\n  },\n\n  author: {\n    selectors: [['meta[name=\"author\"]', 'value']],\n  },\n\n  date_published: {\n    selectors: [['meta[name=\"article:published_time\"]', 'value']],\n  },\n\n  content: {\n    selectors: [['.content']],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {\n      h2: $node => {\n        // The \"id\" attribute values would result in low scores and the element being\n        // removed.\n        $node.attr('id', null);\n\n        // h1 elements will be demoted to h2, so demote h2 elements to h3.\n        return 'h3';\n      },\n      h1: $node => {\n        // The \"id\" attribute values would result in low scores and the element being\n        // removed.\n        $node.attr('id', null);\n\n        // A subsequent h2 will be removed if there is not a paragraph before it, so\n        // add a paragraph here. It will be removed anyway because it is empty.\n        $node.after('<p></p>');\n      },\n      ul: $node => {\n        // Articles contain lists of links which look like, but are not, navigation\n        // elements. Adding this class attribute avoids them being incorrectly removed.\n        $node.attr('class', 'entry-content-asset');\n      },\n    },\n  },\n};\n","export const PastebinComExtractor = {\n  domain: 'pastebin.com',\n\n  title: {\n    selectors: ['h1'],\n  },\n\n  author: {\n    selectors: ['.username', '.paste_box_line2 .t_us + a'],\n  },\n\n  date_published: {\n    selectors: ['.date', '.paste_box_line2 .t_da + span'],\n    timezone: 'America/New_York',\n    format: 'MMMM D, YYYY',\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  content: {\n    selectors: ['.source', '#selectable .text'],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {\n      ol: 'div',\n      li: 'p',\n    },\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: [],\n  },\n};\n","/* eslint-disable no-nested-ternary */\n/* eslint-disable no-unused-expressions */\nexport const WwwAbendblattDeExtractor = {\n  domain: 'www.abendblatt.de',\n\n  title: {\n    selectors: ['h2.article__header__headline'],\n  },\n\n  author: {\n    selectors: ['span.author-info__name-text'],\n  },\n\n  date_published: {\n    selectors: [\n      ['time.teaser-stream-time', 'datetime'],\n      ['time.article__header__date', 'datetime'],\n    ],\n  },\n\n  dek: {\n    selectors: [['meta[name=\"description\"]', 'value']],\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  content: {\n    selectors: ['div.article__body'],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {\n      p: $node => {\n        if (!$node.hasClass('obfuscated')) return null;\n        let o = '';\n        let n = 0;\n        for (let i = $node.text(); n < i.length; n += 1) {\n          const r = i.charCodeAt(n);\n          r === 177\n            ? (o += '%')\n            : r === 178\n            ? (o += '!')\n            : r === 180\n            ? (o += ';')\n            : r === 181\n            ? (o += '=')\n            : r === 32\n            ? (o += ' ')\n            : r === 10\n            ? (o += '\\n')\n            : r > 33 && (o += String.fromCharCode(r - 1));\n        }\n\n        $node.html(o);\n        $node.removeClass('obfuscated');\n        $node.addClass('deobfuscated');\n        return null;\n      },\n      div: $node => {\n        if (!$node.hasClass('obfuscated')) return null;\n        let o = '';\n        let n = 0;\n        for (let i = $node.text(); n < i.length; n += 1) {\n          const r = i.charCodeAt(n);\n          r === 177\n            ? (o += '%')\n            : r === 178\n            ? (o += '!')\n            : r === 180\n            ? (o += ';')\n            : r === 181\n            ? (o += '=')\n            : r === 32\n            ? (o += ' ')\n            : r === 10\n            ? (o += '\\n')\n            : r > 33 && (o += String.fromCharCode(r - 1));\n        }\n\n        $node.html(o);\n        $node.removeClass('obfuscated');\n        $node.addClass('deobfuscated');\n        return null;\n      },\n    },\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: [],\n  },\n};\n","export const WwwGrueneDeExtractor = {\n  domain: 'www.gruene.de',\n\n  title: {\n    selectors: ['header h1'],\n  },\n\n  author: null,\n\n  date_published: null,\n\n  dek: null,\n\n  lead_image_url: {\n    selectors: [['meta[property=\"og:image\"]', 'content']],\n  },\n\n  content: {\n    // selectors: ['section'],\n    selectors: [['section header', 'section h2', 'section p', 'section ol']],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {},\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: ['figcaption', 'p[class]'],\n  },\n};\n","export const WwwEngadgetComExtractor = {\n  domain: 'www.engadget.com',\n\n  title: {\n    selectors: [['meta[name=\"og:title\"]', 'value']],\n  },\n\n  author: {\n    selectors: ['a.th-meta[data-ylk*=\"subsec:author\"]'],\n  },\n\n  // Engadget stories have publish dates, but the only representation of them on the page\n  // is in a format like \"2h ago\". There are also these tags with blank values:\n  // <meta class=\"swiftype\" name=\"published_at\" data-type=\"date\" value=\"\">\n  date_published: {\n    selectors: [\n      // enter selectors\n    ],\n  },\n\n  dek: {\n    selectors: ['div[class*=\"o-title_mark\"] div'],\n  },\n\n  // Engadget stories do have lead images specified by an og:image meta tag, but selecting\n  // the value attribute of that tag fails. I believe the \"&#x2111;\" sequence of characters\n  // is triggering this inability to select the attribute value.\n  lead_image_url: {\n    selectors: [\n      // enter selectors\n    ],\n  },\n\n  content: {\n    selectors: [\n      [\n        // Some figures will be inside div.article-text, but some header figures/images\n        // will not.\n        '#page_body figure:not(div.article-text figure)',\n        'div.article-text',\n      ],\n    ],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {},\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: [],\n  },\n};\n","export const ArstechnicaComExtractor = {\n  domain: 'arstechnica.com',\n\n  // Articles from this site are often paginated, but I was unable to write a CSS\n  // selector to find the next page. On the last page, there will be a link with a CSS\n  // selector indicating that the previous page is next. But the parser appears to find\n  // the next page without this extractor finding it, as long as the fallback option is\n  // left at its default value of true.\n\n  title: {\n    selectors: ['title'],\n  },\n\n  author: {\n    selectors: ['*[rel=\"author\"] *[itemprop=\"name\"]'],\n  },\n\n  date_published: {\n    selectors: [['.byline time', 'datetime']],\n  },\n\n  dek: {\n    selectors: ['h2[itemprop=\"description\"]'],\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  content: {\n    selectors: ['div[itemprop=\"articleBody\"]'],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {\n      h2: $node => {\n        // Some pages have an element h2 that is significant, and that the parser will\n        // remove if not following a paragraph. Adding this empty paragraph fixes it, and\n        // the empty paragraph will be removed anyway.\n        $node.before('<p></p>');\n      },\n    },\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result.\n    clean: [\n      // Remove enlarge links and separators inside image captions.\n      'figcaption .enlarge-link',\n      'figcaption .sep',\n\n      // I could not transform the video into usable elements, so I\n      // removed them.\n      'figure.video',\n\n      // Image galleries that do not work.\n      '.gallery',\n\n      'aside',\n      '.sidebar',\n    ],\n  },\n};\n","export const WwwNdtvComExtractor = {\n  domain: 'www.ndtv.com',\n\n  title: {\n    selectors: [['meta[name=\"og:title\"]', 'value'], 'h1.entry-title'],\n  },\n\n  author: {\n    selectors: ['span[itemprop=\"author\"] span[itemprop=\"name\"]'],\n  },\n\n  date_published: {\n    selectors: [['span[itemprop=\"dateModified\"]', 'content']],\n  },\n\n  dek: {\n    selectors: ['h2'],\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  content: {\n    selectors: ['div[itemprop=\"articleBody\"]'],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {\n      // This site puts a dateline in a 'b' above the first paragraph, and then somehow\n      // blends it into the first paragraph with CSS. This transform moves the dateline\n      // to the first paragraph.\n      '.place_cont': $node => {\n        if (!$node.parents('p').length) {\n          const nextSibling = $node.next('p');\n          if (nextSibling) {\n            $node.remove();\n            nextSibling.prepend($node);\n          }\n        }\n      },\n    },\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: [\n      '.highlghts_Wdgt',\n      '.ins_instory_dv_caption',\n      'input',\n      '._world-wrapper .mt20',\n    ],\n  },\n};\n","export const SpektrumExtractor = {\n  domain: 'www.spektrum.de',\n\n  title: {\n    selectors: ['.content__title'],\n  },\n\n  author: {\n    selectors: ['.content__author__info__name'],\n  },\n\n  date_published: {\n    selectors: ['.content__meta__date'],\n    timezone: 'Europe/Berlin',\n  },\n\n  dek: {\n    selectors: ['.content__intro'],\n  },\n\n  lead_image_url: {\n    selectors: [\n      // This is how the meta tag appears in the original source code.\n      ['meta[name=\"og:image\"]', 'value'],\n      // This is how the meta tag appears in the DOM in Chrome.\n      // The selector is included here to make the code work within the browser as well.\n      ['meta[property=\"og:image\"]', 'content'],\n      // This is the image that is shown on the page.\n      // It can be slightly cropped compared to the original in the meta tag.\n      '.image__article__top img',\n    ],\n  },\n\n  content: {\n    selectors: ['article.content'],\n    clean: [\n      '.breadcrumbs',\n      '.hide-for-print',\n      'aside',\n      'header h2',\n      '.image__article__top',\n      '.content__author',\n      '.copyright',\n      '.callout-box',\n    ],\n  },\n};\n","export const PostlightComExtractor = {\n  domain: 'postlight.com',\n\n  title: {\n    selectors: [['meta[name=\"og:title\"]', 'value']],\n  },\n\n  author: {\n    selectors: [['meta[name=\"parsely-author\"]', 'value']],\n  },\n\n  date_published: {\n    selectors: [['meta[name=\"article:published_time\"]', 'value']],\n  },\n\n  dek: {\n    selectors: ['h2.single-hero__abstract'],\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  content: {\n    selectors: ['main.post'],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {},\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: [\n      'section.pl-post-link',\n      'aside',\n      'section.insights_featured_case_studies',\n    ],\n  },\n};\n","export const WwwInvestmentexecutiveComExtractor = {\n  domain: 'www.investmentexecutive.com',\n\n  title: {\n    selectors: ['h1'],\n  },\n\n  author: {\n    selectors: ['div[itemprop=\"author\"]'],\n  },\n\n  date_published: {\n    selectors: [['meta[itemprop=\"datePublished\"]', 'value']],\n  },\n\n  dek: {\n    selectors: [['meta[name=\"og:description\"]', 'value']],\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  content: {\n    selectors: ['section.article-body'],\n\n    clean: ['.hidden'],\n  },\n};\n","export const WwwCbcCaExtractor = {\n  domain: 'www.cbc.ca',\n\n  title: {\n    selectors: ['h1'],\n  },\n\n  author: {\n    selectors: ['.authorText', '.bylineDetails'],\n  },\n\n  date_published: {\n    selectors: [['.timeStamp[datetime]', 'datetime']],\n  },\n\n  dek: {\n    selectors: ['.deck'],\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']],\n  },\n\n  content: {\n    selectors: ['.story'],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {},\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: [],\n  },\n};\n","import cheerio from 'cheerio';\nimport stringDirection from 'string-direction';\n\nimport GenericContentExtractor from './content/extractor';\nimport GenericTitleExtractor from './title/extractor';\nimport GenericAuthorExtractor from './author/extractor';\nimport GenericDatePublishedExtractor from './date-published/extractor';\nimport GenericDekExtractor from './dek/extractor';\nimport GenericLeadImageUrlExtractor from './lead-image-url/extractor';\nimport GenericNextPageUrlExtractor from './next-page-url/extractor';\nimport GenericUrlExtractor from './url/extractor';\nimport GenericExcerptExtractor from './excerpt/extractor';\nimport GenericWordCountExtractor from './word-count/extractor';\n\nconst GenericExtractor = {\n  // This extractor is the default for all domains\n  domain: '*',\n  title: GenericTitleExtractor.extract,\n  date_published: GenericDatePublishedExtractor.extract,\n  author: GenericAuthorExtractor.extract,\n  content: GenericContentExtractor.extract.bind(GenericContentExtractor),\n  lead_image_url: GenericLeadImageUrlExtractor.extract,\n  dek: GenericDekExtractor.extract,\n  next_page_url: GenericNextPageUrlExtractor.extract,\n  url_and_domain: GenericUrlExtractor.extract,\n  excerpt: GenericExcerptExtractor.extract,\n  word_count: GenericWordCountExtractor.extract,\n  direction: ({ title }) => stringDirection.getDirection(title),\n\n  extract(options) {\n    const { html, $ } = options;\n\n    if (html && !$) {\n      const loaded = cheerio.load(html);\n      options.$ = loaded;\n    }\n\n    const title = this.title(options);\n    const date_published = this.date_published(options);\n    const author = this.author(options);\n    const content = this.content({ ...options, title });\n    const lead_image_url = this.lead_image_url({ ...options, content });\n    const dek = this.dek({ ...options, content });\n    const next_page_url = this.next_page_url(options);\n    const excerpt = this.excerpt({ ...options, content });\n    const word_count = this.word_count({ ...options, content });\n    const direction = this.direction({ title });\n    const { url, domain } = this.url_and_domain(options);\n\n    return {\n      title,\n      author,\n      date_published: date_published || null,\n      dek,\n      lead_image_url,\n      content,\n      next_page_url,\n      url,\n      domain,\n      excerpt,\n      word_count,\n      direction,\n    };\n  },\n};\n\nexport default GenericExtractor;\n","import cheerio from 'cheerio';\n\nimport { nodeIsSufficient } from '@/utils/dom';\nimport { cleanContent } from '@/cleaners';\nimport { normalizeSpaces } from '@/utils/text';\n\nimport extractBestNode from './extract-best-node';\n\nconst GenericContentExtractor = {\n  defaultOpts: {\n    stripUnlikelyCandidates: true,\n    weightNodes: true,\n    cleanConditionally: true,\n  },\n\n  // Extract the content for this resource - initially, pass in our\n  // most restrictive opts which will return the highest quality\n  // content. On each failure, retry with slightly more lax opts.\n  //\n  // :param return_type: string. If \"node\", should return the content\n  // as a cheerio node rather than as an HTML string.\n  //\n  // Opts:\n  // stripUnlikelyCandidates: Remove any elements that match\n  // non-article-like criteria first.(Like, does this element\n  //   have a classname of \"comment\")\n  //\n  // weightNodes: Modify an elements score based on whether it has\n  // certain classNames or IDs. Examples: Subtract if a node has\n  // a className of 'comment', Add if a node has an ID of\n  // 'entry-content'.\n  //\n  // cleanConditionally: Clean the node to return of some\n  // superfluous content. Things like forms, ads, etc.\n  extract({ $, html, title, url }, opts) {\n    opts = { ...this.defaultOpts, ...opts };\n\n    $ = $ || cheerio.load(html);\n\n    // Cascade through our extraction-specific opts in an ordered fashion,\n    // turning them off as we try to extract content.\n    let node = this.getContentNode($, title, url, opts);\n\n    if (nodeIsSufficient(node)) {\n      return this.cleanAndReturnNode(node, $);\n    }\n\n    // We didn't succeed on first pass, one by one disable our\n    // extraction opts and try again.\n    // eslint-disable-next-line no-restricted-syntax\n    for (const key of Reflect.ownKeys(opts).filter(k => opts[k] === true)) {\n      opts[key] = false;\n      $ = cheerio.load(html);\n\n      node = this.getContentNode($, title, url, opts);\n\n      if (nodeIsSufficient(node)) {\n        break;\n      }\n    }\n\n    return this.cleanAndReturnNode(node, $);\n  },\n\n  // Get node given current options\n  getContentNode($, title, url, opts) {\n    return cleanContent(extractBestNode($, opts), {\n      $,\n      cleanConditionally: opts.cleanConditionally,\n      title,\n      url,\n    });\n  },\n\n  // Once we got here, either we're at our last-resort node, or\n  // we broke early. Make sure we at least have -something- before we\n  // move forward.\n  cleanAndReturnNode(node, $) {\n    if (!node) {\n      return null;\n    }\n\n    return normalizeSpaces($.html(node));\n  },\n};\n\nexport default GenericContentExtractor;\n","// DOM manipulation\nexport {\n  default as stripUnlikelyCandidates,\n} from './strip-unlikely-candidates';\nexport { default as brsToPs } from './brs-to-ps';\nexport { default as paragraphize } from './paragraphize';\nexport { default as convertToParagraphs } from './convert-to-paragraphs';\nexport { default as convertNodeTo } from './convert-node-to';\nexport { default as cleanImages } from './clean-images';\nexport { default as markToKeep } from './mark-to-keep';\nexport { default as stripJunkTags } from './strip-junk-tags';\nexport { default as cleanHOnes } from './clean-h-ones';\nexport { default as cleanAttributes } from './clean-attributes';\nexport { default as removeEmpty } from './remove-empty';\nexport { default as cleanTags } from './clean-tags';\nexport { default as cleanHeaders } from './clean-headers';\nexport { default as rewriteTopLevel } from './rewrite-top-level';\nexport { default as makeLinksAbsolute } from './make-links-absolute';\nexport { textLength, linkDensity } from './link-density';\nexport { default as extractFromMeta } from './extract-from-meta';\nexport { default as extractFromSelectors } from './extract-from-selectors';\nexport { default as stripTags } from './strip-tags';\nexport { default as withinComment } from './within-comment';\nexport { default as nodeIsSufficient } from './node-is-sufficient';\nexport { default as isWordpress } from './is-wordpress';\nexport { default as getAttrs } from './get-attrs';\nexport { default as setAttr } from './set-attr';\nexport { default as setAttrs } from './set-attrs';\n","import { CANDIDATES_WHITELIST, CANDIDATES_BLACKLIST } from './constants';\n\nexport default function stripUnlikelyCandidates($) {\n  //  Loop through the provided document and remove any non-link nodes\n  //  that are unlikely candidates for article content.\n  //\n  //  Links are ignored because there are very often links to content\n  //  that are identified as non-body-content, but may be inside\n  //  article-like content.\n  //\n  //  :param $: a cheerio object to strip nodes from\n  //  :return $: the cleaned cheerio object\n  $('*')\n    .not('a')\n    .each((index, node) => {\n      const $node = $(node);\n      const classes = $node.attr('class');\n      const id = $node.attr('id');\n      if (!id && !classes) return;\n\n      const classAndId = `${classes || ''} ${id || ''}`;\n      if (CANDIDATES_WHITELIST.test(classAndId)) {\n        return;\n      }\n      if (CANDIDATES_BLACKLIST.test(classAndId)) {\n        $node.remove();\n      }\n    });\n\n  return $;\n}\n","// Spacer images to be removed\nexport const SPACER_RE = new RegExp('transparent|spacer|blank', 'i');\n\n// The class we will use to mark elements we want to keep\n// but would normally remove\nexport const KEEP_CLASS = 'mercury-parser-keep';\n\nexport const KEEP_SELECTORS = [\n  'iframe[src^=\"https://www.youtube.com\"]',\n  'iframe[src^=\"https://www.youtube-nocookie.com\"]',\n  'iframe[src^=\"http://www.youtube.com\"]',\n  'iframe[src^=\"https://player.vimeo\"]',\n  'iframe[src^=\"http://player.vimeo\"]',\n  'iframe[src^=\"https://www.redditmedia.com\"]',\n];\n\n// A list of tags to strip from the output if we encounter them.\nexport const STRIP_OUTPUT_TAGS = [\n  'title',\n  'script',\n  'noscript',\n  'link',\n  'style',\n  'hr',\n  'embed',\n  'iframe',\n  'object',\n];\n\n// cleanAttributes\nexport const REMOVE_ATTRS = ['style', 'align'];\nexport const REMOVE_ATTR_SELECTORS = REMOVE_ATTRS.map(\n  selector => `[${selector}]`\n);\nexport const REMOVE_ATTR_LIST = REMOVE_ATTRS.join(',');\nexport const WHITELIST_ATTRS = [\n  'src',\n  'srcset',\n  'sizes',\n  'type',\n  'href',\n  'class',\n  'id',\n  'alt',\n  'xlink:href',\n  'width',\n  'height',\n];\n\nexport const WHITELIST_ATTRS_RE = new RegExp(\n  `^(${WHITELIST_ATTRS.join('|')})$`,\n  'i'\n);\n\n// removeEmpty\nexport const REMOVE_EMPTY_TAGS = ['p'];\nexport const REMOVE_EMPTY_SELECTORS = REMOVE_EMPTY_TAGS.map(\n  tag => `${tag}:empty`\n).join(',');\n\n// cleanTags\nexport const CLEAN_CONDITIONALLY_TAGS = [\n  'ul',\n  'ol',\n  'table',\n  'div',\n  'button',\n  'form',\n].join(',');\n\n// cleanHeaders\nconst HEADER_TAGS = ['h2', 'h3', 'h4', 'h5', 'h6'];\nexport const HEADER_TAG_LIST = HEADER_TAGS.join(',');\n\n// // CONTENT FETCHING CONSTANTS ////\n\n// A list of strings that can be considered unlikely candidates when\n// extracting content from a resource. These strings are joined together\n// and then tested for existence using re:test, so may contain simple,\n// non-pipe style regular expression queries if necessary.\nexport const UNLIKELY_CANDIDATES_BLACKLIST = [\n  'ad-break',\n  'adbox',\n  'advert',\n  'addthis',\n  'agegate',\n  'aux',\n  'blogger-labels',\n  'combx',\n  'comment',\n  'conversation',\n  'disqus',\n  'entry-unrelated',\n  'extra',\n  'foot',\n  // 'form', // This is too generic, has too many false positives\n  'header',\n  'hidden',\n  'loader',\n  'login', // Note: This can hit 'blogindex'.\n  'menu',\n  'meta',\n  'nav',\n  'outbrain',\n  'pager',\n  'pagination',\n  'predicta', // readwriteweb inline ad box\n  'presence_control_external', // lifehacker.com container full of false positives\n  'popup',\n  'printfriendly',\n  'related',\n  'remove',\n  'remark',\n  'rss',\n  'share',\n  'shoutbox',\n  'sidebar',\n  'sociable',\n  'sponsor',\n  'taboola',\n  'tools',\n];\n\n// A list of strings that can be considered LIKELY candidates when\n// extracting content from a resource. Essentially, the inverse of the\n// blacklist above - if something matches both blacklist and whitelist,\n// it is kept. This is useful, for example, if something has a className\n// of \"rss-content entry-content\". It matched 'rss', so it would normally\n// be removed, however, it's also the entry content, so it should be left\n// alone.\n//\n// These strings are joined together and then tested for existence using\n// re:test, so may contain simple, non-pipe style regular expression queries\n// if necessary.\nexport const UNLIKELY_CANDIDATES_WHITELIST = [\n  'and',\n  'article',\n  'body',\n  'blogindex',\n  'column',\n  'content',\n  'entry-content-asset',\n  'format', // misuse of form\n  'hfeed',\n  'hentry',\n  'hatom',\n  'main',\n  'page',\n  'posts',\n  'shadow',\n];\n\n// A list of tags which, if found inside, should cause a <div /> to NOT\n// be turned into a paragraph tag. Shallow div tags without these elements\n// should be turned into <p /> tags.\nexport const DIV_TO_P_BLOCK_TAGS = [\n  'a',\n  'blockquote',\n  'dl',\n  'div',\n  'img',\n  'p',\n  'pre',\n  'table',\n].join(',');\n\n// A list of tags that should be ignored when trying to find the top candidate\n// for a document.\nexport const NON_TOP_CANDIDATE_TAGS = [\n  'br',\n  'b',\n  'i',\n  'label',\n  'hr',\n  'area',\n  'base',\n  'basefont',\n  'input',\n  'img',\n  'link',\n  'meta',\n];\n\nexport const NON_TOP_CANDIDATE_TAGS_RE = new RegExp(\n  `^(${NON_TOP_CANDIDATE_TAGS.join('|')})$`,\n  'i'\n);\n\n// A list of selectors that specify, very clearly, either hNews or other\n// very content-specific style content, like Blogger templates.\n// More examples here: http://microformats.org/wiki/blog-post-formats\nexport const HNEWS_CONTENT_SELECTORS = [\n  ['.hentry', '.entry-content'],\n  ['entry', '.entry-content'],\n  ['.entry', '.entry_content'],\n  ['.post', '.postbody'],\n  ['.post', '.post_body'],\n  ['.post', '.post-body'],\n];\n\nexport const PHOTO_HINTS = ['figure', 'photo', 'image', 'caption'];\nexport const PHOTO_HINTS_RE = new RegExp(PHOTO_HINTS.join('|'), 'i');\n\n// A list of strings that denote a positive scoring for this content as being\n// an article container. Checked against className and id.\n//\n// TODO: Perhaps have these scale based on their odds of being quality?\nexport const POSITIVE_SCORE_HINTS = [\n  'article',\n  'articlecontent',\n  'instapaper_body',\n  'blog',\n  'body',\n  'content',\n  'entry-content-asset',\n  'entry',\n  'hentry',\n  'main',\n  'Normal',\n  'page',\n  'pagination',\n  'permalink',\n  'post',\n  'story',\n  'text',\n  '[-_]copy', // usatoday\n  '\\\\Bcopy',\n];\n\n// The above list, joined into a matching regular expression\nexport const POSITIVE_SCORE_RE = new RegExp(\n  POSITIVE_SCORE_HINTS.join('|'),\n  'i'\n);\n\n// Readability publisher-specific guidelines\nexport const READABILITY_ASSET = new RegExp('entry-content-asset', 'i');\n\n// A list of strings that denote a negative scoring for this content as being\n// an article container. Checked against className and id.\n//\n// TODO: Perhaps have these scale based on their odds of being quality?\nexport const NEGATIVE_SCORE_HINTS = [\n  'adbox',\n  'advert',\n  'author',\n  'bio',\n  'bookmark',\n  'bottom',\n  'byline',\n  'clear',\n  'com-',\n  'combx',\n  'comment',\n  'comment\\\\B',\n  'contact',\n  'copy',\n  'credit',\n  'crumb',\n  'date',\n  'deck',\n  'excerpt',\n  'featured', // tnr.com has a featured_content which throws us off\n  'foot',\n  'footer',\n  'footnote',\n  'graf',\n  'head',\n  'info',\n  'infotext', // newscientist.com copyright\n  'instapaper_ignore',\n  'jump',\n  'linebreak',\n  'link',\n  'masthead',\n  'media',\n  'meta',\n  'modal',\n  'outbrain', // slate.com junk\n  'promo',\n  'pr_', // autoblog - press release\n  'related',\n  'respond',\n  'roundcontent', // lifehacker restricted content warning\n  'scroll',\n  'secondary',\n  'share',\n  'shopping',\n  'shoutbox',\n  'side',\n  'sidebar',\n  'sponsor',\n  'stamp',\n  'sub',\n  'summary',\n  'tags',\n  'tools',\n  'widget',\n];\n// The above list, joined into a matching regular expression\nexport const NEGATIVE_SCORE_RE = new RegExp(\n  NEGATIVE_SCORE_HINTS.join('|'),\n  'i'\n);\n\n// XPath to try to determine if a page is wordpress. Not always successful.\nexport const IS_WP_SELECTOR = 'meta[name=generator][value^=WordPress]';\n\n// Match a digit. Pretty clear.\nexport const DIGIT_RE = new RegExp('[0-9]');\n\n// A list of words that, if found in link text or URLs, likely mean that\n// this link is not a next page link.\nexport const EXTRANEOUS_LINK_HINTS = [\n  'print',\n  'archive',\n  'comment',\n  'discuss',\n  'e-mail',\n  'email',\n  'share',\n  'reply',\n  'all',\n  'login',\n  'sign',\n  'single',\n  'adx',\n  'entry-unrelated',\n];\nexport const EXTRANEOUS_LINK_HINTS_RE = new RegExp(\n  EXTRANEOUS_LINK_HINTS.join('|'),\n  'i'\n);\n\n// Match any phrase that looks like it could be page, or paging, or pagination\nexport const PAGE_RE = new RegExp('pag(e|ing|inat)', 'i');\n\n// Match any link text/classname/id that looks like it could mean the next\n// page. Things like: next, continue, >, >>, » but not >|, »| as those can\n// mean last page.\n// export const NEXT_LINK_TEXT_RE = new RegExp('(next|weiter|continue|>([^\\|]|$)|»([^\\|]|$))', 'i');\nexport const NEXT_LINK_TEXT_RE = /(next|weiter|continue|>([^|]|$)|»([^|]|$))/i;\n\n// Match any link text/classname/id that looks like it is an end link: things\n// like \"first\", \"last\", \"end\", etc.\nexport const CAP_LINK_TEXT_RE = new RegExp('(first|last|end)', 'i');\n\n// Match any link text/classname/id that looks like it means the previous\n// page.\nexport const PREV_LINK_TEXT_RE = new RegExp('(prev|earl|old|new|<|«)', 'i');\n\n// Match 2 or more consecutive <br> tags\nexport const BR_TAGS_RE = new RegExp('(<br[^>]*>[ \\n\\r\\t]*){2,}', 'i');\n\n// Match 1 BR tag.\nexport const BR_TAG_RE = new RegExp('<br[^>]*>', 'i');\n\n// A list of all of the block level tags known in HTML5 and below. Taken from\n// http://bit.ly/qneNIT\nexport const BLOCK_LEVEL_TAGS = [\n  'article',\n  'aside',\n  'blockquote',\n  'body',\n  'br',\n  'button',\n  'canvas',\n  'caption',\n  'col',\n  'colgroup',\n  'dd',\n  'div',\n  'dl',\n  'dt',\n  'embed',\n  'fieldset',\n  'figcaption',\n  'figure',\n  'footer',\n  'form',\n  'h1',\n  'h2',\n  'h3',\n  'h4',\n  'h5',\n  'h6',\n  'header',\n  'hgroup',\n  'hr',\n  'li',\n  'map',\n  'object',\n  'ol',\n  'output',\n  'p',\n  'pre',\n  'progress',\n  'section',\n  'table',\n  'tbody',\n  'textarea',\n  'tfoot',\n  'th',\n  'thead',\n  'tr',\n  'ul',\n  'video',\n];\nexport const BLOCK_LEVEL_TAGS_RE = new RegExp(\n  `^(${BLOCK_LEVEL_TAGS.join('|')})$`,\n  'i'\n);\n\n// The removal is implemented as a blacklist and whitelist, this test finds\n// blacklisted elements that aren't whitelisted. We do this all in one\n// expression-both because it's only one pass, and because this skips the\n// serialization for whitelisted nodes.\nconst candidatesBlacklist = UNLIKELY_CANDIDATES_BLACKLIST.join('|');\nexport const CANDIDATES_BLACKLIST = new RegExp(candidatesBlacklist, 'i');\n\nconst candidatesWhitelist = UNLIKELY_CANDIDATES_WHITELIST.join('|');\nexport const CANDIDATES_WHITELIST = new RegExp(candidatesWhitelist, 'i');\n\nexport const UNLIKELY_RE = new RegExp(\n  `!(${candidatesWhitelist})|(${candidatesBlacklist})`,\n  'i'\n);\n\nexport const PARAGRAPH_SCORE_TAGS = new RegExp('^(p|li|span|pre)$', 'i');\nexport const CHILD_CONTENT_TAGS = new RegExp('^(td|blockquote|ol|ul|dl)$', 'i');\nexport const BAD_TAGS = new RegExp('^(address|form)$', 'i');\n\nexport const HTML_OR_BODY_RE = new RegExp('^(html|body)$', 'i');\n","import { paragraphize } from './index';\n\n// ## NOTES:\n// Another good candidate for refactoring/optimizing.\n// Very imperative code, I don't love it. - AP\n\n//  Given cheerio object, convert consecutive <br /> tags into\n//  <p /> tags instead.\n//\n//  :param $: A cheerio object\n\nexport default function brsToPs($) {\n  let collapsing = false;\n  $('br').each((index, element) => {\n    const $element = $(element);\n    const nextElement = $element.next().get(0);\n\n    if (nextElement && nextElement.tagName.toLowerCase() === 'br') {\n      collapsing = true;\n      $element.remove();\n    } else if (collapsing) {\n      collapsing = false;\n      paragraphize(element, $, true);\n    }\n  });\n\n  return $;\n}\n","import { BLOCK_LEVEL_TAGS_RE } from './constants';\n\n// Given a node, turn it into a P if it is not already a P, and\n// make sure it conforms to the constraints of a P tag (I.E. does\n// not contain any other block tags.)\n//\n// If the node is a <br />, it treats the following inline siblings\n// as if they were its children.\n//\n// :param node: The node to paragraphize; this is a raw node\n// :param $: The cheerio object to handle dom manipulation\n// :param br: Whether or not the passed node is a br\n\nexport default function paragraphize(node, $, br = false) {\n  const $node = $(node);\n\n  if (br) {\n    let sibling = node.nextSibling;\n    const p = $('<p></p>');\n\n    // while the next node is text or not a block level element\n    // append it to a new p node\n    while (\n      sibling &&\n      !(sibling.tagName && BLOCK_LEVEL_TAGS_RE.test(sibling.tagName))\n    ) {\n      const { nextSibling } = sibling;\n      $(sibling).appendTo(p);\n      sibling = nextSibling;\n    }\n\n    $node.replaceWith(p);\n    $node.remove();\n    return $;\n  }\n\n  return $;\n}\n","import { brsToPs, convertNodeTo } from '@/utils/dom';\n\nimport { DIV_TO_P_BLOCK_TAGS } from './constants';\n\nfunction convertDivs($) {\n  $('div').each((index, div) => {\n    const $div = $(div);\n    const convertible = $div.children(DIV_TO_P_BLOCK_TAGS).length === 0;\n\n    if (convertible) {\n      convertNodeTo($div, $, 'p');\n    }\n  });\n\n  return $;\n}\n\nfunction convertSpans($) {\n  $('span').each((index, span) => {\n    const $span = $(span);\n    const convertible = $span.parents('p, div, li, figcaption').length === 0;\n    if (convertible) {\n      convertNodeTo($span, $, 'p');\n    }\n  });\n\n  return $;\n}\n\n// Loop through the provided doc, and convert any p-like elements to\n// actual paragraph tags.\n//\n//   Things fitting this criteria:\n//   * Multiple consecutive <br /> tags.\n//   * <div /> tags without block level elements inside of them\n//   * <span /> tags who are not children of <p /> or <div /> tags.\n//\n//   :param $: A cheerio object to search\n//   :return cheerio object with new p elements\n//   (By-reference mutation, though. Returned just for convenience.)\n\nexport default function convertToParagraphs($) {\n  $ = brsToPs($);\n  $ = convertDivs($);\n  $ = convertSpans($);\n\n  return $;\n}\n","import { getAttrs } from '@/utils/dom';\n\nexport default function convertNodeTo($node, $, tag = 'p') {\n  const node = $node.get(0);\n  if (!node) {\n    return $;\n  }\n  const attrs = getAttrs(node) || {};\n\n  const attribString = Reflect.ownKeys(attrs)\n    .map(key => `${key}=${attrs[key]}`)\n    .join(' ');\n  let html;\n\n  if ($.browser) {\n    // In the browser, the contents of noscript tags aren't rendered, therefore\n    // transforms on the noscript tag (commonly used for lazy-loading) don't work\n    // as expected. This test case handles that\n    html =\n      node.tagName.toLowerCase() === 'noscript' ? $node.text() : $node.html();\n  } else {\n    html = $node.contents();\n  }\n  $node.replaceWith(`<${tag} ${attribString}>${html}</${tag}>`);\n  return $;\n}\n","import { SPACER_RE } from './constants';\n\nfunction cleanForHeight($img, $) {\n  const height = parseInt($img.attr('height'), 10);\n  const width = parseInt($img.attr('width'), 10) || 20;\n\n  // Remove images that explicitly have very small heights or\n  // widths, because they are most likely shims or icons,\n  // which aren't very useful for reading.\n  if ((height || 20) < 10 || width < 10) {\n    $img.remove();\n  } else if (height) {\n    // Don't ever specify a height on images, so that we can\n    // scale with respect to width without screwing up the\n    // aspect ratio.\n    $img.removeAttr('height');\n  }\n\n  return $;\n}\n\n// Cleans out images where the source string matches transparent/spacer/etc\n// TODO This seems very aggressive - AP\nfunction removeSpacers($img, $) {\n  if (SPACER_RE.test($img.attr('src'))) {\n    $img.remove();\n  }\n\n  return $;\n}\n\nexport default function cleanImages($article, $) {\n  $article.find('img').each((index, img) => {\n    const $img = $(img);\n\n    cleanForHeight($img, $);\n    removeSpacers($img, $);\n  });\n\n  return $;\n}\n","import URL from 'url';\n\nimport { KEEP_SELECTORS, KEEP_CLASS } from './constants';\n\nexport default function markToKeep(article, $, url, tags = []) {\n  if (tags.length === 0) {\n    tags = KEEP_SELECTORS;\n  }\n\n  if (url) {\n    const { protocol, hostname } = URL.parse(url);\n    tags = [...tags, `iframe[src^=\"${protocol}//${hostname}\"]`];\n  }\n\n  $(tags.join(','), article).addClass(KEEP_CLASS);\n\n  return $;\n}\n","import { STRIP_OUTPUT_TAGS, KEEP_CLASS } from './constants';\n\nexport default function stripJunkTags(article, $, tags = []) {\n  if (tags.length === 0) {\n    tags = STRIP_OUTPUT_TAGS;\n  }\n\n  // Remove matching elements, but ignore\n  // any element with a class of mercury-parser-keep\n  $(tags.join(','), article)\n    .not(`.${KEEP_CLASS}`)\n    .remove();\n\n  return $;\n}\n","import { convertNodeTo } from '@/utils/dom';\n\n// H1 tags are typically the article title, which should be extracted\n// by the title extractor instead. If there's less than 3 of them (<3),\n// strip them. Otherwise, turn 'em into H2s.\nexport default function cleanHOnes(article, $) {\n  const $hOnes = $('h1', article);\n\n  if ($hOnes.length < 3) {\n    $hOnes.each((index, node) => $(node).remove());\n  } else {\n    $hOnes.each((index, node) => {\n      convertNodeTo($(node), $, 'h2');\n    });\n  }\n\n  return $;\n}\n","import { getAttrs, setAttrs } from '@/utils/dom';\n\nimport { WHITELIST_ATTRS_RE, KEEP_CLASS } from './constants';\n\nfunction removeAllButWhitelist($article, $) {\n  $article.find('*').each((index, node) => {\n    const attrs = getAttrs(node);\n\n    setAttrs(\n      node,\n      Reflect.ownKeys(attrs).reduce((acc, attr) => {\n        if (WHITELIST_ATTRS_RE.test(attr)) {\n          return { ...acc, [attr]: attrs[attr] };\n        }\n\n        return acc;\n      }, {})\n    );\n  });\n\n  // Remove the mercury-parser-keep class from result\n  $(`.${KEEP_CLASS}`, $article).removeClass(KEEP_CLASS);\n\n  return $article;\n}\n\n// Remove attributes like style or align\nexport default function cleanAttributes($article, $) {\n  // Grabbing the parent because at this point\n  // $article will be wrapped in a div which will\n  // have a score set on it.\n  return removeAllButWhitelist(\n    $article.parent().length ? $article.parent() : $article,\n    $\n  );\n}\n","export default function removeEmpty($article, $) {\n  $article.find('p').each((index, p) => {\n    const $p = $(p);\n    if ($p.find('iframe, img').length === 0 && $p.text().trim() === '')\n      $p.remove();\n  });\n\n  return $;\n}\n","import {\n  getScore,\n  setScore,\n  getOrInitScore,\n  scoreCommas,\n} from '@/extractors/generic/content/scoring';\n\nimport { CLEAN_CONDITIONALLY_TAGS, KEEP_CLASS } from './constants';\nimport { normalizeSpaces } from '../text';\nimport { linkDensity } from './index';\n\nfunction removeUnlessContent($node, $, weight) {\n  // Explicitly save entry-content-asset tags, which are\n  // noted as valuable in the Publisher guidelines. For now\n  // this works everywhere. We may want to consider making\n  // this less of a sure-thing later.\n  if ($node.hasClass('entry-content-asset')) {\n    return;\n  }\n\n  const content = normalizeSpaces($node.text());\n\n  if (scoreCommas(content) < 10) {\n    const pCount = $('p', $node).length;\n    const inputCount = $('input', $node).length;\n\n    // Looks like a form, too many inputs.\n    if (inputCount > pCount / 3) {\n      $node.remove();\n      return;\n    }\n\n    const contentLength = content.length;\n    const imgCount = $('img', $node).length;\n\n    // Content is too short, and there are no images, so\n    // this is probably junk content.\n    if (contentLength < 25 && imgCount === 0) {\n      $node.remove();\n      return;\n    }\n\n    const density = linkDensity($node);\n\n    // Too high of link density, is probably a menu or\n    // something similar.\n    // console.log(weight, density, contentLength)\n    if (weight < 25 && density > 0.2 && contentLength > 75) {\n      $node.remove();\n      return;\n    }\n\n    // Too high of a link density, despite the score being\n    // high.\n    if (weight >= 25 && density > 0.5) {\n      // Don't remove the node if it's a list and the\n      // previous sibling starts with a colon though. That\n      // means it's probably content.\n      const tagName = $node.get(0).tagName.toLowerCase();\n      const nodeIsList = tagName === 'ol' || tagName === 'ul';\n      if (nodeIsList) {\n        const previousNode = $node.prev();\n        if (\n          previousNode &&\n          normalizeSpaces(previousNode.text()).slice(-1) === ':'\n        ) {\n          return;\n        }\n      }\n\n      $node.remove();\n      return;\n    }\n\n    const scriptCount = $('script', $node).length;\n\n    // Too many script tags, not enough content.\n    if (scriptCount > 0 && contentLength < 150) {\n      $node.remove();\n    }\n  }\n}\n\n// Given an article, clean it of some superfluous content specified by\n// tags. Things like forms, ads, etc.\n//\n// Tags is an array of tag name's to search through. (like div, form,\n// etc)\n//\n// Return this same doc.\nexport default function cleanTags($article, $) {\n  $(CLEAN_CONDITIONALLY_TAGS, $article).each((index, node) => {\n    const $node = $(node);\n    // If marked to keep, skip it\n    if ($node.hasClass(KEEP_CLASS) || $node.find(`.${KEEP_CLASS}`).length > 0)\n      return;\n\n    let weight = getScore($node);\n    if (!weight) {\n      weight = getOrInitScore($node, $);\n      setScore($node, $, weight);\n    }\n\n    // drop node if its weight is < 0\n    if (weight < 0) {\n      $node.remove();\n    } else {\n      // deteremine if node seems like content\n      removeUnlessContent($node, $, weight);\n    }\n  });\n\n  return $;\n}\n","// Scoring\nexport { default as getWeight } from './get-weight';\nexport { default as getScore } from './get-score';\nexport { default as scoreCommas } from './score-commas';\nexport { default as scoreLength } from './score-length';\nexport { default as scoreParagraph } from './score-paragraph';\nexport { default as setScore } from './set-score';\nexport { default as addScore } from './add-score';\nexport { default as addToParent } from './add-to-parent';\nexport { default as getOrInitScore } from './get-or-init-score';\nexport { default as scoreNode } from './score-node';\nexport { default as scoreContent } from './score-content';\nexport { default as findTopCandidate } from './find-top-candidate';\n","import {\n  NEGATIVE_SCORE_RE,\n  POSITIVE_SCORE_RE,\n  PHOTO_HINTS_RE,\n  READABILITY_ASSET,\n} from './constants';\n\n// Get the score of a node based on its className and id.\nexport default function getWeight(node) {\n  const classes = node.attr('class');\n  const id = node.attr('id');\n  let score = 0;\n\n  if (id) {\n    // if id exists, try to score on both positive and negative\n    if (POSITIVE_SCORE_RE.test(id)) {\n      score += 25;\n    }\n    if (NEGATIVE_SCORE_RE.test(id)) {\n      score -= 25;\n    }\n  }\n\n  if (classes) {\n    if (score === 0) {\n      // if classes exist and id did not contribute to score\n      // try to score on both positive and negative\n      if (POSITIVE_SCORE_RE.test(classes)) {\n        score += 25;\n      }\n      if (NEGATIVE_SCORE_RE.test(classes)) {\n        score -= 25;\n      }\n    }\n\n    // even if score has been set by id, add score for\n    // possible photo matches\n    // \"try to keep photos if we can\"\n    if (PHOTO_HINTS_RE.test(classes)) {\n      score += 10;\n    }\n\n    // add 25 if class matches entry-content-asset,\n    // a class apparently instructed for use in the\n    // Readability publisher guidelines\n    // https://www.readability.com/developers/guidelines\n    if (READABILITY_ASSET.test(classes)) {\n      score += 25;\n    }\n  }\n\n  return score;\n}\n","// // CONTENT FETCHING CONSTANTS ////\n\n// A list of strings that can be considered unlikely candidates when\n// extracting content from a resource. These strings are joined together\n// and then tested for existence using re:test, so may contain simple,\n// non-pipe style regular expression queries if necessary.\nexport const UNLIKELY_CANDIDATES_BLACKLIST = [\n  'ad-break',\n  'adbox',\n  'advert',\n  'addthis',\n  'agegate',\n  'aux',\n  'blogger-labels',\n  'combx',\n  'comment',\n  'conversation',\n  'disqus',\n  'entry-unrelated',\n  'extra',\n  'foot',\n  'form',\n  'header',\n  'hidden',\n  'loader',\n  'login', // Note: This can hit 'blogindex'.\n  'menu',\n  'meta',\n  'nav',\n  'pager',\n  'pagination',\n  'predicta', // readwriteweb inline ad box\n  'presence_control_external', // lifehacker.com container full of false positives\n  'popup',\n  'printfriendly',\n  'related',\n  'remove',\n  'remark',\n  'rss',\n  'share',\n  'shoutbox',\n  'sidebar',\n  'sociable',\n  'sponsor',\n  'tools',\n];\n\n// A list of strings that can be considered LIKELY candidates when\n// extracting content from a resource. Essentially, the inverse of the\n// blacklist above - if something matches both blacklist and whitelist,\n// it is kept. This is useful, for example, if something has a className\n// of \"rss-content entry-content\". It matched 'rss', so it would normally\n// be removed, however, it's also the entry content, so it should be left\n// alone.\n//\n// These strings are joined together and then tested for existence using\n// re:test, so may contain simple, non-pipe style regular expression queries\n// if necessary.\nexport const UNLIKELY_CANDIDATES_WHITELIST = [\n  'and',\n  'article',\n  'body',\n  'blogindex',\n  'column',\n  'content',\n  'entry-content-asset',\n  'format', // misuse of form\n  'hfeed',\n  'hentry',\n  'hatom',\n  'main',\n  'page',\n  'posts',\n  'shadow',\n];\n\n// A list of tags which, if found inside, should cause a <div /> to NOT\n// be turned into a paragraph tag. Shallow div tags without these elements\n// should be turned into <p /> tags.\nexport const DIV_TO_P_BLOCK_TAGS = [\n  'a',\n  'blockquote',\n  'dl',\n  'div',\n  'img',\n  'p',\n  'pre',\n  'table',\n].join(',');\n\n// A list of tags that should be ignored when trying to find the top candidate\n// for a document.\nexport const NON_TOP_CANDIDATE_TAGS = [\n  'br',\n  'b',\n  'i',\n  'label',\n  'hr',\n  'area',\n  'base',\n  'basefont',\n  'input',\n  'img',\n  'link',\n  'meta',\n];\n\nexport const NON_TOP_CANDIDATE_TAGS_RE = new RegExp(\n  `^(${NON_TOP_CANDIDATE_TAGS.join('|')})$`,\n  'i'\n);\n\n// A list of selectors that specify, very clearly, either hNews or other\n// very content-specific style content, like Blogger templates.\n// More examples here: http://microformats.org/wiki/blog-post-formats\nexport const HNEWS_CONTENT_SELECTORS = [\n  ['.hentry', '.entry-content'],\n  ['entry', '.entry-content'],\n  ['.entry', '.entry_content'],\n  ['.post', '.postbody'],\n  ['.post', '.post_body'],\n  ['.post', '.post-body'],\n];\n\nexport const PHOTO_HINTS = ['figure', 'photo', 'image', 'caption'];\nexport const PHOTO_HINTS_RE = new RegExp(PHOTO_HINTS.join('|'), 'i');\n\n// A list of strings that denote a positive scoring for this content as being\n// an article container. Checked against className and id.\n//\n// TODO: Perhaps have these scale based on their odds of being quality?\nexport const POSITIVE_SCORE_HINTS = [\n  'article',\n  'articlecontent',\n  'instapaper_body',\n  'blog',\n  'body',\n  'content',\n  'entry-content-asset',\n  'entry',\n  'hentry',\n  'main',\n  'Normal',\n  'page',\n  'pagination',\n  'permalink',\n  'post',\n  'story',\n  'text',\n  '[-_]copy', // usatoday\n  '\\\\Bcopy',\n];\n\n// The above list, joined into a matching regular expression\nexport const POSITIVE_SCORE_RE = new RegExp(\n  POSITIVE_SCORE_HINTS.join('|'),\n  'i'\n);\n\n// Readability publisher-specific guidelines\nexport const READABILITY_ASSET = new RegExp('entry-content-asset', 'i');\n\n// A list of strings that denote a negative scoring for this content as being\n// an article container. Checked against className and id.\n//\n// TODO: Perhaps have these scale based on their odds of being quality?\nexport const NEGATIVE_SCORE_HINTS = [\n  'adbox',\n  'advert',\n  'author',\n  'bio',\n  'bookmark',\n  'bottom',\n  'byline',\n  'clear',\n  'com-',\n  'combx',\n  'comment',\n  'comment\\\\B',\n  'contact',\n  'copy',\n  'credit',\n  'crumb',\n  'date',\n  'deck',\n  'excerpt',\n  'featured', // tnr.com has a featured_content which throws us off\n  'foot',\n  'footer',\n  'footnote',\n  'graf',\n  'head',\n  'info',\n  'infotext', // newscientist.com copyright\n  'instapaper_ignore',\n  'jump',\n  'linebreak',\n  'link',\n  'masthead',\n  'media',\n  'meta',\n  'modal',\n  'outbrain', // slate.com junk\n  'promo',\n  'pr_', // autoblog - press release\n  'related',\n  'respond',\n  'roundcontent', // lifehacker restricted content warning\n  'scroll',\n  'secondary',\n  'share',\n  'shopping',\n  'shoutbox',\n  'side',\n  'sidebar',\n  'sponsor',\n  'stamp',\n  'sub',\n  'summary',\n  'tags',\n  'tools',\n  'widget',\n];\n// The above list, joined into a matching regular expression\nexport const NEGATIVE_SCORE_RE = new RegExp(\n  NEGATIVE_SCORE_HINTS.join('|'),\n  'i'\n);\n\n// Match a digit. Pretty clear.\nexport const DIGIT_RE = new RegExp('[0-9]');\n\n// Match 2 or more consecutive <br> tags\nexport const BR_TAGS_RE = new RegExp('(<br[^>]*>[ \\n\\r\\t]*){2,}', 'i');\n\n// Match 1 BR tag.\nexport const BR_TAG_RE = new RegExp('<br[^>]*>', 'i');\n\n// A list of all of the block level tags known in HTML5 and below. Taken from\n// http://bit.ly/qneNIT\nexport const BLOCK_LEVEL_TAGS = [\n  'article',\n  'aside',\n  'blockquote',\n  'body',\n  'br',\n  'button',\n  'canvas',\n  'caption',\n  'col',\n  'colgroup',\n  'dd',\n  'div',\n  'dl',\n  'dt',\n  'embed',\n  'fieldset',\n  'figcaption',\n  'figure',\n  'footer',\n  'form',\n  'h1',\n  'h2',\n  'h3',\n  'h4',\n  'h5',\n  'h6',\n  'header',\n  'hgroup',\n  'hr',\n  'li',\n  'map',\n  'object',\n  'ol',\n  'output',\n  'p',\n  'pre',\n  'progress',\n  'section',\n  'table',\n  'tbody',\n  'textarea',\n  'tfoot',\n  'th',\n  'thead',\n  'tr',\n  'ul',\n  'video',\n];\nexport const BLOCK_LEVEL_TAGS_RE = new RegExp(\n  `^(${BLOCK_LEVEL_TAGS.join('|')})$`,\n  'i'\n);\n\n// The removal is implemented as a blacklist and whitelist, this test finds\n// blacklisted elements that aren't whitelisted. We do this all in one\n// expression-both because it's only one pass, and because this skips the\n// serialization for whitelisted nodes.\nconst candidatesBlacklist = UNLIKELY_CANDIDATES_BLACKLIST.join('|');\nexport const CANDIDATES_BLACKLIST = new RegExp(candidatesBlacklist, 'i');\n\nconst candidatesWhitelist = UNLIKELY_CANDIDATES_WHITELIST.join('|');\nexport const CANDIDATES_WHITELIST = new RegExp(candidatesWhitelist, 'i');\n\nexport const UNLIKELY_RE = new RegExp(\n  `!(${candidatesWhitelist})|(${candidatesBlacklist})`,\n  'i'\n);\n\nexport const PARAGRAPH_SCORE_TAGS = new RegExp('^(p|li|span|pre)$', 'i');\nexport const CHILD_CONTENT_TAGS = new RegExp('^(td|blockquote|ol|ul|dl)$', 'i');\nexport const BAD_TAGS = new RegExp('^(address|form)$', 'i');\n\nexport const HTML_OR_BODY_RE = new RegExp('^(html|body)$', 'i');\n","// returns the score of a node based on\n// the node's score attribute\n// returns null if no score set\nexport default function getScore($node) {\n  return parseFloat($node.attr('score')) || null;\n}\n","// return 1 for every comma in text\nexport default function scoreCommas(text) {\n  return (text.match(/,/g) || []).length;\n}\n","const idkRe = new RegExp('^(p|pre)$', 'i');\n\nexport default function scoreLength(textLength, tagName = 'p') {\n  const chunks = textLength / 50;\n\n  if (chunks > 0) {\n    let lengthBonus;\n\n    // No idea why p or pre are being tamped down here\n    // but just following the source for now\n    // Not even sure why tagName is included here,\n    // since this is only being called from the context\n    // of scoreParagraph\n    if (idkRe.test(tagName)) {\n      lengthBonus = chunks - 2;\n    } else {\n      lengthBonus = chunks - 1.25;\n    }\n\n    return Math.min(Math.max(lengthBonus, 0), 3);\n  }\n\n  return 0;\n}\n","import { scoreCommas, scoreLength } from './index';\n\n// Score a paragraph using various methods. Things like number of\n// commas, etc. Higher is better.\nexport default function scoreParagraph(node) {\n  let score = 1;\n  const text = node.text().trim();\n  const textLength = text.length;\n\n  // If this paragraph is less than 25 characters, don't count it.\n  if (textLength < 25) {\n    return 0;\n  }\n\n  // Add points for any commas within this paragraph\n  score += scoreCommas(text);\n\n  // For every 50 characters in this paragraph, add another point. Up\n  // to 3 points.\n  score += scoreLength(textLength);\n\n  // Articles can end with short paragraphs when people are being clever\n  // but they can also end with short paragraphs setting up lists of junk\n  // that we strip. This negative tweaks junk setup paragraphs just below\n  // the cutoff threshold.\n  if (text.slice(-1) === ':') {\n    score -= 1;\n  }\n\n  return score;\n}\n","export default function setScore($node, $, score) {\n  $node.attr('score', score);\n  return $node;\n}\n","import { getOrInitScore, setScore } from './index';\n\nexport default function addScore($node, $, amount) {\n  try {\n    const score = getOrInitScore($node, $) + amount;\n    setScore($node, $, score);\n  } catch (e) {\n    // Ignoring; error occurs in scoreNode\n  }\n\n  return $node;\n}\n","import { addScore } from './index';\n\n// Adds 1/4 of a child's score to its parent\nexport default function addToParent(node, $, score) {\n  const parent = node.parent();\n  if (parent) {\n    addScore(parent, $, score * 0.25);\n  }\n\n  return node;\n}\n","import { getScore, scoreNode, getWeight, addToParent } from './index';\n\n// gets and returns the score if it exists\n// if not, initializes a score based on\n// the node's tag type\nexport default function getOrInitScore($node, $, weightNodes = true) {\n  let score = getScore($node);\n\n  if (score) {\n    return score;\n  }\n\n  score = scoreNode($node);\n\n  if (weightNodes) {\n    score += getWeight($node);\n  }\n\n  addToParent($node, $, score);\n\n  return score;\n}\n","import { scoreParagraph } from './index';\nimport {\n  PARAGRAPH_SCORE_TAGS,\n  CHILD_CONTENT_TAGS,\n  BAD_TAGS,\n} from './constants';\n\n// Score an individual node. Has some smarts for paragraphs, otherwise\n// just scores based on tag.\nexport default function scoreNode($node) {\n  const { tagName } = $node.get(0);\n\n  // TODO: Consider ordering by most likely.\n  // E.g., if divs are a more common tag on a page,\n  // Could save doing that regex test on every node – AP\n  if (PARAGRAPH_SCORE_TAGS.test(tagName)) {\n    return scoreParagraph($node);\n  }\n  if (tagName.toLowerCase() === 'div') {\n    return 5;\n  }\n  if (CHILD_CONTENT_TAGS.test(tagName)) {\n    return 3;\n  }\n  if (BAD_TAGS.test(tagName)) {\n    return -3;\n  }\n  if (tagName.toLowerCase() === 'th') {\n    return -5;\n  }\n\n  return 0;\n}\n","import { convertNodeTo } from '@/utils/dom';\n\nimport { HNEWS_CONTENT_SELECTORS } from './constants';\nimport { scoreNode, setScore, getOrInitScore, addScore } from './index';\n\nfunction convertSpans($node, $) {\n  if ($node.get(0)) {\n    const { tagName } = $node.get(0);\n\n    if (tagName === 'span') {\n      // convert spans to divs\n      convertNodeTo($node, $, 'div');\n    }\n  }\n}\n\nfunction addScoreTo($node, $, score) {\n  if ($node) {\n    convertSpans($node, $);\n    addScore($node, $, score);\n  }\n}\n\nfunction scorePs($, weightNodes) {\n  $('p, pre')\n    .not('[score]')\n    .each((index, node) => {\n      // The raw score for this paragraph, before we add any parent/child\n      // scores.\n      let $node = $(node);\n      $node = setScore($node, $, getOrInitScore($node, $, weightNodes));\n\n      const $parent = $node.parent();\n      const rawScore = scoreNode($node);\n\n      addScoreTo($parent, $, rawScore, weightNodes);\n      if ($parent) {\n        // Add half of the individual content score to the\n        // grandparent\n        addScoreTo($parent.parent(), $, rawScore / 2, weightNodes);\n      }\n    });\n\n  return $;\n}\n\n// score content. Parents get the full value of their children's\n// content score, grandparents half\nexport default function scoreContent($, weightNodes = true) {\n  // First, look for special hNews based selectors and give them a big\n  // boost, if they exist\n  HNEWS_CONTENT_SELECTORS.forEach(([parentSelector, childSelector]) => {\n    $(`${parentSelector} ${childSelector}`).each((index, node) => {\n      addScore($(node).parent(parentSelector), $, 80);\n    });\n  });\n\n  // Doubling this again\n  // Previous solution caused a bug\n  // in which parents weren't retaining\n  // scores. This is not ideal, and\n  // should be fixed.\n  scorePs($, weightNodes);\n  scorePs($, weightNodes);\n\n  return $;\n}\n","import { NON_TOP_CANDIDATE_TAGS_RE } from './constants';\nimport { getScore } from './index';\nimport mergeSiblings from './merge-siblings';\n\n// After we've calculated scores, loop through all of the possible\n// candidate nodes we found and find the one with the highest score.\nexport default function findTopCandidate($) {\n  let $candidate;\n  let topScore = 0;\n\n  $('[score]').each((index, node) => {\n    // Ignore tags like BR, HR, etc\n    if (NON_TOP_CANDIDATE_TAGS_RE.test(node.tagName)) {\n      return;\n    }\n\n    const $node = $(node);\n    const score = getScore($node);\n\n    if (score > topScore) {\n      topScore = score;\n      $candidate = $node;\n    }\n  });\n\n  // If we don't have a candidate, return the body\n  // or whatever the first element is\n  if (!$candidate) {\n    return $('body') || $('*').first();\n  }\n\n  $candidate = mergeSiblings($candidate, topScore, $);\n\n  return $candidate;\n}\n","import { textLength, linkDensity } from '@/utils/dom';\nimport { hasSentenceEnd } from '@/utils/text';\n\nimport { NON_TOP_CANDIDATE_TAGS_RE } from './constants';\nimport { getScore } from './index';\n\n// Now that we have a top_candidate, look through the siblings of\n// it to see if any of them are decently scored. If they are, they\n// may be split parts of the content (Like two divs, a preamble and\n// a body.) Example:\n// http://articles.latimes.com/2009/oct/14/business/fi-bigtvs14\nexport default function mergeSiblings($candidate, topScore, $) {\n  if (!$candidate.parent().length) {\n    return $candidate;\n  }\n\n  const siblingScoreThreshold = Math.max(10, topScore * 0.25);\n  const wrappingDiv = $('<div></div>');\n\n  $candidate\n    .parent()\n    .children()\n    .each((index, sibling) => {\n      const $sibling = $(sibling);\n      // Ignore tags like BR, HR, etc\n      if (NON_TOP_CANDIDATE_TAGS_RE.test(sibling.tagName)) {\n        return null;\n      }\n\n      const siblingScore = getScore($sibling);\n      if (siblingScore) {\n        if ($sibling.get(0) === $candidate.get(0)) {\n          wrappingDiv.append($sibling);\n        } else {\n          let contentBonus = 0;\n          const density = linkDensity($sibling);\n\n          // If sibling has a very low link density,\n          // give it a small bonus\n          if (density < 0.05) {\n            contentBonus += 20;\n          }\n\n          // If sibling has a high link density,\n          // give it a penalty\n          if (density >= 0.5) {\n            contentBonus -= 20;\n          }\n\n          // If sibling node has the same class as\n          // candidate, give it a bonus\n          if ($sibling.attr('class') === $candidate.attr('class')) {\n            contentBonus += topScore * 0.2;\n          }\n\n          const newScore = siblingScore + contentBonus;\n\n          if (newScore >= siblingScoreThreshold) {\n            return wrappingDiv.append($sibling);\n          }\n          if (sibling.tagName === 'p') {\n            const siblingContent = $sibling.text();\n            const siblingContentLength = textLength(siblingContent);\n\n            if (siblingContentLength > 80 && density < 0.25) {\n              return wrappingDiv.append($sibling);\n            }\n            if (\n              siblingContentLength <= 80 &&\n              density === 0 &&\n              hasSentenceEnd(siblingContent)\n            ) {\n              return wrappingDiv.append($sibling);\n            }\n          }\n        }\n      }\n\n      return null;\n    });\n\n  if (\n    wrappingDiv.children().length === 1 &&\n    wrappingDiv\n      .children()\n      .first()\n      .get(0) === $candidate.get(0)\n  ) {\n    return $candidate;\n  }\n\n  return wrappingDiv;\n}\n","export { default as normalizeSpaces } from './normalize-spaces';\nexport { default as extractFromUrl } from './extract-from-url';\nexport { default as pageNumFromUrl } from './page-num-from-url';\nexport { default as removeAnchor } from './remove-anchor';\nexport { default as articleBaseUrl } from './article-base-url';\nexport { default as hasSentenceEnd } from './has-sentence-end';\nexport { default as excerptContent } from './excerpt-content';\nexport { default as getEncoding } from './get-encoding';\n","const NORMALIZE_RE = /\\s{2,}(?![^<>]*<\\/(pre|code|textarea)>)/g;\n\nexport default function normalizeSpaces(text) {\n  return text.replace(NORMALIZE_RE, ' ').trim();\n}\n","// Given a node type to search for, and a list of regular expressions,\n// look to see if this extraction can be found in the URL. Expects\n// that each expression in r_list will return group(1) as the proper\n// string to be cleaned.\n// Only used for date_published currently.\nexport default function extractFromUrl(url, regexList) {\n  const matchRe = regexList.find(re => re.test(url));\n  if (matchRe) {\n    return matchRe.exec(url)[1];\n  }\n\n  return null;\n}\n","import { PAGE_IN_HREF_RE } from './constants';\n\nexport default function pageNumFromUrl(url) {\n  const matches = url.match(PAGE_IN_HREF_RE);\n  if (!matches) return null;\n\n  const pageNum = parseInt(matches[6], 10);\n\n  // Return pageNum < 100, otherwise\n  // return null\n  return pageNum < 100 ? pageNum : null;\n}\n","// An expression that looks to try to find the page digit within a URL, if\n// it exists.\n// Matches:\n//  page=1\n//  pg=1\n//  p=1\n//  paging=12\n//  pag=7\n//  pagination/1\n//  paging/88\n//  pa/83\n//  p/11\n//\n// Does not match:\n//  pg=102\n//  page:2\nexport const PAGE_IN_HREF_RE = new RegExp(\n  '(page|paging|(p(a|g|ag)?(e|enum|ewanted|ing|ination)))?(=|/)([0-9]{1,3})',\n  'i'\n);\n\nexport const HAS_ALPHA_RE = /[a-z]/i;\n\nexport const IS_ALPHA_RE = /^[a-z]+$/i;\nexport const IS_DIGIT_RE = /^[0-9]+$/i;\n\nexport const ENCODING_RE = /charset=([\\w-]+)\\b/;\nexport const DEFAULT_ENCODING = 'utf-8';\n","export default function removeAnchor(url) {\n  return url.split('#')[0].replace(/\\/$/, '');\n}\n","import URL from 'url';\n\nimport {\n  HAS_ALPHA_RE,\n  IS_ALPHA_RE,\n  IS_DIGIT_RE,\n  PAGE_IN_HREF_RE,\n} from './constants';\n\nfunction isGoodSegment(segment, index, firstSegmentHasLetters) {\n  let goodSegment = true;\n\n  // If this is purely a number, and it's the first or second\n  // url_segment, it's probably a page number. Remove it.\n  if (index < 2 && IS_DIGIT_RE.test(segment) && segment.length < 3) {\n    goodSegment = true;\n  }\n\n  // If this is the first url_segment and it's just \"index\",\n  // remove it\n  if (index === 0 && segment.toLowerCase() === 'index') {\n    goodSegment = false;\n  }\n\n  // If our first or second url_segment is smaller than 3 characters,\n  // and the first url_segment had no alphas, remove it.\n  if (index < 2 && segment.length < 3 && !firstSegmentHasLetters) {\n    goodSegment = false;\n  }\n\n  return goodSegment;\n}\n\n// Take a URL, and return the article base of said URL. That is, no\n// pagination data exists in it. Useful for comparing to other links\n// that might have pagination data within them.\nexport default function articleBaseUrl(url, parsed) {\n  const parsedUrl = parsed || URL.parse(url);\n  const { protocol, host, path } = parsedUrl;\n\n  let firstSegmentHasLetters = false;\n  const cleanedSegments = path\n    .split('/')\n    .reverse()\n    .reduce((acc, rawSegment, index) => {\n      let segment = rawSegment;\n\n      // Split off and save anything that looks like a file type.\n      if (segment.includes('.')) {\n        const [possibleSegment, fileExt] = segment.split('.');\n        if (IS_ALPHA_RE.test(fileExt)) {\n          segment = possibleSegment;\n        }\n      }\n\n      // If our first or second segment has anything looking like a page\n      // number, remove it.\n      if (PAGE_IN_HREF_RE.test(segment) && index < 2) {\n        segment = segment.replace(PAGE_IN_HREF_RE, '');\n      }\n\n      // If we're on the first segment, check to see if we have any\n      // characters in it. The first segment is actually the last bit of\n      // the URL, and this will be helpful to determine if we're on a URL\n      // segment that looks like \"/2/\" for example.\n      if (index === 0) {\n        firstSegmentHasLetters = HAS_ALPHA_RE.test(segment);\n      }\n\n      // If it's not marked for deletion, push it to cleaned_segments.\n      if (isGoodSegment(segment, index, firstSegmentHasLetters)) {\n        acc.push(segment);\n      }\n\n      return acc;\n    }, []);\n\n  return `${protocol}//${host}${cleanedSegments.reverse().join('/')}`;\n}\n","// Given a string, return True if it appears to have an ending sentence\n// within it, false otherwise.\nconst SENTENCE_END_RE = new RegExp('.( |$)');\nexport default function hasSentenceEnd(text) {\n  return SENTENCE_END_RE.test(text);\n}\n","export default function excerptContent(content, words = 10) {\n  return content\n    .trim()\n    .split(/\\s+/)\n    .slice(0, words)\n    .join(' ');\n}\n","import iconv from 'iconv-lite';\nimport { DEFAULT_ENCODING, ENCODING_RE } from './constants';\n\n// check a string for encoding; this is\n// used in our fetchResource function to\n// ensure correctly encoded responses\nexport default function getEncoding(str) {\n  let encoding = DEFAULT_ENCODING;\n  const matches = ENCODING_RE.exec(str);\n  if (matches !== null) {\n    [, str] = matches;\n  }\n  if (iconv.encodingExists(str)) {\n    encoding = str;\n  }\n  return encoding;\n}\n","import { getWeight } from '@/extractors/generic/content/scoring';\n\nimport { HEADER_TAG_LIST } from './constants';\nimport { normalizeSpaces } from '../text';\n\nexport default function cleanHeaders($article, $, title = '') {\n  $(HEADER_TAG_LIST, $article).each((index, header) => {\n    const $header = $(header);\n    // Remove any headers that appear before all other p tags in the\n    // document. This probably means that it was part of the title, a\n    // subtitle or something else extraneous like a datestamp or byline,\n    // all of which should be handled by other metadata handling.\n    if ($($header, $article).prevAll('p').length === 0) {\n      return $header.remove();\n    }\n\n    // Remove any headers that match the title exactly.\n    if (normalizeSpaces($(header).text()) === title) {\n      return $header.remove();\n    }\n\n    // If this header has a negative weight, it's probably junk.\n    // Get rid of it.\n    if (getWeight($(header)) < 0) {\n      return $header.remove();\n    }\n\n    return $header;\n  });\n\n  return $;\n}\n","import { convertNodeTo } from '@/utils/dom';\n\n// Rewrite the tag name to div if it's a top level node like body or\n// html to avoid later complications with multiple body tags.\nexport default function rewriteTopLevel(article, $) {\n  // I'm not using context here because\n  // it's problematic when converting the\n  // top-level/root node - AP\n  $ = convertNodeTo($('html'), $, 'div');\n  $ = convertNodeTo($('body'), $, 'div');\n\n  return $;\n}\n","import URL from 'url';\n\nimport { getAttrs, setAttr } from '@/utils/dom';\n\nfunction absolutize($, rootUrl, attr) {\n  const baseUrl = $('base').attr('href');\n\n  $(`[${attr}]`).each((_, node) => {\n    const attrs = getAttrs(node);\n    const url = attrs[attr];\n    if (!url) return;\n    const absoluteUrl = URL.resolve(baseUrl || rootUrl, url);\n\n    setAttr(node, attr, absoluteUrl);\n  });\n}\n\nfunction absolutizeSet($, rootUrl, $content) {\n  $('[srcset]', $content).each((_, node) => {\n    const attrs = getAttrs(node);\n    const urlSet = attrs.srcset;\n\n    if (urlSet) {\n      // a comma should be considered part of the candidate URL unless preceded by a descriptor\n      // descriptors can only contain positive numbers followed immediately by either 'w' or 'x'\n      // space characters inside the URL should be encoded (%20 or +)\n      const candidates = urlSet.match(\n        /(?:\\s*)(\\S+(?:\\s*[\\d.]+[wx])?)(?:\\s*,\\s*)?/g\n      );\n      if (!candidates) return;\n      const absoluteCandidates = candidates.map(candidate => {\n        // a candidate URL cannot start or end with a comma\n        // descriptors are separated from the URLs by unescaped whitespace\n        const parts = candidate\n          .trim()\n          .replace(/,$/, '')\n          .split(/\\s+/);\n        parts[0] = URL.resolve(rootUrl, parts[0]);\n        return parts.join(' ');\n      });\n      const absoluteUrlSet = [...new Set(absoluteCandidates)].join(', ');\n      setAttr(node, 'srcset', absoluteUrlSet);\n    }\n  });\n}\n\nexport default function makeLinksAbsolute($content, $, url) {\n  ['href', 'src'].forEach(attr => absolutize($, url, attr));\n  absolutizeSet($, url, $content);\n\n  return $content;\n}\n","export function textLength(text) {\n  return text.trim().replace(/\\s+/g, ' ').length;\n}\n\n// Determines what percentage of the text\n// in a node is link text\n// Takes a node, returns a float\nexport function linkDensity($node) {\n  const totalTextLength = textLength($node.text());\n\n  const linkText = $node.find('a').text();\n  const linkLength = textLength(linkText);\n\n  if (totalTextLength > 0) {\n    return linkLength / totalTextLength;\n  }\n  if (totalTextLength === 0 && linkLength > 0) {\n    return 1;\n  }\n\n  return 0;\n}\n","import { stripTags } from '@/utils/dom';\n\n// Given a node type to search for, and a list of meta tag names to\n// search for, find a meta tag associated.\nexport default function extractFromMeta(\n  $,\n  metaNames,\n  cachedNames,\n  cleanTags = true\n) {\n  const foundNames = metaNames.filter(name => cachedNames.indexOf(name) !== -1);\n\n  // eslint-disable-next-line no-restricted-syntax\n  for (const name of foundNames) {\n    const type = 'name';\n    const value = 'value';\n\n    const nodes = $(`meta[${type}=\"${name}\"]`);\n\n    // Get the unique value of every matching node, in case there\n    // are two meta tags with the same name and value.\n    // Remove empty values.\n    const values = nodes\n      .map((index, node) => $(node).attr(value))\n      .toArray()\n      .filter(text => text !== '');\n\n    // If we have more than one value for the same name, we have a\n    // conflict and can't trust any of them. Skip this name. If we have\n    // zero, that means our meta tags had no values. Skip this name\n    // also.\n    if (values.length === 1) {\n      let metaValue;\n      // Meta values that contain HTML should be stripped, as they\n      // weren't subject to cleaning previously.\n      if (cleanTags) {\n        metaValue = stripTags(values[0], $);\n      } else {\n        [metaValue] = values;\n      }\n\n      return metaValue;\n    }\n  }\n\n  // If nothing is found, return null\n  return null;\n}\n","import { withinComment } from '@/utils/dom';\n\nfunction isGoodNode($node, maxChildren) {\n  // If it has a number of children, it's more likely a container\n  // element. Skip it.\n  if ($node.children().length > maxChildren) {\n    return false;\n  }\n  // If it looks to be within a comment, skip it.\n  if (withinComment($node)) {\n    return false;\n  }\n\n  return true;\n}\n\n// Given a a list of selectors find content that may\n// be extractable from the document. This is for flat\n// meta-information, like author, title, date published, etc.\nexport default function extractFromSelectors(\n  $,\n  selectors,\n  maxChildren = 1,\n  textOnly = true\n) {\n  // eslint-disable-next-line no-restricted-syntax\n  for (const selector of selectors) {\n    const nodes = $(selector);\n\n    // If we didn't get exactly one of this selector, this may be\n    // a list of articles or comments. Skip it.\n    if (nodes.length === 1) {\n      const $node = $(nodes[0]);\n\n      if (isGoodNode($node, maxChildren)) {\n        let content;\n        if (textOnly) {\n          content = $node.text();\n        } else {\n          content = $node.html();\n        }\n\n        if (content) {\n          return content;\n        }\n      }\n    }\n  }\n\n  return null;\n}\n","// strips all tags from a string of text\nexport default function stripTags(text, $) {\n  // Wrapping text in html element prevents errors when text\n  // has no html\n  const cleanText = $(`<span>${text}</span>`).text();\n  return cleanText === '' ? text : cleanText;\n}\n","import { getAttrs } from '@/utils/dom';\n\nexport default function withinComment($node) {\n  const parents = $node.parents().toArray();\n  const commentParent = parents.find(parent => {\n    const attrs = getAttrs(parent);\n    const { class: nodeClass, id } = attrs;\n    const classAndId = `${nodeClass} ${id}`;\n    return classAndId.includes('comment');\n  });\n\n  return commentParent !== undefined;\n}\n","// Given a node, determine if it's article-like enough to return\n// param: node (a cheerio node)\n// return: boolean\n\nexport default function nodeIsSufficient($node) {\n  return $node.text().trim().length >= 100;\n}\n","import { IS_WP_SELECTOR } from './constants';\n\nexport default function isWordpress($) {\n  return $(IS_WP_SELECTOR).length > 0;\n}\n","export default function getAttrs(node) {\n  const { attribs, attributes } = node;\n\n  if (!attribs && attributes) {\n    const attrs = Reflect.ownKeys(attributes).reduce((acc, index) => {\n      const attr = attributes[index];\n\n      if (!attr.name || !attr.value) return acc;\n\n      acc[attr.name] = attr.value;\n      return acc;\n    }, {});\n    return attrs;\n  }\n\n  return attribs;\n}\n","export default function setAttr(node, attr, val) {\n  if (node.attribs) {\n    node.attribs[attr] = val;\n  } else if (node.attributes) {\n    node.setAttribute(attr, val);\n  }\n\n  return node;\n}\n","export default function setAttrs(node, attrs) {\n  if (node.attribs) {\n    node.attribs = attrs;\n  } else if (node.attributes) {\n    while (node.attributes.length > 0) {\n      node.removeAttribute(node.attributes[0].name);\n    }\n\n    Reflect.ownKeys(attrs).forEach(key => {\n      node.setAttribute(key, attrs[key]);\n    });\n  }\n\n  return node;\n}\n","import cleanAuthor from './author';\nimport cleanImage from './lead-image-url';\nimport cleanDek from './dek';\nimport cleanDatePublished from './date-published';\nimport cleanContent from './content';\nimport cleanTitle from './title';\n\nconst Cleaners = {\n  author: cleanAuthor,\n  lead_image_url: cleanImage,\n  dek: cleanDek,\n  date_published: cleanDatePublished,\n  content: cleanContent,\n  title: cleanTitle,\n};\n\nexport default Cleaners;\n\nexport { cleanAuthor };\nexport { cleanImage };\nexport { cleanDek };\nexport { cleanDatePublished };\nexport { cleanContent };\nexport { cleanTitle };\nexport { default as resolveSplitTitle } from './resolve-split-title';\n","import { normalizeSpaces } from '@/utils/text';\nimport { CLEAN_AUTHOR_RE } from './constants';\n\n// Take an author string (like 'By David Smith ') and clean it to\n// just the name(s): 'David Smith'.\nexport default function cleanAuthor(author) {\n  return normalizeSpaces(author.replace(CLEAN_AUTHOR_RE, '$2').trim());\n}\n","// CLEAN AUTHOR CONSTANTS\nexport const CLEAN_AUTHOR_RE = /^\\s*(posted |written )?by\\s*:?\\s*(.*)/i;\n\n// CLEAN DEK CONSTANTS\nexport const TEXT_LINK_RE = new RegExp('http(s)?://', 'i');\n// An ordered list of meta tag names that denote likely article deks.\n// From most distinct to least distinct.\n//\n// NOTE: There are currently no meta tags that seem to provide the right\n// content consistenty enough. Two options were:\n//  - og:description\n//  - dc.description\n// However, these tags often have SEO-specific junk in them that's not\n// header-worthy like a dek is. Excerpt material at best.\nexport const DEK_META_TAGS = [];\n\n// An ordered list of Selectors to find likely article deks. From\n// most explicit to least explicit.\n//\n// Should be more restrictive than not, as a failed dek can be pretty\n// detrimental to the aesthetics of an article.\nexport const DEK_SELECTORS = ['.entry-summary'];\n\n// CLEAN DATE PUBLISHED CONSTANTS\nexport const MS_DATE_STRING = /^\\d{13}$/i;\nexport const SEC_DATE_STRING = /^\\d{10}$/i;\nexport const CLEAN_DATE_STRING_RE = /^\\s*published\\s*:?\\s*(.*)/i;\nexport const TIME_MERIDIAN_SPACE_RE = /(.*\\d)(am|pm)(.*)/i;\nexport const TIME_MERIDIAN_DOTS_RE = /\\.m\\./i;\nexport const TIME_NOW_STRING = /^\\s*(just|right)?\\s*now\\s*/i;\nconst timeUnits = [\n  'seconds?',\n  'minutes?',\n  'hours?',\n  'days?',\n  'weeks?',\n  'months?',\n  'years?',\n];\nconst allTimeUnits = timeUnits.join('|');\nexport const TIME_AGO_STRING = new RegExp(\n  `(\\\\d+)\\\\s+(${allTimeUnits})\\\\s+ago`,\n  'i'\n);\nconst months = [\n  'jan',\n  'feb',\n  'mar',\n  'apr',\n  'may',\n  'jun',\n  'jul',\n  'aug',\n  'sep',\n  'oct',\n  'nov',\n  'dec',\n];\nconst allMonths = months.join('|');\nconst timestamp1 = '[0-9]{1,2}:[0-9]{2,2}( ?[ap].?m.?)?';\nconst timestamp2 = '[0-9]{1,2}[/-][0-9]{1,2}[/-][0-9]{2,4}';\nconst timestamp3 = '-[0-9]{3,4}$';\nexport const SPLIT_DATE_STRING = new RegExp(\n  `(${timestamp1})|(${timestamp2})|(${timestamp3})|([0-9]{1,4})|(${allMonths})`,\n  'ig'\n);\n\n// 2016-11-22T08:57-500\n// Check if datetime string has an offset at the end\nexport const TIME_WITH_OFFSET_RE = /-\\d{3,4}$/;\n\n// CLEAN TITLE CONSTANTS\n// A regular expression that will match separating characters on a\n// title, that usually denote breadcrumbs or something similar.\nexport const TITLE_SPLITTERS_RE = /(: | - | \\| )/g;\n\nexport const DOMAIN_ENDINGS_RE = new RegExp('.com$|.net$|.org$|.co.uk$', 'g');\n","import validUrl from 'valid-url';\n\nexport default function clean(leadImageUrl) {\n  leadImageUrl = leadImageUrl.trim();\n  if (validUrl.isWebUri(leadImageUrl)) {\n    return leadImageUrl;\n  }\n\n  return null;\n}\n","import { stripTags } from '@/utils/dom';\nimport { excerptContent, normalizeSpaces } from '@/utils/text';\n\nimport { TEXT_LINK_RE } from './constants';\n\n// Take a dek HTML fragment, and return the cleaned version of it.\n// Return None if the dek wasn't good enough.\nexport default function cleanDek(dek, { $, excerpt }) {\n  // Sanity check that we didn't get too short or long of a dek.\n  if (dek.length > 1000 || dek.length < 5) return null;\n\n  // Check that dek isn't the same as excerpt\n  if (excerpt && excerptContent(excerpt, 10) === excerptContent(dek, 10))\n    return null;\n\n  const dekText = stripTags(dek, $);\n\n  // Plain text links shouldn't exist in the dek. If we have some, it's\n  // not a good dek - bail.\n  if (TEXT_LINK_RE.test(dekText)) return null;\n\n  return normalizeSpaces(dekText.trim());\n}\n","import moment from 'moment-timezone';\nimport parseFormat from 'moment-parseformat';\n// Is there a compelling reason to use moment here?\n// Mostly only being used for the isValid() method,\n// but could just check for 'Invalid Date' string.\n\nimport {\n  MS_DATE_STRING,\n  SEC_DATE_STRING,\n  CLEAN_DATE_STRING_RE,\n  SPLIT_DATE_STRING,\n  TIME_AGO_STRING,\n  TIME_NOW_STRING,\n  TIME_MERIDIAN_SPACE_RE,\n  TIME_MERIDIAN_DOTS_RE,\n  TIME_WITH_OFFSET_RE,\n} from './constants';\n\nexport function cleanDateString(dateString) {\n  return (dateString.match(SPLIT_DATE_STRING) || [])\n    .join(' ')\n    .replace(TIME_MERIDIAN_DOTS_RE, 'm')\n    .replace(TIME_MERIDIAN_SPACE_RE, '$1 $2 $3')\n    .replace(CLEAN_DATE_STRING_RE, '$1')\n    .trim();\n}\n\nexport function createDate(dateString, timezone, format) {\n  if (TIME_WITH_OFFSET_RE.test(dateString)) {\n    return moment(new Date(dateString));\n  }\n\n  if (TIME_AGO_STRING.test(dateString)) {\n    const fragments = TIME_AGO_STRING.exec(dateString);\n    return moment().subtract(fragments[1], fragments[2]);\n  }\n\n  if (TIME_NOW_STRING.test(dateString)) {\n    return moment();\n  }\n\n  return timezone\n    ? moment.tz(dateString, format || parseFormat(dateString), timezone)\n    : moment(dateString, format || parseFormat(dateString));\n}\n\n// Take a date published string, and hopefully return a date out of\n// it. Return none if we fail.\nexport default function cleanDatePublished(\n  dateString,\n  { timezone, format } = {}\n) {\n  // If string is in milliseconds or seconds, convert to int and return\n  if (MS_DATE_STRING.test(dateString)) {\n    return new Date(parseInt(dateString, 10)).toISOString();\n  }\n  if (SEC_DATE_STRING.test(dateString)) {\n    return new Date(parseInt(dateString, 10) * 1000).toISOString();\n  }\n\n  let date = createDate(dateString, timezone, format);\n\n  if (!date.isValid()) {\n    dateString = cleanDateString(dateString);\n    date = createDate(dateString, timezone, format);\n  }\n\n  return date.isValid() ? date.toISOString() : null;\n}\n","import {\n  cleanAttributes,\n  cleanHeaders,\n  cleanHOnes,\n  cleanImages,\n  cleanTags,\n  removeEmpty,\n  rewriteTopLevel,\n  markToKeep,\n  stripJunkTags,\n  makeLinksAbsolute,\n} from '@/utils/dom';\n\n// Clean our article content, returning a new, cleaned node.\nexport default function extractCleanNode(\n  article,\n  { $, cleanConditionally = true, title = '', url = '', defaultCleaner = true }\n) {\n  // Rewrite the tag name to div if it's a top level node like body or\n  // html to avoid later complications with multiple body tags.\n  rewriteTopLevel(article, $);\n\n  // Drop small images and spacer images\n  // Only do this is defaultCleaner is set to true;\n  // this can sometimes be too aggressive.\n  if (defaultCleaner) cleanImages(article, $);\n\n  // Make links absolute\n  makeLinksAbsolute(article, $, url);\n\n  // Mark elements to keep that would normally be removed.\n  // E.g., stripJunkTags will remove iframes, so we're going to mark\n  // YouTube/Vimeo videos as elements we want to keep.\n  markToKeep(article, $, url);\n\n  // Drop certain tags like <title>, etc\n  // This is -mostly- for cleanliness, not security.\n  stripJunkTags(article, $);\n\n  // H1 tags are typically the article title, which should be extracted\n  // by the title extractor instead. If there's less than 3 of them (<3),\n  // strip them. Otherwise, turn 'em into H2s.\n  cleanHOnes(article, $);\n\n  // Clean headers\n  cleanHeaders(article, $, title);\n\n  // We used to clean UL's and OL's here, but it was leading to\n  // too many in-article lists being removed. Consider a better\n  // way to detect menus particularly and remove them.\n  // Also optionally running, since it can be overly aggressive.\n  if (defaultCleaner) cleanTags(article, $, cleanConditionally);\n\n  // Remove empty paragraph nodes\n  removeEmpty(article, $);\n\n  // Remove unnecessary attributes\n  cleanAttributes(article, $);\n\n  return article;\n}\n","import { stripTags } from '@/utils/dom';\nimport { normalizeSpaces } from '@/utils/text';\n\nimport { TITLE_SPLITTERS_RE } from './constants';\nimport { resolveSplitTitle } from './index';\n\nexport default function cleanTitle(title, { url, $ }) {\n  // If title has |, :, or - in it, see if\n  // we can clean it up.\n  if (TITLE_SPLITTERS_RE.test(title)) {\n    title = resolveSplitTitle(title, url);\n  }\n\n  // Final sanity check that we didn't get a crazy title.\n  // if (title.length > 150 || title.length < 15) {\n  if (title.length > 150) {\n    // If we did, return h1 from the document if it exists\n    const h1 = $('h1');\n    if (h1.length === 1) {\n      title = h1.text();\n    }\n  }\n\n  // strip any html tags in the title text\n  return normalizeSpaces(stripTags(title, $).trim());\n}\n","import URL from 'url';\nimport wuzzy from 'wuzzy';\n\nimport { TITLE_SPLITTERS_RE, DOMAIN_ENDINGS_RE } from './constants';\n\nfunction extractBreadcrumbTitle(splitTitle, text) {\n  // This must be a very breadcrumbed title, like:\n  // The Best Gadgets on Earth : Bits : Blogs : NYTimes.com\n  // NYTimes - Blogs - Bits - The Best Gadgets on Earth\n  if (splitTitle.length >= 6) {\n    // Look to see if we can find a breadcrumb splitter that happens\n    // more than once. If we can, we'll be able to better pull out\n    // the title.\n    const termCounts = splitTitle.reduce((acc, titleText) => {\n      acc[titleText] = acc[titleText] ? acc[titleText] + 1 : 1;\n      return acc;\n    }, {});\n\n    const [maxTerm, termCount] = Reflect.ownKeys(termCounts).reduce(\n      (acc, key) => {\n        if (acc[1] < termCounts[key]) {\n          return [key, termCounts[key]];\n        }\n\n        return acc;\n      },\n      [0, 0]\n    );\n\n    // We found a splitter that was used more than once, so it\n    // is probably the breadcrumber. Split our title on that instead.\n    // Note: max_term should be <= 4 characters, so that \" >> \"\n    // will match, but nothing longer than that.\n    if (termCount >= 2 && maxTerm.length <= 4) {\n      splitTitle = text.split(maxTerm);\n    }\n\n    const splitEnds = [splitTitle[0], splitTitle.slice(-1)];\n    const longestEnd = splitEnds.reduce(\n      (acc, end) => (acc.length > end.length ? acc : end),\n      ''\n    );\n\n    if (longestEnd.length > 10) {\n      return longestEnd;\n    }\n\n    return text;\n  }\n\n  return null;\n}\n\nfunction cleanDomainFromTitle(splitTitle, url) {\n  // Search the ends of the title, looking for bits that fuzzy match\n  // the URL too closely. If one is found, discard it and return the\n  // rest.\n  //\n  // Strip out the big TLDs - it just makes the matching a bit more\n  // accurate. Not the end of the world if it doesn't strip right.\n  const { host } = URL.parse(url);\n  const nakedDomain = host.replace(DOMAIN_ENDINGS_RE, '');\n\n  const startSlug = splitTitle[0].toLowerCase().replace(' ', '');\n  const startSlugRatio = wuzzy.levenshtein(startSlug, nakedDomain);\n\n  if (startSlugRatio > 0.4 && startSlug.length > 5) {\n    return splitTitle.slice(2).join('');\n  }\n\n  const endSlug = splitTitle\n    .slice(-1)[0]\n    .toLowerCase()\n    .replace(' ', '');\n  const endSlugRatio = wuzzy.levenshtein(endSlug, nakedDomain);\n\n  if (endSlugRatio > 0.4 && endSlug.length >= 5) {\n    return splitTitle.slice(0, -2).join('');\n  }\n\n  return null;\n}\n\n// Given a title with separators in it (colons, dashes, etc),\n// resolve whether any of the segments should be removed.\nexport default function resolveSplitTitle(title, url = '') {\n  // Splits while preserving splitters, like:\n  // ['The New New York', ' - ', 'The Washington Post']\n  const splitTitle = title.split(TITLE_SPLITTERS_RE);\n  if (splitTitle.length === 1) {\n    return title;\n  }\n\n  let newTitle = extractBreadcrumbTitle(splitTitle, title);\n  if (newTitle) return newTitle;\n\n  newTitle = cleanDomainFromTitle(splitTitle, url);\n  if (newTitle) return newTitle;\n\n  // Fuzzy ratio didn't find anything, so this title is probably legit.\n  // Just return it all.\n  return title;\n}\n","import { stripUnlikelyCandidates, convertToParagraphs } from '@/utils/dom';\n\nimport { scoreContent, findTopCandidate } from './scoring';\n\n// Using a variety of scoring techniques, extract the content most\n// likely to be article text.\n//\n// If strip_unlikely_candidates is True, remove any elements that\n// match certain criteria first. (Like, does this element have a\n// classname of \"comment\")\n//\n// If weight_nodes is True, use classNames and IDs to determine the\n// worthiness of nodes.\n//\n// Returns a cheerio object $\nexport default function extractBestNode($, opts) {\n  if (opts.stripUnlikelyCandidates) {\n    $ = stripUnlikelyCandidates($);\n  }\n\n  $ = convertToParagraphs($);\n  $ = scoreContent($, opts.weightNodes);\n  const $topCandidate = findTopCandidate($);\n\n  return $topCandidate;\n}\n","import { cleanTitle } from '@/cleaners';\nimport { extractFromMeta, extractFromSelectors } from '@/utils/dom';\n\nimport {\n  STRONG_TITLE_META_TAGS,\n  WEAK_TITLE_META_TAGS,\n  STRONG_TITLE_SELECTORS,\n  WEAK_TITLE_SELECTORS,\n} from './constants';\n\nconst GenericTitleExtractor = {\n  extract({ $, url, metaCache }) {\n    // First, check to see if we have a matching meta tag that we can make\n    // use of that is strongly associated with the headline.\n    let title;\n\n    title = extractFromMeta($, STRONG_TITLE_META_TAGS, metaCache);\n    if (title) return cleanTitle(title, { url, $ });\n\n    // Second, look through our content selectors for the most likely\n    // article title that is strongly associated with the headline.\n    title = extractFromSelectors($, STRONG_TITLE_SELECTORS);\n    if (title) return cleanTitle(title, { url, $ });\n\n    // Third, check for weaker meta tags that may match.\n    title = extractFromMeta($, WEAK_TITLE_META_TAGS, metaCache);\n    if (title) return cleanTitle(title, { url, $ });\n\n    // Last, look for weaker selector tags that may match.\n    title = extractFromSelectors($, WEAK_TITLE_SELECTORS);\n    if (title) return cleanTitle(title, { url, $ });\n\n    // If no matches, return an empty string\n    return '';\n  },\n};\n\nexport default GenericTitleExtractor;\n","// TODO: It would be great if we could merge the meta and selector lists into\n// a list of objects, because we could then rank them better. For example,\n// .hentry .entry-title is far better suited than <meta title>.\n\n// An ordered list of meta tag names that denote likely article titles. All\n// attributes should be lowercase for faster case-insensitive matching. From\n// most distinct to least distinct.\nexport const STRONG_TITLE_META_TAGS = [\n  'tweetmeme-title',\n  'dc.title',\n  'rbtitle',\n  'headline',\n  'title',\n];\n\n// og:title is weak because it typically contains context that we don't like,\n// for example the source site's name. Gotta get that brand into facebook!\nexport const WEAK_TITLE_META_TAGS = ['og:title'];\n\n// An ordered list of XPath Selectors to find likely article titles. From\n// most explicit to least explicit.\n//\n// Note - this does not use classes like CSS. This checks to see if the string\n// exists in the className, which is not as accurate as .className (which\n// splits on spaces/endlines), but for our purposes it's close enough. The\n// speed tradeoff is worth the accuracy hit.\nexport const STRONG_TITLE_SELECTORS = [\n  '.hentry .entry-title',\n  'h1#articleHeader',\n  'h1.articleHeader',\n  'h1.article',\n  '.instapaper_title',\n  '#meebo-title',\n];\n\nexport const WEAK_TITLE_SELECTORS = [\n  'article h1',\n  '#entry-title',\n  '.entry-title',\n  '#entryTitle',\n  '#entrytitle',\n  '.entryTitle',\n  '.entrytitle',\n  '#articleTitle',\n  '.articleTitle',\n  'post post-title',\n  'h1.title',\n  'h2.article',\n  'h1',\n  'html head title',\n  'title',\n];\n","import { cleanAuthor } from '@/cleaners';\nimport { extractFromMeta, extractFromSelectors } from '@/utils/dom';\n\nimport {\n  AUTHOR_META_TAGS,\n  AUTHOR_MAX_LENGTH,\n  AUTHOR_SELECTORS,\n  BYLINE_SELECTORS_RE,\n} from './constants';\n\nconst GenericAuthorExtractor = {\n  extract({ $, metaCache }) {\n    let author;\n\n    // First, check to see if we have a matching\n    // meta tag that we can make use of.\n    author = extractFromMeta($, AUTHOR_META_TAGS, metaCache);\n    if (author && author.length < AUTHOR_MAX_LENGTH) {\n      return cleanAuthor(author);\n    }\n\n    // Second, look through our selectors looking for potential authors.\n    author = extractFromSelectors($, AUTHOR_SELECTORS, 2);\n    if (author && author.length < AUTHOR_MAX_LENGTH) {\n      return cleanAuthor(author);\n    }\n\n    // Last, use our looser regular-expression based selectors for\n    // potential authors.\n    // eslint-disable-next-line no-restricted-syntax\n    for (const [selector, regex] of BYLINE_SELECTORS_RE) {\n      const node = $(selector);\n      if (node.length === 1) {\n        const text = node.text();\n        if (regex.test(text)) {\n          return cleanAuthor(text);\n        }\n      }\n    }\n\n    return null;\n  },\n};\n\nexport default GenericAuthorExtractor;\n","// An ordered list of meta tag names that denote likely article authors. All\n// attributes should be lowercase for faster case-insensitive matching. From\n// most distinct to least distinct.\n//\n// Note: \"author\" is too often the -developer- of the page, so it is not\n// added here.\nexport const AUTHOR_META_TAGS = [\n  'byl',\n  'clmst',\n  'dc.author',\n  'dcsext.author',\n  'dc.creator',\n  'rbauthors',\n  'authors',\n];\n\nexport const AUTHOR_MAX_LENGTH = 300;\n\n// An ordered list of XPath Selectors to find likely article authors. From\n// most explicit to least explicit.\n//\n// Note - this does not use classes like CSS. This checks to see if the string\n// exists in the className, which is not as accurate as .className (which\n// splits on spaces/endlines), but for our purposes it's close enough. The\n// speed tradeoff is worth the accuracy hit.\nexport const AUTHOR_SELECTORS = [\n  '.entry .entry-author',\n  '.author.vcard .fn',\n  '.author .vcard .fn',\n  '.byline.vcard .fn',\n  '.byline .vcard .fn',\n  '.byline .by .author',\n  '.byline .by',\n  '.byline .author',\n  '.post-author.vcard',\n  '.post-author .vcard',\n  'a[rel=author]',\n  '#by_author',\n  '.by_author',\n  '#entryAuthor',\n  '.entryAuthor',\n  '.byline a[href*=author]',\n  '#author .authorname',\n  '.author .authorname',\n  '#author',\n  '.author',\n  '.articleauthor',\n  '.ArticleAuthor',\n  '.byline',\n];\n\n// An ordered list of Selectors to find likely article authors, with\n// regular expression for content.\nconst bylineRe = /^[\\n\\s]*By/i;\nexport const BYLINE_SELECTORS_RE = [\n  ['#byline', bylineRe],\n  ['.byline', bylineRe],\n];\n","import { cleanDatePublished } from '@/cleaners';\nimport { extractFromMeta, extractFromSelectors } from '@/utils/dom';\nimport { extractFromUrl } from '@/utils/text';\n\nimport {\n  DATE_PUBLISHED_META_TAGS,\n  DATE_PUBLISHED_SELECTORS,\n  DATE_PUBLISHED_URL_RES,\n} from './constants';\n\nconst GenericDatePublishedExtractor = {\n  extract({ $, url, metaCache }) {\n    let datePublished;\n    // First, check to see if we have a matching meta tag\n    // that we can make use of.\n    // Don't try cleaning tags from this string\n    datePublished = extractFromMeta(\n      $,\n      DATE_PUBLISHED_META_TAGS,\n      metaCache,\n      false\n    );\n    if (datePublished) return cleanDatePublished(datePublished);\n\n    // Second, look through our selectors looking for potential\n    // date_published's.\n    datePublished = extractFromSelectors($, DATE_PUBLISHED_SELECTORS);\n    if (datePublished) return cleanDatePublished(datePublished);\n\n    // Lastly, look to see if a dately string exists in the URL\n    datePublished = extractFromUrl(url, DATE_PUBLISHED_URL_RES);\n    if (datePublished) return cleanDatePublished(datePublished);\n\n    return null;\n  },\n};\n\nexport default GenericDatePublishedExtractor;\n","// An ordered list of meta tag names that denote\n// likely date published dates. All attributes\n// should be lowercase for faster case-insensitive matching.\n// From most distinct to least distinct.\nexport const DATE_PUBLISHED_META_TAGS = [\n  'article:published_time',\n  'displaydate',\n  'dc.date',\n  'dc.date.issued',\n  'rbpubdate',\n  'publish_date',\n  'pub_date',\n  'pagedate',\n  'pubdate',\n  'revision_date',\n  'doc_date',\n  'date_created',\n  'content_create_date',\n  'lastmodified',\n  'created',\n  'date',\n];\n\n// An ordered list of XPath Selectors to find\n// likely date published dates. From most explicit\n// to least explicit.\nexport const DATE_PUBLISHED_SELECTORS = [\n  '.hentry .dtstamp.published',\n  '.hentry .published',\n  '.hentry .dtstamp.updated',\n  '.hentry .updated',\n  '.single .published',\n  '.meta .published',\n  '.meta .postDate',\n  '.entry-date',\n  '.byline .date',\n  '.postmetadata .date',\n  '.article_datetime',\n  '.date-header',\n  '.story-date',\n  '.dateStamp',\n  '#story .datetime',\n  '.dateline',\n  '.pubdate',\n];\n\n// An ordered list of compiled regular expressions to find likely date\n// published dates from the URL. These should always have the first\n// reference be a date string that is parseable by dateutil.parser.parse\nconst abbrevMonthsStr = '(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)';\nexport const DATE_PUBLISHED_URL_RES = [\n  new RegExp('/(20\\\\d{2}/\\\\d{2}/\\\\d{2})/', 'i'),\n  new RegExp('(20\\\\d{2}-[01]\\\\d-[0-3]\\\\d)', 'i'),\n  new RegExp(`/(20\\\\d{2}/${abbrevMonthsStr}/[0-3]\\\\d)/`, 'i'),\n];\n","// Currently there is only one selector for\n// deks. We should simply return null here\n// until we have a more robust generic option.\n// Below is the original source for this, for reference.\nconst GenericDekExtractor = {\n  extract() {\n    return null;\n  },\n};\n\nexport default GenericDekExtractor;\n","import { extractFromMeta } from '@/utils/dom';\nimport { cleanImage } from '@/cleaners';\n\nimport {\n  LEAD_IMAGE_URL_META_TAGS,\n  LEAD_IMAGE_URL_SELECTORS,\n} from './constants';\n\nimport {\n  scoreImageUrl,\n  scoreAttr,\n  scoreByParents,\n  scoreBySibling,\n  scoreByDimensions,\n  scoreByPosition,\n} from './score-image';\n\n// Given a resource, try to find the lead image URL from within\n// it. Like content and next page extraction, uses a scoring system\n// to determine what the most likely image may be. Short circuits\n// on really probable things like og:image meta tags.\n//\n// Potential signals to still take advantage of:\n//   * domain\n//   * weird aspect ratio\nconst GenericLeadImageUrlExtractor = {\n  extract({ $, content, metaCache, html }) {\n    let cleanUrl;\n    if (!$.browser && $('head').length === 0) {\n      $('*')\n        .first()\n        .prepend(html);\n    }\n\n    // Check to see if we have a matching meta tag that we can make use of.\n    // Moving this higher because common practice is now to use large\n    // images on things like Open Graph or Twitter cards.\n    // images usually have for things like Open Graph.\n    const imageUrl = extractFromMeta(\n      $,\n      LEAD_IMAGE_URL_META_TAGS,\n      metaCache,\n      false\n    );\n\n    if (imageUrl) {\n      cleanUrl = cleanImage(imageUrl);\n\n      if (cleanUrl) return cleanUrl;\n    }\n\n    // Next, try to find the \"best\" image via the content.\n    // We'd rather not have to fetch each image and check dimensions,\n    // so try to do some analysis and determine them instead.\n    const $content = $(content);\n    const imgs = $('img', $content).toArray();\n    const imgScores = {};\n\n    imgs.forEach((img, index) => {\n      const $img = $(img);\n      const src = $img.attr('src');\n\n      if (!src) return;\n\n      let score = scoreImageUrl(src);\n      score += scoreAttr($img);\n      score += scoreByParents($img);\n      score += scoreBySibling($img);\n      score += scoreByDimensions($img);\n      score += scoreByPosition(imgs, index);\n\n      imgScores[src] = score;\n    });\n\n    const [topUrl, topScore] = Reflect.ownKeys(imgScores).reduce(\n      (acc, key) => (imgScores[key] > acc[1] ? [key, imgScores[key]] : acc),\n      [null, 0]\n    );\n\n    if (topScore > 0) {\n      cleanUrl = cleanImage(topUrl);\n\n      if (cleanUrl) return cleanUrl;\n    }\n\n    // If nothing else worked, check to see if there are any really\n    // probable nodes in the doc, like <link rel=\"image_src\" />.\n    // eslint-disable-next-line no-restricted-syntax\n    for (const selector of LEAD_IMAGE_URL_SELECTORS) {\n      const $node = $(selector).first();\n      const src = $node.attr('src');\n      if (src) {\n        cleanUrl = cleanImage(src);\n        if (cleanUrl) return cleanUrl;\n      }\n\n      const href = $node.attr('href');\n      if (href) {\n        cleanUrl = cleanImage(href);\n        if (cleanUrl) return cleanUrl;\n      }\n\n      const value = $node.attr('value');\n      if (value) {\n        cleanUrl = cleanImage(value);\n        if (cleanUrl) return cleanUrl;\n      }\n    }\n\n    return null;\n  },\n};\n\nexport default GenericLeadImageUrlExtractor;\n","// An ordered list of meta tag names that denote likely article leading images.\n// All attributes should be lowercase for faster case-insensitive matching.\n// From most distinct to least distinct.\nexport const LEAD_IMAGE_URL_META_TAGS = [\n  'og:image',\n  'twitter:image',\n  'image_src',\n];\n\nexport const LEAD_IMAGE_URL_SELECTORS = ['link[rel=image_src]'];\n\nexport const POSITIVE_LEAD_IMAGE_URL_HINTS = [\n  'upload',\n  'wp-content',\n  'large',\n  'photo',\n  'wp-image',\n];\nexport const POSITIVE_LEAD_IMAGE_URL_HINTS_RE = new RegExp(\n  POSITIVE_LEAD_IMAGE_URL_HINTS.join('|'),\n  'i'\n);\n\nexport const NEGATIVE_LEAD_IMAGE_URL_HINTS = [\n  'spacer',\n  'sprite',\n  'blank',\n  'throbber',\n  'gradient',\n  'tile',\n  'bg',\n  'background',\n  'icon',\n  'social',\n  'header',\n  'hdr',\n  'advert',\n  'spinner',\n  'loader',\n  'loading',\n  'default',\n  'rating',\n  'share',\n  'facebook',\n  'twitter',\n  'theme',\n  'promo',\n  'ads',\n  'wp-includes',\n];\nexport const NEGATIVE_LEAD_IMAGE_URL_HINTS_RE = new RegExp(\n  NEGATIVE_LEAD_IMAGE_URL_HINTS.join('|'),\n  'i'\n);\n\nexport const GIF_RE = /\\.gif(\\?.*)?$/i;\nexport const JPG_RE = /\\.jpe?g(\\?.*)?$/i;\n","import {\n  POSITIVE_LEAD_IMAGE_URL_HINTS_RE,\n  NEGATIVE_LEAD_IMAGE_URL_HINTS_RE,\n  GIF_RE,\n  JPG_RE,\n} from './constants';\n\nimport { PHOTO_HINTS_RE } from '../content/scoring/constants';\n\nfunction getSig($node) {\n  return `${$node.attr('class') || ''} ${$node.attr('id') || ''}`;\n}\n\n// Scores image urls based on a variety of heuristics.\nexport function scoreImageUrl(url) {\n  url = url.trim();\n  let score = 0;\n\n  if (POSITIVE_LEAD_IMAGE_URL_HINTS_RE.test(url)) {\n    score += 20;\n  }\n\n  if (NEGATIVE_LEAD_IMAGE_URL_HINTS_RE.test(url)) {\n    score -= 20;\n  }\n\n  // TODO: We might want to consider removing this as\n  // gifs are much more common/popular than they once were\n  if (GIF_RE.test(url)) {\n    score -= 10;\n  }\n\n  if (JPG_RE.test(url)) {\n    score += 10;\n  }\n\n  // PNGs are neutral.\n\n  return score;\n}\n\n// Alt attribute usually means non-presentational image.\nexport function scoreAttr($img) {\n  if ($img.attr('alt')) {\n    return 5;\n  }\n\n  return 0;\n}\n\n// Look through our parent and grandparent for figure-like\n// container elements, give a bonus if we find them\nexport function scoreByParents($img) {\n  let score = 0;\n  const $figParent = $img.parents('figure').first();\n\n  if ($figParent.length === 1) {\n    score += 25;\n  }\n\n  const $parent = $img.parent();\n  let $gParent;\n  if ($parent.length === 1) {\n    $gParent = $parent.parent();\n  }\n\n  [$parent, $gParent].forEach($node => {\n    if (PHOTO_HINTS_RE.test(getSig($node))) {\n      score += 15;\n    }\n  });\n\n  return score;\n}\n\n// Look at our immediate sibling and see if it looks like it's a\n// caption. Bonus if so.\nexport function scoreBySibling($img) {\n  let score = 0;\n  const $sibling = $img.next();\n  const sibling = $sibling.get(0);\n\n  if (sibling && sibling.tagName.toLowerCase() === 'figcaption') {\n    score += 25;\n  }\n\n  if (PHOTO_HINTS_RE.test(getSig($sibling))) {\n    score += 15;\n  }\n\n  return score;\n}\n\nexport function scoreByDimensions($img) {\n  let score = 0;\n\n  const width = parseFloat($img.attr('width'));\n  const height = parseFloat($img.attr('height'));\n  const src = $img.attr('src');\n\n  // Penalty for skinny images\n  if (width && width <= 50) {\n    score -= 50;\n  }\n\n  // Penalty for short images\n  if (height && height <= 50) {\n    score -= 50;\n  }\n\n  if (width && height && !src.includes('sprite')) {\n    const area = width * height;\n    if (area < 5000) {\n      // Smaller than 50 x 100\n      score -= 100;\n    } else {\n      score += Math.round(area / 1000);\n    }\n  }\n\n  return score;\n}\n\nexport function scoreByPosition($imgs, index) {\n  return $imgs.length / 2 - index;\n}\n","import URL from 'url';\n\nimport { articleBaseUrl, removeAnchor } from '@/utils/text';\nimport scoreLinks from './scoring/score-links';\n\n// Looks for and returns next page url\n// for multi-page articles\nconst GenericNextPageUrlExtractor = {\n  extract({ $, url, parsedUrl, previousUrls = [] }) {\n    parsedUrl = parsedUrl || URL.parse(url);\n\n    const articleUrl = removeAnchor(url);\n    const baseUrl = articleBaseUrl(url, parsedUrl);\n\n    const links = $('a[href]').toArray();\n\n    const scoredLinks = scoreLinks({\n      links,\n      articleUrl,\n      baseUrl,\n      parsedUrl,\n      $,\n      previousUrls,\n    });\n\n    // If no links were scored, return null\n    if (!scoredLinks) return null;\n\n    // now that we've scored all possible pages,\n    // find the biggest one.\n    const topPage = Reflect.ownKeys(scoredLinks).reduce(\n      (acc, link) => {\n        const scoredLink = scoredLinks[link];\n        return scoredLink.score > acc.score ? scoredLink : acc;\n      },\n      { score: -100 }\n    );\n\n    // If the score is less than 50, we're not confident enough to use it,\n    // so we fail.\n    if (topPage.score >= 50) {\n      return topPage.href;\n    }\n\n    return null;\n  },\n};\n\nexport default GenericNextPageUrlExtractor;\n","import URL from 'url';\n\nimport { getAttrs, isWordpress } from '@/utils/dom';\nimport { removeAnchor, pageNumFromUrl } from '@/utils/text';\n\nimport {\n  scoreSimilarity,\n  scoreLinkText,\n  scorePageInLink,\n  scoreExtraneousLinks,\n  scoreByParents,\n  scorePrevLink,\n  shouldScore,\n  scoreBaseUrl,\n  scoreCapLinks,\n  scoreNextLinkText,\n} from './utils';\n\nexport function makeBaseRegex(baseUrl) {\n  return new RegExp(`^${baseUrl}`, 'i');\n}\n\nfunction makeSig($link, linkText) {\n  return `${linkText || $link.text()} ${$link.attr('class') || ''} ${$link.attr(\n    'id'\n  ) || ''}`;\n}\n\nexport default function scoreLinks({\n  links,\n  articleUrl,\n  baseUrl,\n  parsedUrl,\n  $,\n  previousUrls = [],\n}) {\n  parsedUrl = parsedUrl || URL.parse(articleUrl);\n  const baseRegex = makeBaseRegex(baseUrl);\n  const isWp = isWordpress($);\n\n  // Loop through all links, looking for hints that they may be next-page\n  // links. Things like having \"page\" in their textContent, className or\n  // id, or being a child of a node with a page-y className or id.\n  //\n  // After we do that, assign each page a score, and pick the one that\n  // looks most like the next page link, as long as its score is strong\n  // enough to have decent confidence.\n  const scoredPages = links.reduce((possiblePages, link) => {\n    // Remove any anchor data since we don't do a good job\n    // standardizing URLs (it's hard), we're going to do\n    // some checking with and without a trailing slash\n    const attrs = getAttrs(link);\n\n    // if href is undefined, return\n    if (!attrs.href) return possiblePages;\n\n    const href = removeAnchor(attrs.href);\n    const $link = $(link);\n    const linkText = $link.text();\n\n    if (\n      !shouldScore(href, articleUrl, baseUrl, parsedUrl, linkText, previousUrls)\n    ) {\n      return possiblePages;\n    }\n\n    // ## PASSED THE FIRST-PASS TESTS. Start scoring. ##\n    if (!possiblePages[href]) {\n      possiblePages[href] = {\n        score: 0,\n        linkText,\n        href,\n      };\n    } else {\n      possiblePages[href].linkText = `${possiblePages[href].linkText\n        }|${linkText}`;\n    }\n\n    const possiblePage = possiblePages[href];\n    const linkData = makeSig($link, linkText);\n    const pageNum = pageNumFromUrl(href);\n\n    let score = scoreBaseUrl(href, baseRegex);\n    score += scoreNextLinkText(linkData);\n    score += scoreCapLinks(linkData);\n    score += scorePrevLink(linkData);\n    score += scoreByParents($link);\n    score += scoreExtraneousLinks(href);\n    score += scorePageInLink(pageNum, isWp);\n    score += scoreLinkText(linkText, pageNum);\n    score += scoreSimilarity(score, articleUrl, href);\n\n    possiblePage.score = score;\n\n    return possiblePages;\n  }, {});\n\n  return Reflect.ownKeys(scoredPages).length === 0 ? null : scoredPages;\n}\n","export { default as scoreSimilarity } from './score-similarity';\nexport { default as scoreLinkText } from './score-link-text';\nexport { default as scorePageInLink } from './score-page-in-link';\nexport { default as scoreExtraneousLinks } from './score-extraneous-links';\nexport { default as scoreByParents } from './score-by-parents';\nexport { default as scorePrevLink } from './score-prev-link';\nexport { default as shouldScore } from './should-score';\nexport { default as scoreBaseUrl } from './score-base-url';\nexport { default as scoreNextLinkText } from './score-next-link-text';\nexport { default as scoreCapLinks } from './score-cap-links';\n","import difflib from 'difflib';\n\nexport default function scoreSimilarity(score, articleUrl, href) {\n  // Do this last and only if we have a real candidate, because it's\n  // potentially expensive computationally. Compare the link to this\n  // URL using difflib to get the % similarity of these URLs. On a\n  // sliding scale, subtract points from this link based on\n  // similarity.\n  if (score > 0) {\n    const similarity = new difflib.SequenceMatcher(\n      null,\n      articleUrl,\n      href\n    ).ratio();\n    // Subtract .1 from diff_percent when calculating modifier,\n    // which means that if it's less than 10% different, we give a\n    // bonus instead. Ex:\n    //  3% different = +17.5 points\n    // 10% different = 0 points\n    // 20% different = -25 points\n    const diffPercent = 1.0 - similarity;\n    const diffModifier = -(250 * (diffPercent - 0.2));\n    return score + diffModifier;\n  }\n\n  return 0;\n}\n","import { IS_DIGIT_RE } from '@/utils/text/constants';\n\nexport default function scoreLinkText(linkText, pageNum) {\n  // If the link text can be parsed as a number, give it a minor\n  // bonus, with a slight bias towards lower numbered pages. This is\n  // so that pages that might not have 'next' in their text can still\n  // get scored, and sorted properly by score.\n  let score = 0;\n\n  if (IS_DIGIT_RE.test(linkText.trim())) {\n    const linkTextAsNum = parseInt(linkText, 10);\n    // If it's the first page, we already got it on the first call.\n    // Give it a negative score. Otherwise, up to page 10, give a\n    // small bonus.\n    if (linkTextAsNum < 2) {\n      score = -30;\n    } else {\n      score = Math.max(0, 10 - linkTextAsNum);\n    }\n\n    // If it appears that the current page number is greater than\n    // this links page number, it's a very bad sign. Give it a big\n    // penalty.\n    if (pageNum && pageNum >= linkTextAsNum) {\n      score -= 50;\n    }\n  }\n\n  return score;\n}\n","export default function scorePageInLink(pageNum, isWp) {\n  // page in the link = bonus. Intentionally ignore wordpress because\n  // their ?p=123 link style gets caught by this even though it means\n  // separate documents entirely.\n  if (pageNum && !isWp) {\n    return 50;\n  }\n\n  return 0;\n}\n","import { EXTRANEOUS_LINK_HINTS_RE } from '../constants';\n\nexport default function scoreExtraneousLinks(href) {\n  // If the URL itself contains extraneous values, give a penalty.\n  if (EXTRANEOUS_LINK_HINTS_RE.test(href)) {\n    return -25;\n  }\n\n  return 0;\n}\n","export const DIGIT_RE = /\\d/;\n\n// A list of words that, if found in link text or URLs, likely mean that\n// this link is not a next page link.\nexport const EXTRANEOUS_LINK_HINTS = [\n  'print',\n  'archive',\n  'comment',\n  'discuss',\n  'e-mail',\n  'email',\n  'share',\n  'reply',\n  'all',\n  'login',\n  'sign',\n  'single',\n  'adx',\n  'entry-unrelated',\n];\nexport const EXTRANEOUS_LINK_HINTS_RE = new RegExp(\n  EXTRANEOUS_LINK_HINTS.join('|'),\n  'i'\n);\n\n// Match any link text/classname/id that looks like it could mean the next\n// page. Things like: next, continue, >, >>, » but not >|, »| as those can\n// mean last page.\nexport const NEXT_LINK_TEXT_RE = new RegExp(\n  '(next|weiter|continue|>([^|]|$)|»([^|]|$))',\n  'i'\n);\n\n// Match any link text/classname/id that looks like it is an end link: things\n// like \"first\", \"last\", \"end\", etc.\nexport const CAP_LINK_TEXT_RE = new RegExp('(first|last|end)', 'i');\n\n// Match any link text/classname/id that looks like it means the previous\n// page.\nexport const PREV_LINK_TEXT_RE = new RegExp('(prev|earl|old|new|<|«)', 'i');\n\n// Match any phrase that looks like it could be page, or paging, or pagination\nexport const PAGE_RE = new RegExp('pag(e|ing|inat)', 'i');\n","import { range } from '@/utils';\nimport {\n  NEGATIVE_SCORE_RE,\n  POSITIVE_SCORE_RE,\n  PAGE_RE,\n} from '@/utils/dom/constants';\nimport { EXTRANEOUS_LINK_HINTS_RE } from '../constants';\n\nfunction makeSig($link) {\n  return `${$link.attr('class') || ''} ${$link.attr('id') || ''}`;\n}\n\nexport default function scoreByParents($link) {\n  // If a parent node contains paging-like classname or id, give a\n  // bonus. Additionally, if a parent_node contains bad content\n  // (like 'sponsor'), give a penalty.\n  let $parent = $link.parent();\n  let positiveMatch = false;\n  let negativeMatch = false;\n  let score = 0;\n\n  Array.from(range(0, 4)).forEach(() => {\n    if ($parent.length === 0) {\n      return;\n    }\n\n    const parentData = makeSig($parent, ' ');\n\n    // If we have 'page' or 'paging' in our data, that's a good\n    // sign. Add a bonus.\n    if (!positiveMatch && PAGE_RE.test(parentData)) {\n      positiveMatch = true;\n      score += 25;\n    }\n\n    // If we have 'comment' or something in our data, and\n    // we don't have something like 'content' as well, that's\n    // a bad sign. Give a penalty.\n    if (\n      !negativeMatch &&\n      NEGATIVE_SCORE_RE.test(parentData) &&\n      EXTRANEOUS_LINK_HINTS_RE.test(parentData)\n    ) {\n      if (!POSITIVE_SCORE_RE.test(parentData)) {\n        negativeMatch = true;\n        score -= 25;\n      }\n    }\n\n    $parent = $parent.parent();\n  });\n\n  return score;\n}\n","export { default as range } from './range';\nexport { default as validateUrl } from './validate-url';\n","export default function* range(start = 1, end = 1) {\n  while (start <= end) {\n    yield (start += 1);\n  }\n}\n","// extremely simple url validation as a first step\nexport default function validateUrl({ hostname }) {\n  // If this isn't a valid url, return an error message\n  return !!hostname;\n}\n","import { PREV_LINK_TEXT_RE } from '../constants';\n\nexport default function scorePrevLink(linkData) {\n  // If the link has something like \"previous\", its definitely\n  // an old link, skip it.\n  if (PREV_LINK_TEXT_RE.test(linkData)) {\n    return -200;\n  }\n\n  return 0;\n}\n","import URL from 'url';\n\nimport { DIGIT_RE, EXTRANEOUS_LINK_HINTS_RE } from '../constants';\n\nexport default function shouldScore(\n  href,\n  articleUrl,\n  baseUrl,\n  parsedUrl,\n  linkText,\n  previousUrls\n) {\n  // skip if we've already fetched this url\n  if (previousUrls.find(url => href === url) !== undefined) {\n    return false;\n  }\n\n  // If we've already parsed this URL, or the URL matches the base\n  // URL, or is empty, skip it.\n  if (!href || href === articleUrl || href === baseUrl) {\n    return false;\n  }\n\n  const { hostname } = parsedUrl;\n  const { hostname: linkHost } = URL.parse(href);\n\n  // Domain mismatch.\n  if (linkHost !== hostname) {\n    return false;\n  }\n\n  // If href doesn't contain a digit after removing the base URL,\n  // it's certainly not the next page.\n  const fragment = href.replace(baseUrl, '');\n  if (!DIGIT_RE.test(fragment)) {\n    return false;\n  }\n\n  // This link has extraneous content (like \"comment\") in its link\n  // text, so we skip it.\n  if (EXTRANEOUS_LINK_HINTS_RE.test(linkText)) {\n    return false;\n  }\n\n  // Next page link text is never long, skip if it is too long.\n  if (linkText.length > 25) {\n    return false;\n  }\n\n  return true;\n}\n","export default function scoreBaseUrl(href, baseRegex) {\n  // If the baseUrl isn't part of this URL, penalize this\n  // link. It could still be the link, but the odds are lower.\n  // Example:\n  // http://www.actionscript.org/resources/articles/745/1/JavaScript-and-VBScript-Injection-in-ActionScript-3/Page1.html\n  if (!baseRegex.test(href)) {\n    return -25;\n  }\n\n  return 0;\n}\n","import { NEXT_LINK_TEXT_RE } from '../constants';\n\nexport default function scoreNextLinkText(linkData) {\n  // Things like \"next\", \">>\", etc.\n  if (NEXT_LINK_TEXT_RE.test(linkData)) {\n    return 50;\n  }\n\n  return 0;\n}\n","import { NEXT_LINK_TEXT_RE, CAP_LINK_TEXT_RE } from '../constants';\n\nexport default function scoreCapLinks(linkData) {\n  // Cap links are links like \"last\", etc.\n  if (CAP_LINK_TEXT_RE.test(linkData)) {\n    // If we found a link like \"last\", but we've already seen that\n    // this link is also \"next\", it's fine. If it's not been\n    // previously marked as \"next\", then it's probably bad.\n    // Penalize.\n    if (NEXT_LINK_TEXT_RE.test(linkData)) {\n      return -65;\n    }\n  }\n\n  return 0;\n}\n","import URL from 'url';\nimport { extractFromMeta } from '@/utils/dom';\n\nimport { CANONICAL_META_SELECTORS } from './constants';\n\nfunction parseDomain(url) {\n  const parsedUrl = URL.parse(url);\n  const { hostname } = parsedUrl;\n  return hostname;\n}\n\nfunction result(url) {\n  return {\n    url,\n    domain: parseDomain(url),\n  };\n}\n\nconst GenericUrlExtractor = {\n  extract({ $, url, metaCache }) {\n    const $canonical = $('link[rel=canonical]');\n    if ($canonical.length !== 0) {\n      const href = $canonical.attr('href');\n      if (href) {\n        return result(href);\n      }\n    }\n\n    const metaUrl = extractFromMeta($, CANONICAL_META_SELECTORS, metaCache);\n    if (metaUrl) {\n      return result(metaUrl);\n    }\n\n    return result(url);\n  },\n};\n\nexport default GenericUrlExtractor;\n","export const CANONICAL_META_SELECTORS = ['og:url'];\n","import ellipsize from 'ellipsize';\n\nimport { extractFromMeta, stripTags } from '@/utils/dom';\n\nimport { EXCERPT_META_SELECTORS } from './constants';\n\nexport function clean(content, $, maxLength = 200) {\n  content = content.replace(/[\\s\\n]+/g, ' ').trim();\n  return ellipsize(content, maxLength, { ellipse: '&hellip;' });\n}\n\nconst GenericExcerptExtractor = {\n  extract({ $, content, metaCache }) {\n    const excerpt = extractFromMeta($, EXCERPT_META_SELECTORS, metaCache);\n    if (excerpt) {\n      return clean(stripTags(excerpt, $));\n    }\n    // Fall back to excerpting from the extracted content\n    const maxLength = 200;\n    const shortContent = content.slice(0, maxLength * 5);\n    return clean($(shortContent).text(), $, maxLength);\n  },\n};\n\nexport default GenericExcerptExtractor;\n","export const EXCERPT_META_SELECTORS = ['og:description', 'twitter:description'];\n","import cheerio from 'cheerio';\n\nimport { normalizeSpaces } from '@/utils/text';\n\nconst getWordCount = content => {\n  const $ = cheerio.load(content);\n  const $content = $('div').first();\n  const text = normalizeSpaces($content.text());\n  return text.split(/\\s/).length;\n};\n\nconst getWordCountAlt = content => {\n  content = content.replace(/<[^>]*>/g, ' ');\n  content = content.replace(/\\s+/g, ' ');\n  content = content.trim();\n  return content.split(' ').length;\n};\n\nconst GenericWordCountExtractor = {\n  extract({ content }) {\n    let count = getWordCount(content);\n    if (count === 1) count = getWordCountAlt(content);\n    return count;\n  },\n};\n\nexport default GenericWordCountExtractor;\n","import { MediumExtractor, BloggerExtractor } from './custom';\n\nconst Detectors = {\n  'meta[name=\"al:ios:app_name\"][value=\"Medium\"]': MediumExtractor,\n  'meta[name=\"generator\"][value=\"blogger\"]': BloggerExtractor,\n};\n\nexport default function detectByHtml($) {\n  const selector = Reflect.ownKeys(Detectors).find(s => $(s).length > 0);\n\n  return Detectors[selector];\n}\n","import Cleaners from '@/cleaners';\nimport { convertNodeTo, makeLinksAbsolute } from '@/utils/dom';\nimport GenericExtractor from './generic';\n\n// Remove elements by an array of selectors\nexport function cleanBySelectors($content, $, { clean }) {\n  if (!clean) return $content;\n\n  $(clean.join(','), $content).remove();\n\n  return $content;\n}\n\n// Transform matching elements\nexport function transformElements($content, $, { transforms }) {\n  if (!transforms) return $content;\n\n  Reflect.ownKeys(transforms).forEach(key => {\n    const $matches = $(key, $content);\n    const value = transforms[key];\n\n    // If value is a string, convert directly\n    if (typeof value === 'string') {\n      $matches.each((index, node) => {\n        convertNodeTo($(node), $, transforms[key]);\n      });\n    } else if (typeof value === 'function') {\n      // If value is function, apply function to node\n      $matches.each((index, node) => {\n        const result = value($(node), $);\n        // If function returns a string, convert node to that value\n        if (typeof result === 'string') {\n          convertNodeTo($(node), $, result);\n        }\n      });\n    }\n  });\n\n  return $content;\n}\n\nfunction findMatchingSelector($, selectors, extractHtml, allowMultiple) {\n  return selectors.find(selector => {\n    if (Array.isArray(selector)) {\n      if (extractHtml) {\n        return selector.reduce((acc, s) => acc && $(s).length > 0, true);\n      }\n\n      const [s, attr] = selector;\n      return (\n        (allowMultiple || (!allowMultiple && $(s).length === 1)) &&\n        $(s).attr(attr) &&\n        $(s)\n          .attr(attr)\n          .trim() !== ''\n      );\n    }\n\n    return (\n      (allowMultiple || (!allowMultiple && $(selector).length === 1)) &&\n      $(selector)\n        .text()\n        .trim() !== ''\n    );\n  });\n}\n\nexport function select(opts) {\n  const { $, type, extractionOpts, extractHtml = false } = opts;\n  // Skip if there's not extraction for this type\n  if (!extractionOpts) return null;\n\n  // If a string is hardcoded for a type (e.g., Wikipedia\n  // contributors), return the string\n  if (typeof extractionOpts === 'string') return extractionOpts;\n\n  const { selectors, defaultCleaner = true, allowMultiple } = extractionOpts;\n\n  const overrideAllowMultiple = type === 'lead_image_url' || allowMultiple;\n\n  const matchingSelector = findMatchingSelector(\n    $,\n    selectors,\n    extractHtml,\n    overrideAllowMultiple\n  );\n\n  if (!matchingSelector) return null;\n\n  function transformAndClean($node) {\n    makeLinksAbsolute($node, $, opts.url || '');\n    cleanBySelectors($node, $, extractionOpts);\n    transformElements($node, $, extractionOpts);\n    return $node;\n  }\n\n  function selectHtml() {\n    // If the selector type requests html as its return type\n    // transform and clean the element with provided selectors\n    let $content;\n\n    // If matching selector is an array, we're considering this a\n    // multi-match selection, which allows the parser to choose several\n    // selectors to include in the result. Note that all selectors in the\n    // array must match in order for this selector to trigger\n    if (Array.isArray(matchingSelector)) {\n      $content = $(matchingSelector.join(','));\n      const $wrapper = $('<div></div>');\n      $content.each((_, element) => {\n        $wrapper.append(element);\n      });\n\n      $content = $wrapper;\n    } else {\n      $content = $(matchingSelector);\n    }\n\n    // Wrap in div so transformation can take place on root element\n    $content.wrap($('<div></div>'));\n    $content = $content.parent();\n    $content = transformAndClean($content);\n    if (Cleaners[type]) {\n      Cleaners[type]($content, { ...opts, defaultCleaner });\n    }\n\n    if (allowMultiple) {\n      return $content\n        .children()\n        .toArray()\n        .map(el => $.html($(el)));\n    }\n\n    return $.html($content);\n  }\n\n  if (extractHtml) {\n    return selectHtml(matchingSelector);\n  }\n\n  let $match;\n  let result;\n  // if selector is an array (e.g., ['img', 'src']),\n  // extract the attr\n  if (Array.isArray(matchingSelector)) {\n    const [selector, attr, transform] = matchingSelector;\n    $match = $(selector);\n    $match = transformAndClean($match);\n    result = $match.map((_, el) => {\n      const item = $(el)\n        .attr(attr)\n        .trim();\n      return transform ? transform(item) : item;\n    });\n  } else {\n    $match = $(matchingSelector);\n    $match = transformAndClean($match);\n    result = $match.map((_, el) =>\n      $(el)\n        .text()\n        .trim()\n    );\n  }\n\n  result =\n    Array.isArray(result.toArray()) && allowMultiple\n      ? result.toArray()\n      : result[0];\n  // Allow custom extractor to skip default cleaner\n  // for this type; defaults to true\n  if (defaultCleaner && Cleaners[type]) {\n    return Cleaners[type](result, { ...opts, ...extractionOpts });\n  }\n\n  return result;\n}\n\nexport function selectExtendedTypes(extend, opts) {\n  const results = {};\n  Reflect.ownKeys(extend).forEach(t => {\n    if (!results[t]) {\n      results[t] = select({ ...opts, type: t, extractionOpts: extend[t] });\n    }\n  });\n  return results;\n}\n\nfunction extractResult(opts) {\n  const { type, extractor, fallback = true } = opts;\n\n  const result = select({ ...opts, extractionOpts: extractor[type] });\n\n  // If custom parser succeeds, return the result\n  if (result) {\n    return result;\n  }\n\n  // If nothing matches the selector, and fallback is enabled,\n  // run the Generic extraction\n  if (fallback) return GenericExtractor[type](opts);\n\n  return null;\n}\n\nconst RootExtractor = {\n  extract(extractor = GenericExtractor, opts) {\n    const { contentOnly, extractedTitle } = opts;\n    // This is the generic extractor. Run its extract method\n    if (extractor.domain === '*') return extractor.extract(opts);\n\n    opts = {\n      ...opts,\n      extractor,\n    };\n\n    if (contentOnly) {\n      const content = extractResult({\n        ...opts,\n        type: 'content',\n        extractHtml: true,\n        title: extractedTitle,\n      });\n      return {\n        content,\n      };\n    }\n    let extendedResults = {};\n    if (extractor.extend) {\n      extendedResults = selectExtendedTypes(extractor.extend, opts);\n    }\n    const title = extractResult({ ...opts, type: 'title' });\n    const date_published = extractResult({ ...opts, type: 'date_published' });\n    const author = extractResult({ ...opts, type: 'author' });\n    const next_page_url = extractResult({ ...opts, type: 'next_page_url' });\n    const content = extractResult({\n      ...opts,\n      type: 'content',\n      extractHtml: true,\n      title,\n    });\n    const lead_image_url = extractResult({\n      ...opts,\n      type: 'lead_image_url',\n      content,\n    });\n    const excerpt = extractResult({ ...opts, type: 'excerpt', content });\n    const dek = extractResult({ ...opts, type: 'dek', content, excerpt });\n    const word_count = extractResult({ ...opts, type: 'word_count', content });\n    const direction = extractResult({ ...opts, type: 'direction', title });\n    const { url, domain } = extractResult({\n      ...opts,\n      type: 'url_and_domain',\n    }) || { url: null, domain: null };\n\n    return {\n      title,\n      content,\n      author,\n      date_published,\n      lead_image_url,\n      dek,\n      next_page_url,\n      url,\n      domain,\n      excerpt,\n      word_count,\n      direction,\n      ...extendedResults,\n    };\n  },\n};\n\nexport default RootExtractor;\n","import Resource from '@/resource';\nimport RootExtractor from '@/extractors/root-extractor';\nimport GenericExtractor from '@/extractors/generic';\nimport { removeAnchor } from '@/utils/text';\n\nexport default async function collectAllPages({\n  next_page_url,\n  html,\n  $,\n  metaCache,\n  result,\n  Extractor,\n  title,\n  url,\n}) {\n  // At this point, we've fetched just the first page\n  let pages = 1;\n  const previousUrls = [removeAnchor(url)];\n  // If we've gone over 26 pages, something has\n  // likely gone wrong.\n  while (next_page_url && pages < 26) {\n    pages += 1;\n    // eslint-disable-next-line no-await-in-loop\n    $ = await Resource.create(next_page_url);\n    html = $.html();\n\n    const extractorOpts = {\n      url: next_page_url,\n      html,\n      $,\n      metaCache,\n      extractedTitle: title,\n      previousUrls,\n    };\n\n    const nextPageResult = RootExtractor.extract(Extractor, extractorOpts);\n\n    previousUrls.push(next_page_url);\n    result = {\n      ...result,\n      content: `${result.content}<hr><h4>Page ${pages}</h4>${nextPageResult.content\n        }`,\n    };\n\n    // eslint-disable-next-line prefer-destructuring\n    next_page_url = nextPageResult.next_page_url;\n  }\n\n  const word_count = GenericExtractor.word_count({\n    content: `<div>${result.content}</div>`,\n  });\n  return {\n    ...result,\n    total_pages: pages,\n    rendered_pages: pages,\n    word_count,\n  };\n}\n","import cheerio from 'cheerio';\nimport iconv from 'iconv-lite';\n\nimport { getEncoding } from '@/utils/text';\nimport { fetchResource } from './utils';\nimport { normalizeMetaTags, convertLazyLoadedImages, clean } from './utils/dom';\n\nconst Resource = {\n  // Create a Resource.\n  //\n  // :param url: The URL for the document we should retrieve.\n  // :param response: If set, use as the response rather than\n  //                  attempting to fetch it ourselves. Expects a\n  //                  string.\n  // :param headers: Custom headers to be included in the request\n  async create(url, preparedResponse, parsedUrl, headers = {}) {\n    let result;\n\n    if (preparedResponse) {\n      const validResponse = {\n        statusMessage: 'OK',\n        statusCode: 200,\n        headers: {\n          'content-type': 'text/html',\n          'content-length': 500,\n        },\n      };\n\n      result = {\n        body: preparedResponse,\n        response: validResponse,\n        alreadyDecoded: true,\n      };\n    } else {\n      result = await fetchResource(url, parsedUrl, headers);\n    }\n\n    if (result.error) {\n      result.failed = true;\n      return result;\n    }\n\n    return this.generateDoc(result);\n  },\n\n  generateDoc({ body: content, response, alreadyDecoded = false }) {\n    const { 'content-type': contentType = '' } = response.headers;\n\n    // TODO: Implement is_text function from\n    // https://github.com/ReadabilityHoldings/readability/blob/8dc89613241d04741ebd42fa9fa7df1b1d746303/readability/utils/text.py#L57\n    if (!contentType.includes('html') && !contentType.includes('text')) {\n      throw new Error('Content does not appear to be text.');\n    }\n\n    let $ = this.encodeDoc({ content, contentType, alreadyDecoded });\n\n    if ($.root().children().length === 0) {\n      throw new Error('No children, likely a bad parse.');\n    }\n\n    $ = normalizeMetaTags($);\n    $ = convertLazyLoadedImages($);\n    $ = clean($);\n\n    return $;\n  },\n\n  encodeDoc({ content, contentType, alreadyDecoded = false }) {\n    if (alreadyDecoded) {\n      return cheerio.load(content);\n    }\n\n    const encoding = getEncoding(contentType);\n    let decodedContent = iconv.decode(content, encoding);\n    let $ = cheerio.load(decodedContent);\n    // after first cheerio.load, check to see if encoding matches\n    const contentTypeSelector = cheerio.browser\n      ? 'meta[http-equiv=content-type]'\n      : 'meta[http-equiv=content-type i]';\n    const metaContentType =\n      $(contentTypeSelector).attr('content') ||\n      $('meta[charset]').attr('charset');\n    const properEncoding = getEncoding(metaContentType);\n\n    // if encodings in the header/body dont match, use the one in the body\n    if (metaContentType && properEncoding !== encoding) {\n      decodedContent = iconv.decode(content, properEncoding);\n      $ = cheerio.load(decodedContent);\n    }\n\n    return $;\n  },\n};\n\nexport default Resource;\n","export { default as fetchResource } from './fetch-resource';\n","import URL from 'url';\nimport request from 'postman-request';\n\nimport {\n  REQUEST_HEADERS,\n  FETCH_TIMEOUT,\n  BAD_CONTENT_TYPES_RE,\n  MAX_CONTENT_LENGTH,\n} from './constants';\n\nfunction get(options) {\n  return new Promise((resolve, reject) => {\n    request(options, (err, response, body) => {\n      if (err) {\n        reject(err);\n      } else {\n        resolve({ body, response });\n      }\n    });\n  });\n}\n\n// Evaluate a response to ensure it's something we should be keeping.\n// This does not validate in the sense of a response being 200 or not.\n// Validation here means that we haven't found reason to bail from\n// further processing of this url.\n\nexport function validateResponse(response, parseNon200 = false) {\n  // Check if we got a valid status code\n  // This isn't great, but I'm requiring a statusMessage to be set\n  // before short circuiting b/c nock doesn't set it in tests\n  // statusMessage only not set in nock response, in which case\n  // I check statusCode, which is currently only 200 for OK responses\n  // in tests\n  if (\n    (response.statusMessage && response.statusMessage !== 'OK') ||\n    response.statusCode !== 200\n  ) {\n    if (!response.statusCode) {\n      throw new Error(\n        `Unable to fetch content. Original exception was ${response.error}`\n      );\n    } else if (!parseNon200) {\n      throw new Error(\n        `Resource returned a response status code of ${\n          response.statusCode\n        } and resource was instructed to reject non-200 status codes.`\n      );\n    }\n  }\n\n  const {\n    'content-type': contentType,\n    'content-length': contentLength,\n  } = response.headers;\n\n  // Check that the content is not in BAD_CONTENT_TYPES\n  if (BAD_CONTENT_TYPES_RE.test(contentType)) {\n    throw new Error(\n      `Content-type for this resource was ${contentType} and is not allowed.`\n    );\n  }\n\n  // Check that the content length is below maximum\n  if (contentLength > MAX_CONTENT_LENGTH) {\n    throw new Error(\n      `Content for this resource was too large. Maximum content length is ${MAX_CONTENT_LENGTH}.`\n    );\n  }\n\n  return true;\n}\n\n// Grabs the last two pieces of the URL and joins them back together\n// This is to get the 'livejournal.com' from 'erotictrains.livejournal.com'\nexport function baseDomain({ host }) {\n  return host\n    .split('.')\n    .slice(-2)\n    .join('.');\n}\n\n// Set our response attribute to the result of fetching our URL.\n// TODO: This should gracefully handle timeouts and raise the\n//       proper exceptions on the many failure cases of HTTP.\n// TODO: Ensure we are not fetching something enormous. Always return\n//       unicode content for HTML, with charset conversion.\n\nexport default async function fetchResource(url, parsedUrl, headers = {}) {\n  parsedUrl = parsedUrl || URL.parse(encodeURI(url));\n  const options = {\n    url: parsedUrl.href,\n    headers: { ...REQUEST_HEADERS, ...headers },\n    timeout: FETCH_TIMEOUT,\n    // Accept cookies\n    jar: true,\n    // Set to null so the response returns as binary and body as buffer\n    // https://github.com/request/request#requestoptions-callback\n    encoding: null,\n    // Accept and decode gzip\n    gzip: true,\n    // Follow any non-GET redirects\n    followAllRedirects: true,\n    ...(typeof window !== 'undefined'\n      ? {}\n      : {\n          // Follow GET redirects; this option is for Node only\n          followRedirect: true,\n        }),\n  };\n\n  const { response, body } = await get(options);\n\n  try {\n    validateResponse(response);\n    return {\n      body,\n      response,\n    };\n  } catch (e) {\n    return {\n      error: true,\n      message: e.message,\n    };\n  }\n}\n","import cheerio from 'cheerio';\n\n// Browser does not like us setting user agent\nexport const REQUEST_HEADERS = cheerio.browser\n  ? {}\n  : {\n      'User-Agent':\n        'Mozilla/5.0 (Windows NT 6.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/41.0.2228.0 Safari/537.36',\n    };\n\n// The number of milliseconds to attempt to fetch a resource before timing out.\nexport const FETCH_TIMEOUT = 10000;\n\n// Content types that we do not extract content from\nconst BAD_CONTENT_TYPES = [\n  'audio/mpeg',\n  'image/gif',\n  'image/jpeg',\n  'image/jpg',\n];\n\nexport const BAD_CONTENT_TYPES_RE = new RegExp(\n  `^(${BAD_CONTENT_TYPES.join('|')})$`,\n  'i'\n);\n\n// Use this setting as the maximum size an article can be\n// for us to attempt parsing. Defaults to 5 MB.\nexport const MAX_CONTENT_LENGTH = 5242880;\n\n// Turn the global proxy on or off\n// Proxying is not currently enabled in Python source\n// so not implementing logic in port.\nexport const PROXY_DOMAINS = false;\nexport const REQUESTS_PROXIES = {\n  http: 'http://38.98.105.139:33333',\n  https: 'http://38.98.105.139:33333',\n};\n\nexport const DOMAINS_TO_PROXY = ['nih.gov', 'gutenberg.org'];\n","export { default as normalizeMetaTags } from './normalize-meta-tags';\nexport {\n  default as convertLazyLoadedImages,\n} from './convert-lazy-loaded-images';\nexport { default as clean } from './clean';\n","function convertMetaProp($, from, to) {\n  $(`meta[${from}]`).each((_, node) => {\n    const $node = $(node);\n\n    const value = $node.attr(from);\n    $node.attr(to, value);\n    $node.removeAttr(from);\n  });\n\n  return $;\n}\n\n// For ease of use in extracting from meta tags,\n// replace the \"content\" attribute on meta tags with the\n// \"value\" attribute.\n//\n// In addition, normalize 'property' attributes to 'name' for ease of\n// querying later. See, e.g., og or twitter meta tags.\n\nexport default function normalizeMetaTags($) {\n  $ = convertMetaProp($, 'content', 'value');\n  $ = convertMetaProp($, 'property', 'name');\n  return $;\n}\n","import { getAttrs } from '@/utils/dom';\n\nimport { IS_LINK, IS_IMAGE, IS_SRCSET } from './constants';\n\n// Convert all instances of images with potentially\n// lazy loaded images into normal images.\n// Many sites will have img tags with no source, or an image tag with a src\n// attribute that a is a placeholer. We need to be able to properly fill in\n// the src attribute so the images are no longer lazy loaded.\nexport default function convertLazyLoadedImages($) {\n  const extractSrcFromJSON = str => {\n    try {\n      const { src } = JSON.parse(str);\n      if (typeof src === 'string') return src;\n    } catch (_) {\n      return false;\n    }\n\n    return false;\n  };\n\n  $('img').each((_, img) => {\n    const attrs = getAttrs(img);\n\n    Reflect.ownKeys(attrs).forEach(attr => {\n      const value = attrs[attr];\n\n      if (attr !== 'srcset' && IS_LINK.test(value) && IS_SRCSET.test(value)) {\n        $(img).attr('srcset', value);\n      } else if (\n        attr !== 'src' &&\n        attr !== 'srcset' &&\n        IS_LINK.test(value) &&\n        IS_IMAGE.test(value)\n      ) {\n        // Is the value a JSON object? If so, we should attempt to extract the image src from the data.\n        const existingSrc = extractSrcFromJSON(value);\n        if (existingSrc) {\n          $(img).attr('src', existingSrc);\n        } else {\n          $(img).attr('src', value);\n        }\n      }\n    });\n  });\n\n  return $;\n}\n","export const IS_LINK = new RegExp('https?://', 'i');\nconst IMAGE_RE = '.(png|gif|jpe?g)';\nexport const IS_IMAGE = new RegExp(`${IMAGE_RE}`, 'i');\nexport const IS_SRCSET = new RegExp(\n  `${IMAGE_RE}(\\\\?\\\\S+)?(\\\\s*[\\\\d.]+[wx])`,\n  'i'\n);\n\nexport const TAGS_TO_REMOVE = ['script', 'style', 'form'].join(',');\n","import { TAGS_TO_REMOVE } from './constants';\n\nfunction isComment(index, node) {\n  return node.type === 'comment';\n}\n\nfunction cleanComments($) {\n  $.root()\n    .find('*')\n    .contents()\n    .filter(isComment)\n    .remove();\n\n  return $;\n}\n\nexport default function clean($) {\n  $(TAGS_TO_REMOVE).remove();\n\n  $ = cleanComments($);\n  return $;\n}\n"],"mappings":"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","names":["exports","module","_j","_ref","result","Heap","require_heap","exports","module","exports","SequenceMatcher","b","result","Differ","_j","_len1","_ref3","_l","_len3","_ref5","require_difflib","exports","module","import_url","import_cheerio","import_url","URL","import_cheerio","import_url","URL","UNLIKELY_CANDIDATES_BLACKLIST","UNLIKELY_CANDIDATES_WHITELIST","DIV_TO_P_BLOCK_TAGS","NON_TOP_CANDIDATE_TAGS","NON_TOP_CANDIDATE_TAGS_RE","PHOTO_HINTS","PHOTO_HINTS_RE","POSITIVE_SCORE_HINTS","POSITIVE_SCORE_RE","READABILITY_ASSET","NEGATIVE_SCORE_HINTS","NEGATIVE_SCORE_RE","DIGIT_RE","BR_TAGS_RE","BR_TAG_RE","BLOCK_LEVEL_TAGS","BLOCK_LEVEL_TAGS_RE","candidatesBlacklist","CANDIDATES_BLACKLIST","candidatesWhitelist","CANDIDATES_WHITELIST","UNLIKELY_RE","PARAGRAPH_SCORE_TAGS","CHILD_CONTENT_TAGS","BAD_TAGS","HTML_OR_BODY_RE","POSITIVE_SCORE_RE","NEGATIVE_SCORE_RE","PHOTO_HINTS_RE","READABILITY_ASSET","textLength","textLength","PARAGRAPH_SCORE_TAGS","CHILD_CONTENT_TAGS","BAD_TAGS","convertSpans","import_url","URL","iconv","NON_TOP_CANDIDATE_TAGS_RE","NON_TOP_CANDIDATE_TAGS_RE","import_url","URL","cleanTags","validUrl","moment","parseFormat","import_url","URL","wuzzy","cheerio","extractor_default","extractor_default","extractor_default","extractor_default","PHOTO_HINTS_RE","extractor_default","import_url","import_url","difflib","DIGIT_RE","EXTRANEOUS_LINK_HINTS","EXTRANEOUS_LINK_HINTS_RE","CAP_LINK_TEXT_RE","PREV_LINK_TEXT_RE","PAGE_RE","EXTRANEOUS_LINK_HINTS_RE","scoreByParents","EXTRANEOUS_LINK_HINTS_RE","PREV_LINK_TEXT_RE","import_url","URL","DIGIT_RE","EXTRANEOUS_LINK_HINTS_RE","CAP_LINK_TEXT_RE","makeSig","URL","scoreByParents","URL","extractor_default","import_url","URL","extractor_default","clean","ellipsize","extractor_default","import_cheerio","cheerio","extractor_default","extractor_default","stringDirection","cheerio","URL","clean","result","s","content","import_cheerio","import_iconv_lite","import_url","import_cheerio","cheerio","request","URL","clean","result","clean","cheerio","iconv","result","cheerio","URL","result","TurndownService"]}